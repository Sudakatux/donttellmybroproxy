["^ ","~:foreign-libs",[],"~:externs",[],"~:resources",[["^ ","~:cache-key",[1543150818000],"~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","schema/spec/variant.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",24],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$schema.spec.variant","~:imports",null,"~:requires",["^ ","~$schema.utils","^D","~$utils","^D","~$schema.spec.core","^F","~$spec","^F","~$cljs.core","^H","~$goog","^I"],"~:seen",["^?",["~:require","~:require-macros"]],"~:uses",null,"^L",["^ ","~$schema.macros","^N","~$macros","^N","^H","^H"],"~:cljc",false,"~:flags",["^ ","^K",["^?",[]],"^L",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^I","^H","^D","^F"]],"~:ns","^A","~:output-name","schema.spec.variant.js","~:resource-id",["~:shadow.build.classpath/resource","schema/spec/variant.cljs"],"~:resource-name","schema/spec/variant.cljs","~:type","~:cljs","~:last-modified",1543150818000,"^C",["^?",["^H","^I","^F","^D"]],"~:pom-info",["^ ","~:group-id","~$prismatic","~:artifact-id","~$schema","~:version","1.1.9","^@","schema","~:description","Clojure(Script) library for declarative data description and validation","~:url","http://github.com/plumatic/schema","~:id","~$prismatic/schema","~:coordinate",["^19","1.1.9"]],"~:macro-requires",["^?",["^N","^H"]],"^17",["~#url","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/spec/variant.cljs"],"~:provides",["^?",["^A"]],"~:from-jar",true,"^S",["^I","^H","^D","^F"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","~:doc","Private utilities used in schema implementation.","^8","schema/utils.cljs","^9",1,"^:",5,"^;",1,"^<",17],"^=",["^ ","~$char-map","^D"],"^>",["^?",["~$record?"]],"^@","^D","^B",null,"^C",["^ ","~$goog.string.format","^1B","~$goog.string","^1C","~$gstring","^1C","~$clojure.string","^1E","~$string","^1E","^H","^H","^I","^I"],"^J",["^?",["^K","^L"]],"^M",null,"^L",["^ ","^D","^D","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]],"^L",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^1B","^1C","^1E"]],"^T","^D","^U","schema.utils.js","^V",["^W","schema/utils.cljs"],"^X","schema/utils.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^1C","^H","^I","^1B","^1E"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^H","^D"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/utils.cljs"],"^1=",["^?",["^D"]],"^1>",true,"^S",["^I","^H","^1B","^1C","^1E"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^1?","A collection spec represents a collection of elements,\n   each of which is itself schematized.","^8","schema/spec/collection.cljs","^9",1,"^:",5,"^;",1,"^<",27],"^=",null,"^>",["^?",[]],"^@","~$schema.spec.collection","^B",null,"^C",["^ ","^D","^D","^E","^D","^F","^F","^G","^F","^H","^H","^I","^I"],"^J",["^?",["^K","^L"]],"^M",null,"^L",["^ ","^N","^N","^O","^N","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]],"^L",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^D","^F"]],"^T","^1G","^U","schema.spec.collection.js","^V",["^W","schema/spec/collection.cljs"],"^X","schema/spec/collection.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^H","^I","^F","^D"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^N","^H"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/spec/collection.cljs"],"^1=",["^?",["^1G"]],"^1>",true,"^S",["^I","^H","^D","^F"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^1?","A library for data shape definition and validation. A Schema is just Clojure data,\n   which can be used to document and validate Clojure functions and data.\n\n   For example,\n\n   (def FooBar {:foo Keyword :bar [Number]}) ;; a schema\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0]})\n   ==> nil\n\n   representing successful validation, but the following all return helpful errors\n   describing how the provided data fails to measure up to schema FooBar's standards.\n\n   (check FooBar {:bar [1.0 2.0 3.0]})\n   ==> {:foo missing-required-key}\n\n   (check FooBar {:foo 1 :bar [1.0 2.0 3.0]})\n   ==> {:foo (not (keyword? 1))}\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0] :baz 1})\n   ==> {:baz disallowed-key}\n\n   Schema lets you describe your leaf values using the Any, Keyword, Symbol, Number,\n   String, and Int definitions below, or (in Clojure) you can use arbitrary Java\n   classes or primitive casts to describe simple values.\n\n   From there, you can build up schemas for complex types using Clojure syntax\n   (map literals for maps, set literals for sets, vector literals for sequences,\n   with details described below), plus helpers below that provide optional values,\n   enumerations, arbitrary predicates, and more.\n\n   Assuming you (:require [schema.core :as s :include-macros true]),\n   Schema also provides macros for defining records with schematized elements\n   (s/defrecord), and named or anonymous functions (s/fn and s/defn) with\n   schematized inputs and return values.  In addition to producing better-documented\n   records and functions, these macros allow you to retrieve the schema associated\n   with the defined record or function.  Moreover, functions include optional\n   *validation*, which will throw an error if the inputs or outputs do not\n   match the provided schemas:\n\n   (s/defrecord FooBar\n    [foo :- Int\n     bar :- String])\n\n   (s/defn quux :- Int\n    [foobar :- Foobar\n     mogrifier :- Number]\n    (* mogrifier (+ (:foo foobar) (Long/parseLong (:bar foobar)))))\n\n   (quux (FooBar. 10 \"5\") 2)\n   ==> 30\n\n   (fn-schema quux)\n   ==> (=> Int (record user.FooBar {:foo Int, :bar java.lang.String}) java.lang.Number)\n\n   (s/with-fn-validation (quux (FooBar. 10.2 \"5\") 2))\n   ==> Input to quux does not match schema: [(named {:foo (not (integer? 10.2))} foobar) nil]\n\n   As you can see, the preferred syntax for providing type hints to schema's defrecord,\n   fn, and defn macros is to follow each element, argument, or function name with a\n   :- schema.  Symbols without schemas default to a schema of Any.  In Clojure,\n   class (e.g., clojure.lang.String) and primitive schemas (long, double) are also\n   propagated to tag metadata to ensure you get the type hinting and primitive\n   behavior you ask for.\n\n   If you don't like this style, standard Clojure-style typehints are also supported:\n\n   (fn-schema (s/fn [^String x]))\n   ==> (=> Any java.lang.String)\n\n   You can directly type hint a symbol as a class, primitive, or simple\n   schema.\n\n   See the docstrings of defrecord, fn, and defn for more details about how\n   to use these macros.","^8","schema/core.cljs","^9",1,"^:",5,"^;",1,"^<",16],"^=",null,"^>",["^?",["~$atom","~$MapEntry","~$Symbol","~$fn","~$Inst","~$defn","~$defmethod","~$letfn","~$Keyword","~$->MapEntry","~$defrecord"]],"^@","~$schema.core","^B",null,"^C",["^ ","~$collection","^1G","^1G","^1G","^H","^H","^I","^I","^F","^F","~$variant","^A","~$leaf","~$schema.spec.leaf","^A","^A","^1W","^1W","^G","^F","~$str","^1E","^E","^D","^1E","^1E","^D","^D"],"^J",["^?",["^K","^L"]],"^M",null,"^L",["^ ","^F","^F","^G","^F","^N","^N","^O","^N","^1S","^1S","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]],"^L",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^1E","^D","^F","^1W","^A","^1G"]],"^T","^1S","^U","schema.core.js","^V",["^W","schema/core.cljs"],"^X","schema/core.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^1G","^H","^I","^F","^A","^1W","^1E","^D"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^1S","^N","^H","^F"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/core.cljs"],"^1=",["^?",["^1S"]],"^1>",true,"^S",["^I","^H","^1E","^D","^F","^1W","^A","^1G"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^1?","Extension of schema for input coercion (coercing an input to match a schema)","^8","schema/coerce.cljs","^9",1,"^:",5,"^;",1,"^<",18],"^=",null,"^>",["^?",[]],"^@","~$schema.coerce","^B",null,"^C",["^ ","^1S","^1S","^H","^H","^I","^I","^F","^F","~$s","^1S","^G","^F","^1X","^1E","^E","^D","^1E","^1E","~$cljs.reader","^1Z","~$reader","^1Z","^D","^D"],"^J",["^?",["^K","^L"]],"^M",null,"^L",["^ ","^1S","^1S","~$s","^1S","^N","^N","^O","^N","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]],"^L",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^1Z","^1S","^F","^D","^1E"]],"^T","^1Y","^U","schema.coerce.js","^V",["^W","schema/coerce.cljs"],"^X","schema/coerce.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^1S","^H","^I","^F","^1E","^1Z","^D"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^1S","^N","^H"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/coerce.cljs"],"^1=",["^?",["^1Y"]],"^1>",true,"^S",["^I","^H","^1Z","^1S","^F","^D","^1E"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^1?","Utilities for testing with schemas","^8","schema/test.cljs","^9",1,"^:",5,"^;",1,"^<",16],"^=",null,"^>",["^?",[]],"^@","~$schema.test","^B",null,"^C",["^ ","^1S","^1S","~$s","^1S","^H","^H","^I","^I"],"^J",["^?",["^K"]],"^M",null,"^L",["^ ","^1S","^1S","~$s","^1S","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^1S"]],"^T","^20","^U","schema.test.js","^V",["^W","schema/test.cljs"],"^X","schema/test.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^1S","^H","^I"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^1S","^H"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/test.cljs"],"^1=",["^?",["^20"]],"^1>",true,"^S",["^I","^H","^1S"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^1?","Schemas representing abstract classes and subclasses","^8","schema/experimental/abstract_map.cljs","^9",1,"^:",5,"^;",1,"^<",37],"^=",null,"^>",["^?",[]],"^@","~$schema.experimental.abstract-map","^B",null,"^C",["^ ","^1S","^1S","^H","^H","^I","^I","^F","^F","^1U","^A","^A","^A","~$s","^1S","^G","^F","^1X","^1E","^1E","^1E"],"^J",["^?",["^K"]],"^M",null,"^L",["^ ","^1S","^1S","~$s","^1S","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^1E","^1S","^F","^A"]],"^T","^21","^U","schema.experimental.abstract_map.js","^V",["^W","schema/experimental/abstract_map.cljs"],"^X","schema/experimental/abstract_map.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^1S","^H","^I","^F","^A","^1E"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^1S","^H"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/experimental/abstract_map.cljs"],"^1=",["^?",["^21"]],"^1>",true,"^S",["^I","^H","^1E","^1S","^F","^A"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^1?","Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure.","^8","schema/spec/core.cljs","^9",1,"^:",5,"^;",1,"^<",21],"^=",null,"^>",["^?",[]],"^@","^F","^B",null,"^C",["^ ","^D","^D","^E","^D","^H","^H","^I","^I"],"^J",["^?",["^K","^L"]],"^M",null,"^L",["^ ","^N","^N","^O","^N","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]],"^L",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^D"]],"^T","^F","^U","schema.spec.core.js","^V",["^W","schema/spec/core.cljs"],"^X","schema/spec/core.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^H","^I","^D"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^N","^H"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/spec/core.cljs"],"^1=",["^?",["^F"]],"^1>",true,"^S",["^I","^H","^D"]],["^ ","^3",[1543150818000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^8","schema/spec/leaf.cljs","^9",1,"^:",5,"^;",1,"^<",21],"^=",null,"^>",["^?",[]],"^@","^1W","^B",null,"^C",["^ ","^F","^F","^G","^F","^H","^H","^I","^I"],"^J",["^?",["^K"]],"^M",null,"^L",["^ ","^H","^H"],"^P",false,"^Q",["^ ","^K",["^?",[]]],"^R",["^ "],"^S",["^I","^H","^F"]],"^T","^1W","^U","schema.spec.leaf.js","^V",["^W","schema/spec/leaf.cljs"],"^X","schema/spec/leaf.cljs","^Y","^Z","^[",1543150818000,"^C",["^?",["^H","^I","^F"]],"^10",["^ ","^11","^12","^13","^14","^15","1.1.9","^@","schema","^16","Clojure(Script) library for declarative data description and validation","^17","http://github.com/plumatic/schema","^18","^19","^1:",["^19","1.1.9"]],"^1;",["^?",["^H"]],"^17",["^1<","jar:file:/home/jimmy/.m2/repository/prismatic/schema/1.1.9/schema-1.1.9.jar!/schema/spec/leaf.cljs"],"^1=",["^?",["^1W"]],"^1>",true,"^S",["^I","^H","^F"]]],"~:data-readers",null,"~:shadow.build.classpath/CACHE-TIMESTAMP",1568638379000]