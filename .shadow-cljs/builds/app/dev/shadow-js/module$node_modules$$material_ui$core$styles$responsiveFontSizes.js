["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@material-ui/core/styles/responsiveFontSizes.js"],"~:js","shadow$provide.module$node_modules$$material_ui$core$styles$responsiveFontSizes=function(global,require,module,exports){function isUnitless(value){return String(parseFloat(value)).length===String(value).length}global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(themeInput){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},_options$breakpoints=options.breakpoints;_options$breakpoints=\nvoid 0===_options$breakpoints?[\"sm\",\"md\",\"lg\"]:_options$breakpoints;var _options$disableAlign=options.disableAlign,disableAlign=void 0===_options$disableAlign?!1:_options$disableAlign;_options$disableAlign=options.factor;var factor=void 0===_options$disableAlign?2:_options$disableAlign;options=options.variants;options=void 0===options?\"h1 h2 h3 h4 h5 h6 subtitle1 subtitle2 body1 body2 caption button overline\".split(\" \"):options;var theme=(0,_extends2.default)({},themeInput);theme.typography=(0,_extends2.default)({},\ntheme.typography);var typography=theme.typography,convert=(0,_convertCssLength.default)(typography.htmlFontSize),breakpointValues=_options$breakpoints.map(function(x){return theme.breakpoints.values[x]});options.forEach(function(variant){var style=typography[variant],remFontSize=parseFloat(convert(style.fontSize,\"rem\"));if(!(1>=remFontSize)){var minFontSize=1+(remFontSize-1)/factor,lineHeight=style.lineHeight;if(!isUnitless(lineHeight)&&!disableAlign)throw Error(\"Material-UI: unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\");\nisUnitless(lineHeight)||(lineHeight=parseFloat(convert(lineHeight,\"rem\"))/parseFloat(remFontSize));var transform=null;disableAlign||(transform=function(value){return(0,_cssUtils.alignProperty)({size:value,grid:(0,_cssUtils.fontGrid)({pixels:4,lineHeight:lineHeight,htmlFontSize:typography.htmlFontSize})})});typography[variant]=(0,_extends2.default)({},style,(0,_cssUtils.responsiveProperty)({cssProperty:\"fontSize\",min:minFontSize,max:remFontSize,unit:\"rem\",breakpoints:breakpointValues,transform:transform}))}});\nreturn theme};var _extends2=global(require(\"module$node_modules$$babel$runtime$helpers$extends\")),_convertCssLength=global(require(\"module$node_modules$convert_css_length$dist$index\")),_cssUtils=require(\"module$node_modules$$material_ui$core$styles$cssUtils\")}","~:source","shadow$provide[\"module$node_modules$$material_ui$core$styles$responsiveFontSizes\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _convertCssLength = _interopRequireDefault(require(\"convert-css-length\"));\n\nvar _cssUtils = require(\"./cssUtils\");\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\nfunction responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n  var theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = (0, _convertCssLength.default)(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error([\"Material-UI: unsupported non-unitless line height with grid alignment.\", 'Use unitless line heights instead.'].join('\\n'));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return (0, _cssUtils.alignProperty)({\n          size: value,\n          grid: (0, _cssUtils.fontGrid)({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$shadow.js","~$module$node_modules$convert_css_length$dist$index","~$module$node_modules$$babel$runtime$helpers$extends","~$module$node_modules$$material_ui$core$styles$cssUtils"]],"~:properties",["^5",["min","grid","breakpoints","lineHeight","__esModule","max","transform","cssProperty","pixels","value","typography","htmlFontSize","unit","size","default"]],"~:compiled-at",1570448038692,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$material_ui$core$styles$responsiveFontSizes.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@material-ui/core/styles/responsiveFontSizes.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$material_ui$core$styles$responsiveFontSizes\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = responsiveFontSizes;\\n\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\n\\nvar _convertCssLength = _interopRequireDefault(require(\\\"convert-css-length\\\"));\\n\\nvar _cssUtils = require(\\\"./cssUtils\\\");\\n\\nfunction isUnitless(value) {\\n  return String(parseFloat(value)).length === String(value).length;\\n}\\n\\nfunction responsiveFontSizes(themeInput) {\\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var _options$breakpoints = options.breakpoints,\\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\\n      _options$disableAlign = options.disableAlign,\\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\\n      _options$factor = options.factor,\\n      factor = _options$factor === void 0 ? 2 : _options$factor,\\n      _options$variants = options.variants,\\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\\n  var theme = (0, _extends2.default)({}, themeInput);\\n  theme.typography = (0, _extends2.default)({}, theme.typography);\\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\\n\\n  var convert = (0, _convertCssLength.default)(typography.htmlFontSize);\\n  var breakpointValues = breakpoints.map(function (x) {\\n    return theme.breakpoints.values[x];\\n  });\\n  variants.forEach(function (variant) {\\n    var style = typography[variant];\\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\\n\\n    if (remFontSize <= 1) {\\n      return;\\n    }\\n\\n    var maxFontSize = remFontSize;\\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\\n    var lineHeight = style.lineHeight;\\n\\n    if (!isUnitless(lineHeight) && !disableAlign) {\\n      throw new Error([\\\"Material-UI: unsupported non-unitless line height with grid alignment.\\\", 'Use unitless line heights instead.'].join('\\\\n'));\\n    }\\n\\n    if (!isUnitless(lineHeight)) {\\n      // make it unitless\\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\\n    }\\n\\n    var transform = null;\\n\\n    if (!disableAlign) {\\n      transform = function transform(value) {\\n        return (0, _cssUtils.alignProperty)({\\n          size: value,\\n          grid: (0, _cssUtils.fontGrid)({\\n            pixels: 4,\\n            lineHeight: lineHeight,\\n            htmlFontSize: typography.htmlFontSize\\n          })\\n        });\\n      };\\n    }\\n\\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\\n      cssProperty: 'fontSize',\\n      min: minFontSize,\\n      max: maxFontSize,\\n      unit: 'rem',\\n      breakpoints: breakpointValues,\\n      transform: transform\\n    }));\\n  });\\n  return theme;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isUnitless\",\"value\",\"String\",\"parseFloat\",\"length\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"default\",\"responsiveFontSizes\",\"themeInput\",\"options\",\"arguments\",\"undefined\",\"_options$breakpoints\",\"breakpoints\",\"_options$disableAlign\",\"disableAlign\",\"_options$factor\",\"factor\",\"_options$variants\",\"variants\",\"theme\",\"_extends2\",\"typography\",\"convert\",\"_convertCssLength\",\"htmlFontSize\",\"breakpointValues\",\"map\",\"x\",\"values\",\"forEach\",\"variant\",\"style\",\"remFontSize\",\"fontSize\",\"minFontSize\",\"lineHeight\",\"Error\",\"transform\",\"_cssUtils\",\"alignProperty\",\"size\",\"grid\",\"fontGrid\",\"pixels\",\"responsiveProperty\",\"cssProperty\",\"min\",\"max\",\"unit\"]\n}\n"]