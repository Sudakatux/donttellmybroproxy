["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.whitespace');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.node');\ngoog.require('clojure.zip');\nrewrite_clj.zip.whitespace.whitespace_QMARK_ = (function rewrite_clj$zip$whitespace$whitespace_QMARK_(zloc){\nvar G__48587 = zloc;\nvar G__48587__$1 = (((G__48587 == null))?null:clojure.zip.node(G__48587));\nif((G__48587__$1 == null)){\nreturn null;\n} else {\nreturn (rewrite_clj.node.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(G__48587__$1) : rewrite_clj.node.whitespace_QMARK_.call(null,G__48587__$1));\n}\n});\nrewrite_clj.zip.whitespace.linebreak_QMARK_ = (function rewrite_clj$zip$whitespace$linebreak_QMARK_(zloc){\nvar G__48588 = zloc;\nvar G__48588__$1 = (((G__48588 == null))?null:clojure.zip.node(G__48588));\nif((G__48588__$1 == null)){\nreturn null;\n} else {\nreturn (rewrite_clj.node.linebreak_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.linebreak_QMARK_.cljs$core$IFn$_invoke$arity$1(G__48588__$1) : rewrite_clj.node.linebreak_QMARK_.call(null,G__48588__$1));\n}\n});\nrewrite_clj.zip.whitespace.comment_QMARK_ = (function rewrite_clj$zip$whitespace$comment_QMARK_(zloc){\nvar G__48591 = zloc;\nvar G__48591__$1 = (((G__48591 == null))?null:clojure.zip.node(G__48591));\nif((G__48591__$1 == null)){\nreturn null;\n} else {\nreturn (rewrite_clj.node.comment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.comment_QMARK_.cljs$core$IFn$_invoke$arity$1(G__48591__$1) : rewrite_clj.node.comment_QMARK_.call(null,G__48591__$1));\n}\n});\nrewrite_clj.zip.whitespace.whitespace_not_linebreak_QMARK_ = (function rewrite_clj$zip$whitespace$whitespace_not_linebreak_QMARK_(zloc){\nvar and__4120__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(zloc);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(zloc));\n} else {\nreturn and__4120__auto__;\n}\n});\nrewrite_clj.zip.whitespace.whitespace_or_comment_QMARK_ = (function rewrite_clj$zip$whitespace$whitespace_or_comment_QMARK_(zloc){\nvar G__48596 = zloc;\nvar G__48596__$1 = (((G__48596 == null))?null:clojure.zip.node(G__48596));\nif((G__48596__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.whitespace_or_comment_QMARK_(G__48596__$1);\n}\n});\n/**\n * Perform the given movement while the given predicate returns true.\n */\nrewrite_clj.zip.whitespace.skip = (function rewrite_clj$zip$whitespace$skip(f,p_QMARK_,zloc){\nreturn cljs.core.first(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(p_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(clojure.zip.end_QMARK_),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,cljs.core.iterate(f,zloc)))));\n});\n/**\n * Perform the given movement (default: `z/right`) until a non-whitespace/\n * non-comment node is encountered.\n */\nrewrite_clj.zip.whitespace.skip_whitespace = (function rewrite_clj$zip$whitespace$skip_whitespace(var_args){\nvar G__48599 = arguments.length;\nswitch (G__48599) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.right,zloc);\n});\n\nrewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2 = (function (f,zloc){\nreturn rewrite_clj.zip.whitespace.skip(f,rewrite_clj.zip.whitespace.whitespace_or_comment_QMARK_,zloc);\n});\n\nrewrite_clj.zip.whitespace.skip_whitespace.cljs$lang$maxFixedArity = 2;\n\n/**\n * Move left until a non-whitespace/non-comment node is encountered.\n */\nrewrite_clj.zip.whitespace.skip_whitespace_left = (function rewrite_clj$zip$whitespace$skip_whitespace_left(zloc){\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.left,zloc);\n});\n/**\n * Prepend a whitespace node representing the given number of spaces (default: 1).\n */\nrewrite_clj.zip.whitespace.prepend_space = (function rewrite_clj$zip$whitespace$prepend_space(var_args){\nvar G__48610 = arguments.length;\nswitch (G__48610) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_left(zloc,(rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.spaces.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.prepend_space.cljs$lang$maxFixedArity = 2;\n\n/**\n * Append a whitespace node representing the given number of spaces (default: 1).\n */\nrewrite_clj.zip.whitespace.append_space = (function rewrite_clj$zip$whitespace$append_space(var_args){\nvar G__48613 = arguments.length;\nswitch (G__48613) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_right(zloc,(rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.spaces.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.append_space.cljs$lang$maxFixedArity = 2;\n\n/**\n * Prepend a newlines node representing the given number of newlines (default: 1).\n */\nrewrite_clj.zip.whitespace.prepend_newline = (function rewrite_clj$zip$whitespace$prepend_newline(var_args){\nvar G__48617 = arguments.length;\nswitch (G__48617) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_left(zloc,(rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.newlines.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.prepend_newline.cljs$lang$maxFixedArity = 2;\n\n/**\n * Append a newline node representing the given number of newlines (default: 1).\n */\nrewrite_clj.zip.whitespace.append_newline = (function rewrite_clj$zip$whitespace$append_newline(var_args){\nvar G__48621 = arguments.length;\nswitch (G__48621) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_right(zloc,(rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.newlines.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.append_newline.cljs$lang$maxFixedArity = 2;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/whitespace.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.zip.whitespace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node","^M","~$node","^M","~$clojure.zip","^O","~$z","^O","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^H",["^W",["^S",["^M","~:as","^N"],["^O","^Y","~$z"]]]]],"~:flags",["^ ","^S",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^M","^O"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/whitespace.cljs"],"~:compiled-at",1570444245934,"~:resource-name","rewrite_clj/zip/whitespace.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.whitespace\n  (:require [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n;; ## Predicates\n\n(defn whitespace?\n  [zloc]\n  (some-> zloc z/node node/whitespace?))\n\n(defn linebreak?\n  [zloc]\n  (some-> zloc z/node node/linebreak?))\n\n(defn comment?\n  [zloc]\n  (some-> zloc z/node node/comment?))\n\n(defn whitespace-not-linebreak?\n  [zloc]\n  (and\n   (whitespace? zloc)\n   (not (linebreak? zloc))))\n\n(defn whitespace-or-comment?\n  [zloc]\n  (some-> zloc z/node node/whitespace-or-comment?))\n\n\n;; ## Movement\n\n(defn skip\n  \"Perform the given movement while the given predicate returns true.\"\n  [f p? zloc]\n  (->> (iterate f zloc)\n       (take-while identity)\n       (take-while (complement z/end?))\n       (drop-while p?)\n       (first)))\n\n(defn skip-whitespace\n  \"Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.\"\n  ([zloc] (skip-whitespace z/right zloc))\n  ([f zloc] (skip f whitespace-or-comment? zloc)))\n\n(defn skip-whitespace-left\n  \"Move left until a non-whitespace/non-comment node is encountered.\"\n  [zloc]\n  (skip-whitespace z/left zloc))\n\n;; ## Insertion\n\n(defn prepend-space\n  \"Prepend a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (prepend-space zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/spaces n))))\n\n(defn append-space\n  \"Append a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (append-space zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/spaces n))))\n\n(defn prepend-newline\n  \"Prepend a newlines node representing the given number of newlines (default: 1).\"\n  ([zloc] (prepend-newline zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/newlines n))))\n\n(defn append-newline\n  \"Append a newline node representing the given number of newlines (default: 1).\"\n  ([zloc] (append-newline zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/newlines n))))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.zip.whitespace/whitespace?","zloc","G__48587","clojure.zip/node","rewrite-clj.node/whitespace?","rewrite-clj.zip.whitespace/linebreak?","G__48588","rewrite-clj.node/linebreak?","rewrite-clj.zip.whitespace/comment?","G__48591","rewrite-clj.node/comment?","rewrite-clj.zip.whitespace/whitespace-not-linebreak?","and__4120__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace-or-comment?","G__48596","rewrite-clj.node/whitespace-or-comment?","rewrite-clj.zip.whitespace/skip","f","p?","cljs.core/iterate","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/complement","clojure.zip/end?","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/first","var_args","G__48599","rewrite-clj.zip.whitespace/skip-whitespace","js/Error","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/right","rewrite-clj.zip.whitespace/skip-whitespace-left","clojure.zip/left","G__48610","rewrite-clj.zip.whitespace/prepend-space","rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2","n","clojure.zip/insert-left","rewrite-clj.node/spaces","G__48613","rewrite-clj.zip.whitespace/append-space","rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2","clojure.zip/insert-right","G__48617","rewrite-clj.zip.whitespace/prepend-newline","rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/newlines","G__48621","rewrite-clj.zip.whitespace/append-newline","rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["^12","rewrite_clj/node/token.cljs"],[1568718528000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^Q","^P","~$rewrite-clj.node.protocols"]]],["^12","cljs/tools/reader/impl/utils.cljs"],[1543150543000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","~$clojure.string","~$goog.string"]]],["^12","goog/math/math.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","~$goog.array","~$goog.asserts"]]],["^12","goog/array/array.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^1G"]]],["^12","goog/debug/error.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","goog/dom/nodetype.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","cljs/tools/reader/impl/inspect.cljs"],[1543150543000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P"]]],["^12","cljs/tools/reader.cljs"],[1543150543000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1F","^1E","~$goog.string.StringBuffer"]]],["^12","rewrite_clj/node/forms.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","goog/object/object.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],"~:SHADOW-TIMESTAMP",[1568638379000,1568638518000],["^12","goog/math/long.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^1G","~$goog.reflect"]]],["^12","rewrite_clj/node/reader_macro.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C","~$rewrite-clj.node.whitespace"]]],["^12","goog/string/internal.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","goog/functions/functions.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","clojure/walk.cljs"],[1568638518000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P"]]],["^12","goog/structs/map.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^12","rewrite_clj/node/meta.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C","^1O"]]],["^12","rewrite_clj/node/stringz.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C","~$cljs.tools.reader","^1D"]]],["^12","rewrite_clj/node/comment.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","rewrite_clj/node/keyword.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","goog/asserts/asserts.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^12","goog/uri/uri.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^1F","^1G","^1E","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^12","rewrite_clj/node/protocols.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1D"]]],["^12","rewrite_clj/node/seq.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","rewrite_clj/node/uneval.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","goog/base.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",[]]],["^12","goog/structs/structs.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^1F","~$goog.object"]]],["^12","cljs/tools/reader/impl/errors.cljs"],[1543150543000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1H","^1D","~$cljs.tools.reader.impl.inspect"]]],["^12","rewrite_clj/node/whitespace.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","rewrite_clj/node/coercer.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1C","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^1O"]]],["^12","clojure/string.cljs"],[1568638518000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1E","^1L"]]],["^12","goog/string/string.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","~$goog.string.internal"]]],["^12","goog/reflect/reflect.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","rewrite_clj/node/fn.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C","~$clojure.walk"]]],["^12","rewrite_clj/node.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","~$rewrite-clj.node.coercer","^1C","^22","^29","^1O","^2:","^20","^21","^26","^24","^28","^23","^25","^27"]]],["^12","clojure/zip.cljs"],[1568638518000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P"]]],["^12","goog/string/stringbuffer.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","cljs/tools/reader/reader_types.cljs"],[1543150543000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1I","^1E","^1L"]]],["^12","goog/iter/iter.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^1F","^1G","~$goog.functions","~$goog.math"]]],["^12","rewrite_clj/node/quote.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1C"]]],["^12","cljs/tools/reader/impl/commons.cljs"],[1543150543000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^1K","^1H","^1I"]]],["^12","cljs/core.cljs"],[1568638518000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["~$goog.math.Long","~$goog.math.Integer","^1E","^1Z","^1F","~$goog.Uri","^1L"]]],["^12","goog/math/integer.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q"]]],["^12","goog/uri/utils.js"],[1568638513000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^1F","^1G","^1E"]]],["^12","rewrite_clj/zip/whitespace.cljs"],[1568718528000,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^Q","^P","^M","^O"]]]]],"~:clj-info",["^ ","jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1537794058000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1537794256000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1562843760000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",1,"^8",5,"^9",1,"^:",31],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","~$z","^O","^P","^P","^Q","^Q"],"^R",["^F",["^S"]],"~:shadow/js-access-global",["^F",["Error"]],"^T",null,"~:defs",["^ ","~$whitespace?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",7,"^8",7,"^9",7,"^:",18,"~:arglists",["^W",["~$quote",["^W",[["~$zloc"]]]]]],"^G","~$rewrite-clj.zip.whitespace/whitespace?","^6","rewrite_clj/zip/whitespace.cljs","^:",18,"~:method-params",["^W",[["^39"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^8",1,"~:variadic?",false,"^7",7,"~:ret-tag",["^F",["~$any","~$clj-nil"]],"^9",7,"~:max-fixed-arity",1,"~:fn-var",true,"^37",["^W",["^38",["^W",[["^39"]]]]]],"~$linebreak?",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",11,"^8",7,"^9",11,"^:",17,"^37",["^W",["^38",["^W",[["^39"]]]]]],"^G","~$rewrite-clj.zip.whitespace/linebreak?","^6","rewrite_clj/zip/whitespace.cljs","^:",17,"^3;",["^W",[["^39"]]],"^3<",null,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^7",11,"^3?",["^F",["^3@","^3A"]],"^9",11,"^3B",1,"^3C",true,"^37",["^W",["^38",["^W",[["^39"]]]]]],"~$skip",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",32,"^8",7,"^9",32,"^:",11,"^37",["^W",["^38",["^W",[["~$f","~$p?","^39"]]]]],"~:doc","Perform the given movement while the given predicate returns true."],"^G","~$rewrite-clj.zip.whitespace/skip","^6","rewrite_clj/zip/whitespace.cljs","^:",11,"^3;",["^W",[["~$f","^3G","^39"]]],"^3<",null,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^7",32,"^3?",["^F",["^3@","^3A"]],"^9",32,"^3B",3,"^3C",true,"^37",["^W",["^38",["^W",[["~$f","^3G","^39"]]]]],"^3H","Perform the given movement while the given predicate returns true."],"~$prepend-space",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",54,"^8",7,"^9",54,"^:",20,"^37",["^W",["^38",["^W",[["^39"],["^39","~$n"]]]]],"^3H","Prepend a whitespace node representing the given number of spaces (default: 1).","~:top-fn",["^ ","^3>",false,"~:fixed-arity",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]]],"^G","~$rewrite-clj.zip.whitespace/prepend-space","^6","rewrite_clj/zip/whitespace.cljs","^:",20,"^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]],"^3;",["^W",[["^39"],["^39","~$n"]]],"^3<",null,"^3L",2,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"~:methods",[["^ ","^3L",1,"^3>",false,"~:tag","^3@"],["^ ","^3L",2,"^3>",false,"^3O",["^F",["~$clj","~$cljs.core/MetaFn","^3A"]]]],"^7",54,"^9",54,"^3B",2,"^3C",true,"^37",["^W",[["^39"],["^39","~$n"]]],"^3H","Prepend a whitespace node representing the given number of spaces (default: 1)."],"~$append-newline",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",72,"^8",7,"^9",72,"^:",21,"^37",["^W",["^38",["^W",[["^39"],["^39","~$n"]]]]],"^3H","Append a newline node representing the given number of newlines (default: 1).","^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]]],"^G","~$rewrite-clj.zip.whitespace/append-newline","^6","rewrite_clj/zip/whitespace.cljs","^:",21,"^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]],"^3;",["^W",[["^39"],["^39","~$n"]]],"^3<",null,"^3L",2,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^3N",[["^ ","^3L",1,"^3>",false,"^3O","^3@"],["^ ","^3L",2,"^3>",false,"^3O",["^F",["^3P","^3Q","^3A"]]]],"^7",72,"^9",72,"^3B",2,"^3C",true,"^37",["^W",[["^39"],["^39","~$n"]]],"^3H","Append a newline node representing the given number of newlines (default: 1)."],"~$prepend-newline",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",66,"^8",7,"^9",66,"^:",22,"^37",["^W",["^38",["^W",[["^39"],["^39","~$n"]]]]],"^3H","Prepend a newlines node representing the given number of newlines (default: 1).","^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]]],"^G","~$rewrite-clj.zip.whitespace/prepend-newline","^6","rewrite_clj/zip/whitespace.cljs","^:",22,"^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]],"^3;",["^W",[["^39"],["^39","~$n"]]],"^3<",null,"^3L",2,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^3N",[["^ ","^3L",1,"^3>",false,"^3O","^3@"],["^ ","^3L",2,"^3>",false,"^3O",["^F",["^3P","^3Q","^3A"]]]],"^7",66,"^9",66,"^3B",2,"^3C",true,"^37",["^W",[["^39"],["^39","~$n"]]],"^3H","Prepend a newlines node representing the given number of newlines (default: 1)."],"~$append-space",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",60,"^8",7,"^9",60,"^:",19,"^37",["^W",["^38",["^W",[["^39"],["^39","~$n"]]]]],"^3H","Append a whitespace node representing the given number of spaces (default: 1).","^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]]],"^G","~$rewrite-clj.zip.whitespace/append-space","^6","rewrite_clj/zip/whitespace.cljs","^:",19,"^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["^39","~$n"]]],"^37",["^W",[["^39"],["^39","~$n"]]],"^3=",["^W",[null,null]]],"^3;",["^W",[["^39"],["^39","~$n"]]],"^3<",null,"^3L",2,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^3N",[["^ ","^3L",1,"^3>",false,"^3O","^3@"],["^ ","^3L",2,"^3>",false,"^3O",["^F",["^3P","^3Q","^3A"]]]],"^7",60,"^9",60,"^3B",2,"^3C",true,"^37",["^W",[["^39"],["^39","~$n"]]],"^3H","Append a whitespace node representing the given number of spaces (default: 1)."],"~$skip-whitespace-left",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",47,"^8",7,"^9",47,"^:",27,"^37",["^W",["^38",["^W",[["^39"]]]]],"^3H","Move left until a non-whitespace/non-comment node is encountered."],"^G","~$rewrite-clj.zip.whitespace/skip-whitespace-left","^6","rewrite_clj/zip/whitespace.cljs","^:",27,"^3;",["^W",[["^39"]]],"^3<",null,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^7",47,"^3?",["^F",["^3@","^3A"]],"^9",47,"^3B",1,"^3C",true,"^37",["^W",["^38",["^W",[["^39"]]]]],"^3H","Move left until a non-whitespace/non-comment node is encountered."],"~$skip-whitespace",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",41,"^8",7,"^9",41,"^:",22,"^37",["^W",["^38",["^W",[["^39"],["~$f","^39"]]]]],"^3H","Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.","^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["~$f","^39"]]],"^37",["^W",[["^39"],["~$f","^39"]]],"^3=",["^W",[null,null]]]],"^G","~$rewrite-clj.zip.whitespace/skip-whitespace","^6","rewrite_clj/zip/whitespace.cljs","^:",22,"^3K",["^ ","^3>",false,"^3L",2,"^3B",2,"^3;",["^W",[["^39"],["~$f","^39"]]],"^37",["^W",[["^39"],["~$f","^39"]]],"^3=",["^W",[null,null]]],"^3;",["^W",[["^39"],["~$f","^39"]]],"^3<",null,"^3L",2,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^3N",[["^ ","^3L",1,"^3>",false,"^3O","^3@"],["^ ","^3L",2,"^3>",false,"^3O",["^F",["^3@","^3A"]]]],"^7",41,"^9",41,"^3B",2,"^3C",true,"^37",["^W",[["^39"],["~$f","^39"]]],"^3H","Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered."],"~$comment?",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",15,"^8",7,"^9",15,"^:",15,"^37",["^W",["^38",["^W",[["^39"]]]]]],"^G","~$rewrite-clj.zip.whitespace/comment?","^6","rewrite_clj/zip/whitespace.cljs","^:",15,"^3;",["^W",[["^39"]]],"^3<",null,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^7",15,"^3?",["^F",["^3@","^3A"]],"^9",15,"^3B",1,"^3C",true,"^37",["^W",["^38",["^W",[["^39"]]]]]],"~$whitespace-not-linebreak?",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",19,"^8",7,"^9",19,"^:",32,"^37",["^W",["^38",["^W",[["^39"]]]]]],"^G","~$rewrite-clj.zip.whitespace/whitespace-not-linebreak?","^6","rewrite_clj/zip/whitespace.cljs","^:",32,"^3;",["^W",[["^39"]]],"^3<",null,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^7",19,"^3?",["^F",["~$boolean","^3@","^3A"]],"^9",19,"^3B",1,"^3C",true,"^37",["^W",["^38",["^W",[["^39"]]]]]],"~$whitespace-or-comment?",["^ ","^36",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",25,"^8",7,"^9",25,"^:",29,"^37",["^W",["^38",["^W",[["^39"]]]]]],"^G","~$rewrite-clj.zip.whitespace/whitespace-or-comment?","^6","rewrite_clj/zip/whitespace.cljs","^:",29,"^3;",["^W",[["^39"]]],"^3<",null,"^3=",["^W",[null,null]],"^8",1,"^3>",false,"^7",25,"^3?",["^F",["^3@","^3A"]],"^9",25,"^3B",1,"^3C",true,"^37",["^W",["^38",["^W",[["^39"]]]]]]],"^U",["^ ","^P","^P"],"^Z",["^ ","^S",["^F",[]]],"^[",["^ "],"^10",["^Q","^P","^M","^O"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1>",[["^49","~:static-fns"],true,["^49","~:elide-asserts"],false,["^49","~:optimize-constants"],null,["^49","^15"],null,["^49","~:external-config"],null,["^49","~:tooling-config"],null,["^49","~:emit-constants"],null,["^49","~:load-tests"],null,["^49","~:form-size-threshold"],null,["^49","~:infer-externs"],true,["^49","^17"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^49","~:fn-invoke-direct"],null,["^49","~:source-map"],"/dev/null"]]]