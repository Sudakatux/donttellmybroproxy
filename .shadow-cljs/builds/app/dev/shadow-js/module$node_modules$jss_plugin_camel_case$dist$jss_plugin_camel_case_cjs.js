["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js"],"~:js","shadow$provide.module$node_modules$jss_plugin_camel_case$dist$jss_plugin_camel_case_cjs=function(global,require,module,exports){function convertCase(style){var converted={},prop;for(prop in style){var key=0===prop.indexOf(\"--\")?prop:hyphenate(prop);converted[key]=style[prop]}style.fallbacks&&(Array.isArray(style.fallbacks)?converted.fallbacks=style.fallbacks.map(convertCase):converted.fallbacks=convertCase(style.fallbacks));return converted}Object.defineProperty(exports,\"__esModule\",{value:!0});var hyphenate=\nfunction(ex){return ex&&\"object\"===typeof ex&&\"default\"in ex?ex[\"default\"]:ex}(require(\"module$node_modules$hyphenate_style_name$index_cjs\"));exports.default=function(){return{onProcessStyle:function(style){if(Array.isArray(style)){for(var index=0;index<style.length;index++)style[index]=convertCase(style[index]);return style}return convertCase(style)},onChangeValue:function(value,prop,rule){if(0===prop.indexOf(\"--\"))return value;var hyphenatedProp=hyphenate(prop);if(prop===hyphenatedProp)return value;\nrule.prop(hyphenatedProp,value);return null}}}}","~:source","shadow$provide[\"module$node_modules$jss_plugin_camel_case$dist$jss_plugin_camel_case_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar hyphenate = _interopDefault(require('hyphenate-style-name'));\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\n\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    var key = prop.indexOf('--') === 0 ? prop : hyphenate(prop);\n    converted[key] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\n\n\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    if (prop.indexOf('--') === 0) {\n      return value;\n    }\n\n    var hyphenatedProp = hyphenate(prop); // There was no camel case in place\n\n    if (prop === hyphenatedProp) return value;\n    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.\n\n    return null;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle,\n    onChangeValue: onChangeValue\n  };\n}\n\nexports.default = camelCase;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$hyphenate_style_name$index_cjs"]],"~:properties",["^5",["__esModule","onProcessStyle","value","onChangeValue","fallbacks","default"]],"~:compiled-at",1570448038677,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$jss_plugin_camel_case$dist$jss_plugin_camel_case_cjs.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,yEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgBrIC,QAASA,YAAW,CAACC,KAAD,CAAQ,CAC1B,IAAIC,UAAY,EAAhB,CAESC,IAAT,KAASA,IAAT,GAAiBF,MAAjB,CAAwB,CACtB,IAAIG,IAA6B,CAAvB,GAAAD,IAAAE,QAAA,CAAa,IAAb,CAAA,CAA2BF,IAA3B,CAAkCG,SAAA,CAAUH,IAAV,CAC5CD,UAAA,CAAUE,GAAV,CAAA,CAAiBH,KAAA,CAAME,IAAN,CAFK,CAKpBF,KAAAM,UAAJ,GACMC,KAAAC,QAAA,CAAcR,KAAAM,UAAd,CAAJ,CAAoCL,SAAAK,UAApC,CAA0DN,KAAAM,UAAAG,IAAA,CAAoBV,WAApB,CAA1D,CAAgGE,SAAAK,UAAhG,CAAsHP,WAAA,CAAYC,KAAAM,UAAZ,CADxH,CAIA,OAAOL,UAZmB,CAb5BS,MAAAC,eAAA,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAAEc,MAAO,CAAA,CAAT,CAA7C,CAIA,KAAIP;AAFJQ,QAAyB,CAACC,EAAD,CAAK,CAAE,MAAQA,GAAD,EAAsB,QAAtB,GAAQ,MAAOA,GAAf,EAAmC,SAAnC,EAAgDA,GAAhD,CAAsDA,EAAA,CAAG,SAAH,CAAtD,CAAsEA,EAA/E,CAEd,CAAgBlB,OAAA,CAAQ,oDAAR,CAAhB,CA+DhBE,QAAAiB,QAAA,CAjCAC,QAAkB,EAAG,CA2BnB,MAAO,CACLC,eA3BFA,QAAuB,CAACjB,KAAD,CAAQ,CAC7B,GAAIO,KAAAC,QAAA,CAAcR,KAAd,CAAJ,CAA0B,CAExB,IAAK,IAAIkB,MAAQ,CAAjB,CAAoBA,KAApB,CAA4BlB,KAAAmB,OAA5B,CAA0CD,KAAA,EAA1C,CACElB,KAAA,CAAMkB,KAAN,CAAA,CAAenB,WAAA,CAAYC,KAAA,CAAMkB,KAAN,CAAZ,CAGjB,OAAOlB,MANiB,CAS1B,MAAOD,YAAA,CAAYC,KAAZ,CAVsB,CA0BxB,CAELoB,cAfFA,QAAsB,CAACR,KAAD,CAAQV,IAAR,CAAcmB,IAAd,CAAoB,CACxC,GAA2B,CAA3B,GAAInB,IAAAE,QAAA,CAAa,IAAb,CAAJ,CACE,MAAOQ,MAGT,KAAIU,eAAiBjB,SAAA,CAAUH,IAAV,CAErB,IAAIA,IAAJ,GAAaoB,cAAb,CAA6B,MAAOV,MACpCS;IAAAnB,KAAA,CAAUoB,cAAV,CAA0BV,KAA1B,CAEA,OAAO,KAViC,CAanC,CA3BY,CArCgH;\",\n\"sources\":[\"node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$jss_plugin_camel_case$dist$jss_plugin_camel_case_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\\n\\nvar hyphenate = _interopDefault(require('hyphenate-style-name'));\\n\\n/**\\n * Convert camel cased property names to dash separated.\\n *\\n * @param {Object} style\\n * @return {Object}\\n */\\n\\nfunction convertCase(style) {\\n  var converted = {};\\n\\n  for (var prop in style) {\\n    var key = prop.indexOf('--') === 0 ? prop : hyphenate(prop);\\n    converted[key] = style[prop];\\n  }\\n\\n  if (style.fallbacks) {\\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\\n  }\\n\\n  return converted;\\n}\\n/**\\n * Allow camel cased property names by converting them back to dasherized.\\n *\\n * @param {Rule} rule\\n */\\n\\n\\nfunction camelCase() {\\n  function onProcessStyle(style) {\\n    if (Array.isArray(style)) {\\n      // Handle rules like @font-face, which can have multiple styles in an array\\n      for (var index = 0; index < style.length; index++) {\\n        style[index] = convertCase(style[index]);\\n      }\\n\\n      return style;\\n    }\\n\\n    return convertCase(style);\\n  }\\n\\n  function onChangeValue(value, prop, rule) {\\n    if (prop.indexOf('--') === 0) {\\n      return value;\\n    }\\n\\n    var hyphenatedProp = hyphenate(prop); // There was no camel case in place\\n\\n    if (prop === hyphenatedProp) return value;\\n    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.\\n\\n    return null;\\n  }\\n\\n  return {\\n    onProcessStyle: onProcessStyle,\\n    onChangeValue: onChangeValue\\n  };\\n}\\n\\nexports.default = camelCase;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"convertCase\",\"style\",\"converted\",\"prop\",\"key\",\"indexOf\",\"hyphenate\",\"fallbacks\",\"Array\",\"isArray\",\"map\",\"Object\",\"defineProperty\",\"value\",\"_interopDefault\",\"ex\",\"default\",\"camelCase\",\"onProcessStyle\",\"index\",\"length\",\"onChangeValue\",\"rule\",\"hyphenatedProp\"]\n}\n"]