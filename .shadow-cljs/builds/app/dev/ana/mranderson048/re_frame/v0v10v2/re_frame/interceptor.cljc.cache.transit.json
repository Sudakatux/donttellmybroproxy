["^ ","~:output",["^ ","~:js","goog.provide('mranderson048.re_frame.v0v10v2.re_frame.interceptor');\ngoog.require('cljs.core');\ngoog.require('mranderson048.re_frame.v0v10v2.re_frame.loggers');\ngoog.require('mranderson048.re_frame.v0v10v2.re_frame.interop');\ngoog.require('clojure.set');\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.interceptor_QMARK_ = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v2.re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\n/**\n * Create an interceptor from named arguments\n */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.__GT_interceptor = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___46377 = arguments.length;\nvar i__4731__auto___46378 = (0);\nwhile(true){\nif((i__4731__auto___46378 < len__4730__auto___46377)){\nargs__4736__auto__.push((arguments[i__4731__auto___46378]));\n\nvar G__46380 = (i__4731__auto___46378 + (1));\ni__4731__auto___46378 = G__46380;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__46319){\nvar map__46320 = p__46319;\nvar map__46320__$1 = (((((!((map__46320 == null))))?(((((map__46320.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46320.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46320):map__46320);\nvar m = map__46320__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46320__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46320__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46320__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(mranderson048.re_frame.v0v10v2.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5718__auto___46385 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),mranderson048.re_frame.v0v10v2.re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5718__auto___46385){\nvar unknown_keys_46386 = temp__5718__auto___46385;\nmranderson048.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor \",m,\" has unknown keys:\",unknown_keys_46386], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4131__auto__ = id;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq46318){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq46318));\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$get_effect(var_args){\nvar G__46326 = arguments.length;\nswitch (G__46326) {\ncase 1:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3;\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.assoc_effect = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$get_coeffect(var_args){\nvar G__46334 = arguments.length;\nswitch (G__46334) {\ncase 1:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3;\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.assoc_coeffect = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.update_coeffect = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$update_coeffect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___46393 = arguments.length;\nvar i__4731__auto___46394 = (0);\nwhile(true){\nif((i__4731__auto___46394 < len__4730__auto___46393)){\nargs__4736__auto__.push((arguments[i__4731__auto___46394]));\n\nvar G__46396 = (i__4731__auto___46394 + (1));\ni__4731__auto___46394 = G__46396;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq46335){\nvar G__46336 = cljs.core.first(seq46335);\nvar seq46335__$1 = cljs.core.next(seq46335);\nvar G__46337 = cljs.core.first(seq46335__$1);\nvar seq46335__$2 = cljs.core.next(seq46335__$1);\nvar G__46338 = cljs.core.first(seq46335__$2);\nvar seq46335__$3 = cljs.core.next(seq46335__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46336,G__46337,G__46338,seq46335__$3);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.invoke_interceptor_fn = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5718__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar f = temp__5718__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.invoke_interceptors = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__46412 = mranderson048.re_frame.v0v10v2.re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__46412;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n *   Returns the updated `context`.\n * \n *   In an advanced case, this function could allow an interceptor to add new\n *   interceptors to the `:queue` of a context.\n */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.enqueue = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,mranderson048.re_frame.v0v10v2.re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.context = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$context(var_args){\nvar G__46358 = arguments.length;\nswitch (G__46358) {\ncase 2:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.enqueue(mranderson048.re_frame.v0v10v2.re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.assoc_coeffect(mranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n});\n\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$lang$maxFixedArity = 3;\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.change_direction = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$change_direction(context){\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nmranderson048.re_frame.v0v10v2.re_frame.interceptor.execute = (function mranderson048$re_frame$v0v10v2$re_frame$interceptor$execute(event_v,interceptors){\nreturn mranderson048.re_frame.v0v10v2.re_frame.interceptor.invoke_interceptors(mranderson048.re_frame.v0v10v2.re_frame.interceptor.change_direction(mranderson048.re_frame.v0v10v2.re_frame.interceptor.invoke_interceptors(mranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",56],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$mranderson048.re-frame.v0v10v2.re-frame.loggers","^M","~$mranderson048.re-frame.v0v10v2.re-frame.interop","^N","~$clojure.set","^O","~$set","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$console","^M","~$empty-queue","^N","~$debug-enabled?","^N"],"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^H",["^[",["^T",["^M","~:refer",["^V"]],["^N","^11",["^W","^X"]],["^O","~:as","^P"]]]]],"~:flags",["^ ","^T",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^M","^N","^O"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc"],"~:compiled-at",1570444244849,"~:resource-name","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns mranderson048.re-frame.v0v10v2.re-frame.interceptor\n  (:require\n    [mranderson048.re-frame.v0v10v2.re-frame.loggers :refer [console]]\n    [mranderson048.re-frame.v0v10v2.re-frame.interop :refer [empty-queue debug-enabled?]]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor \" m \" has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["mranderson048.re-frame.v0v10v2.re-frame.interceptor/mandatory-interceptor-keys","mranderson048.re-frame.v0v10v2.re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","mranderson048.re-frame.v0v10v2.re-frame.interceptor/->interceptor","p__46319","map__46320","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq46318","self__4718__auto__","cljs.core/seq","id","before","after","mranderson048.re-frame.v0v10v2.re-frame.interop/debug-enabled?","temp__5718__auto__","unknown-keys","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","mranderson048.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","G__46326","mranderson048.re-frame.v0v10v2.re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","not-found","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","mranderson048.re-frame.v0v10v2.re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","G__46334","mranderson048.re-frame.v0v10v2.re-frame.interceptor/get-coeffect","mranderson048.re-frame.v0v10v2.re-frame.interceptor/assoc-coeffect","mranderson048.re-frame.v0v10v2.re-frame.interceptor/update-coeffect","seq46335","G__46336","cljs.core/first","cljs.core/next","G__46337","G__46338","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","mranderson048.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","mranderson048.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","mranderson048.re-frame.v0v10v2.re-frame.interceptor/enqueue","interceptors","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","mranderson048.re-frame.v0v10v2.re-frame.interop/empty-queue","G__46358","mranderson048.re-frame.v0v10v2.re-frame.interceptor/context","event","db","mranderson048.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","mranderson048.re-frame.v0v10v2.re-frame.interceptor/change-direction","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mranderson048.re-frame.v0v10v2.re-frame.interceptor/execute","event-v"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1568638379000,1568638379000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^17","goog/dom/tagname.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","~$goog.dom.HtmlElement"]]],["^17","mranderson048/re_frame/v0v10v2/re_frame/loggers.cljc"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^O"]]],["^17","goog/math/math.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","~$goog.array","~$goog.asserts"]]],["^17","goog/labs/useragent/browser.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1M","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^17","mranderson048/reagent/v0v8v0/reagent/core.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^?","~$mranderson048.reagent.v0v8v0.reagent.impl.template","~$mranderson048.reagent.v0v8v0.reagent.impl.component","~$mranderson048.reagent.v0v8v0.reagent.impl.util","~$mranderson048.reagent.v0v8v0.reagent.impl.batching","~$mranderson048.reagent.v0v8v0.reagent.ratom","~$mranderson048.reagent.v0v8v0.reagent.debug","~$mranderson048.reagent.v0v8v0.reagent.interop","~$mranderson048.reagent.v0v8v0.reagent.dom"]]],["^17","goog/array/array.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1N"]]],["^1D","node_modules/prop-types/checkPropTypes.js"],[1568638379000,1568638379000,1549836454000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1D","node_modules/fbjs/lib/emptyFunction.js"],[1568638379000,1568638379000,1528785402000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^17","goog/debug/error.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^17","mranderson048/reagent/v0v8v0/reagent/dom.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^C","^1T","^1R","^1U","^1V","^1W","^1X"]]],["^17","mranderson048/reagent/v0v8v0/reagent/impl/component.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^A","^?","^1T","^1U","^1V","^1X","^1W"]]],["^1D","node_modules/fbjs/lib/emptyObject.js"],[1568638379000,1568638379000,1528785402000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^17","goog/dom/nodetype.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/cjs/scheduler.development.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^1D","node_modules/scheduler/cjs/scheduler.production.min.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^1D","node_modules/create-react-class/factory.js"],[1568638379000,1568638379000,1517346959000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1D","node_modules/react/index.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^17","shadow/js.js"],[1568638379000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^17","goog/object/object.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^1D","node_modules/react-dom/cjs/react-dom.production.min.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","^?","^1[","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1568638379000,1568638518000],["^1D","node_modules/react/cjs/react.development.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","^1[","~$module$node_modules$prop_types$checkPropTypes"]]],["^17","goog/math/long.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1N","~$goog.reflect"]]],["^17","mranderson048/reagent/v0v8v0/reagent/impl/batching.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^1W","^1X","^1T","~$clojure.string"]]],["^17","goog/string/internal.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^1D","node_modules/fbjs/lib/warning.js"],[1568638379000,1568638379000,1528785401000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^17","goog/functions/functions.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^17","clojure/walk.cljs"],[1568638518000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q"]]],["^17","goog/structs/map.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","node_modules/scheduler/index.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^17","goog/labs/useragent/engine.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1M","^1O","~$goog.string"]]],["^17","goog/asserts/asserts.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1M","^1N","^2?","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","mranderson048/reagent/v0v8v0/reagent/ratom.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^1T","^1W","^1U","^O"]]],["^17","mranderson048/reagent/v0v8v0/reagent/interop.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q"]]],["^1D","node_modules/object-assign/index.js"],[1568638379000,1568638379000,1484580833000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^17","goog/base.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1M","^1P"]]],["^17","clojure/string.cljs"],[1568638518000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^2?","~$goog.string.StringBuffer"]]],["^1D","node_modules/create-react-class/index.js"],[1568638379000,1568638379000,1517346956000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","^?","~$module$node_modules$create_react_class$factory"]]],["^17","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^M","^N","^O"]]],["^1D","node_modules/react/cjs/react.production.min.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","^1["]]],["^17","goog/debug/entrypointregistry.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1N"]]],["^17","goog/string/string.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1Q"]]],["^17","mranderson048/reagent/v0v8v0/reagent/impl/template.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^?","^29","~$clojure.walk","^1T","^1S","^1U","^1V","^1X","^1W"]]],["^17","mranderson048/reagent/v0v8v0/reagent/impl/util.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","^1W","^1X","^29"]]],["^17","goog/reflect/reflect.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^17","goog/labs/useragent/util.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1Q"]]],["^17","goog/string/stringbuffer.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^17","goog/iter/iter.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1M","^1N","~$goog.functions","~$goog.math"]]],["^17","goog/async/nexttick.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2J","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1568638379000,1568638379000,1549571078000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]],["^17","goog/dom/htmlelement.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^17","cljs/core.cljs"],[1568638518000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^2?","^1P","^1M","~$goog.Uri","^2G"]]],["^17","goog/math/integer.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/tracing.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^17","mranderson048/reagent/v0v8v0/reagent/debug.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q"]]],["^1D","node_modules/react-dom/cjs/react-dom.development.js"],[1568638379000,1568638379000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I","^?","^1[","^25","^27","~$module$node_modules$scheduler$tracing"]]],["^17","clojure/set.cljs"],[1568638518000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q"]]],["^17","goog/uri/utils.js"],[1568638513000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^1M","^1N","^2?"]]],["^17","mranderson048/re_frame/v0v10v2/re_frame/interop.cljs"],[1568718528000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^R","^Q","~$goog.async.nextTick","~$mranderson048.reagent.v0v8v0.reagent.core","^1V"]]],["^1D","node_modules/fbjs/lib/invariant.js"],[1568638379000,1568638379000,1528785400000,"^1E",["^ ","^1F",null,"^1G",["^F",[]],"^1H",["^1I"]]]]],"~:clj-info",["^ ","jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/reagent/v0v8v0/reagent/core.clj",1568718528000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/reagent/v0v8v0/reagent/debug.clj",1568718528000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1537794058000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/reagent/v0v8v0/reagent/interop.clj",1568718528000,"jar:file:/home/jimmy/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1537794256000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/reagent/v0v8v0/reagent/ratom.clj",1568718528000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",56],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^F",["^T"]],"~:shadow/js-access-global",["^F",["Error"]],"^U",["^ ","^V","^M","^W","^N","^X","^N"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",71,"^8",8,"^9",71,"^:",27,"~:private",true,"~:arglists",["^[",["~$quote",["^[",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^3O",true,"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptors","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",27,"~:method-params",["^[",[["^3R","^3S"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^8",1,"~:variadic?",false,"^7",71,"^9",71,"~:max-fixed-arity",2,"~:fn-var",true,"^3P",["^[",["^3Q",["^[",[["^3R","^3S"]]]]],"^3T","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",53,"^8",7,"^9",53,"^:",21,"^3P",["^[",["^3Q",["^[",[["^3R","~$key","~$value"]]]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/assoc-coeffect","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",21,"^3V",["^[",[["^3R","^41","^42"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",53,"~:ret-tag",["^F",["~$clj","~$any"]],"^9",53,"^3Z",3,"^3[",true,"^3P",["^[",["^3Q",["^[",[["^3R","^41","^42"]]]]]],"~$update-coeffect",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",57,"^8",7,"^9",57,"^:",22,"^3P",["^[",["^3Q",["^[",[["^3R","^41","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^3Y",true,"~:fixed-arity",3,"^3Z",3,"^3V",[["^[",["^3R","^41","~$f","^48"]]],"^3P",["^[",[["^3R","^41","~$f","~$&","^48"]]],"^3X",["^[",[null]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/update-coeffect","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",22,"^49",["^ ","^3Y",true,"^4:",3,"^3Z",3,"^3V",[["^[",["^3R","^41","~$f","^48"]]],"^3P",["^[",[["^3R","^41","~$f","~$&","^48"]]],"^3X",["^[",[null]]],"^3V",[["^[",["^3R","^41","~$f","^48"]]],"^3W",null,"^4:",3,"^3X",["^[",[null]],"^8",1,"^3Y",true,"~:methods",[["^ ","^4:",3,"^3Y",true,"~:tag","^46"]],"^7",57,"^44","^46","^9",57,"^3Z",3,"^3[",true,"^3P",["^[",[["^3R","^41","~$f","~$&","^48"]]]],"~$invoke-interceptor-fn",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",64,"^8",8,"^9",64,"^:",29,"^3O",true,"^3P",["^[",["^3Q",["^[",[["^3R","~$interceptor","^3S"]]]]]],"^3O",true,"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptor-fn","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",29,"^3V",["^[",[["^3R","^4?","^3S"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",64,"^44",["^F",[null,"^46"]],"^9",64,"^3Z",3,"^3[",true,"^3P",["^[",["^3Q",["^[",[["^3R","^4?","^3S"]]]]]],"~$get-effect",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^3P",["^[",["^3Q",["^[",[["^3R"],["^3R","^41"],["^3R","^41","~$not-found"]]]]],"^49",["^ ","^3Y",false,"^4:",3,"^3Z",3,"^3V",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3P",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3X",["^[",[null,null,null]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/get-effect","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",17,"^49",["^ ","^3Y",false,"^4:",3,"^3Z",3,"^3V",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3P",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3X",["^[",[null,null,null]]],"^3V",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3W",null,"^4:",3,"^3X",["^[",[null,null,null]],"^8",1,"^3Y",false,"^4<",[["^ ","^4:",1,"^3Y",false,"^4=","^46"],["^ ","^4:",2,"^3Y",false,"^4=",["^F",[null,"^46"]]],["^ ","^4:",3,"^3Y",false,"^4=","^46"]],"^7",30,"^9",30,"^3Z",3,"^3[",true,"^3P",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]]],"~$->interceptor",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",16,"^8",7,"^9",16,"^:",20,"^3P",["^[",["^3Q",["^[",[["~$&",["^ ","^12","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^3T","Create an interceptor from named arguments","^49",["^ ","^3Y",true,"^4:",0,"^3Z",0,"^3V",[["^[",[["^ ","^12","~$m","^4E",["^4F","^4G","^4H"]]]]],"^3P",["^[",[["~$&",["^ ","^12","~$m","^4E",["^4F","^4G","^4H"]]]]],"^3X",["^[",[null]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/->interceptor","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",20,"^49",["^ ","^3Y",true,"^4:",0,"^3Z",0,"^3V",[["^[",[["^ ","^12","~$m","^4E",["^4F","^4G","^4H"]]]]],"^3P",["^[",[["~$&",["^ ","^12","~$m","^4E",["^4F","^4G","^4H"]]]]],"^3X",["^[",[null]]],"^3V",[["^[",[["^ ","^12","~$m","^4E",["^4F","^4G","^4H"]]]]],"^3W",null,"^4:",0,"^3X",["^[",[null]],"^8",1,"^3Y",true,"^4<",[["^ ","^4:",0,"^3Y",true,"^4=","~$cljs.core/IMap"]],"^7",16,"^44","^46","^9",16,"^3Z",0,"^3[",true,"^3P",["^[",[["~$&",["^ ","^12","~$m","^4E",["^4F","^4G","^4H"]]]]],"^3T","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",45,"^8",7,"^9",45,"^:",19,"^3P",["^[",["^3Q",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]]]],"^49",["^ ","^3Y",false,"^4:",3,"^3Z",3,"^3V",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3P",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3X",["^[",[null,null,null]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/get-coeffect","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",19,"^49",["^ ","^3Y",false,"^4:",3,"^3Z",3,"^3V",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3P",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3X",["^[",[null,null,null]]],"^3V",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]],"^3W",null,"^4:",3,"^3X",["^[",[null,null,null]],"^8",1,"^3Y",false,"^4<",[["^ ","^4:",1,"^3Y",false,"^4=","^46"],["^ ","^4:",2,"^3Y",false,"^4=",["^F",[null,"^46"]]],["^ ","^4:",3,"^3Y",false,"^4=","^46"]],"^7",45,"^9",45,"^3Z",3,"^3[",true,"^3P",["^[",[["^3R"],["^3R","^41"],["^3R","^41","^4B"]]]],"~$execute",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",145,"^8",7,"^9",145,"^:",14,"^3P",["^[",["^3Q",["^[",[["~$event-v","~$interceptors"]]]]],"^3T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/execute","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",14,"^3V",["^[",[["^4N","^4O"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",145,"^44","^46","^9",145,"^3Z",2,"^3[",true,"^3P",["^[",["^3Q",["^[",[["^4N","^4O"]]]]],"^3T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",39,"^8",7,"^9",39,"^:",19,"^3P",["^[",["^3Q",["^[",[["^3R","^41","^42"]]]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/assoc-effect","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",19,"^3V",["^[",[["^3R","^41","^42"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",39,"^44",["^F",["^45","^46"]],"^9",39,"^3Z",3,"^3[",true,"^3P",["^[",["^3Q",["^[",[["^3R","^41","^42"]]]]]],"~$enqueue",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",108,"^8",7,"^9",108,"^:",14,"^3P",["^[",["^3Q",["^[",[["^3R","^4O"]]]]],"^3T","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/enqueue","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",14,"^3V",["^[",[["^3R","^4O"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",108,"^44",["^F",["^45","^46"]],"^9",108,"^3Z",2,"^3[",true,"^3P",["^[",["^3Q",["^[",[["^3R","^4O"]]]]],"^3T","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/mandatory-interceptor-keys","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",8,"^8",1,"^9",8,"^:",32,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",8,"^8",6,"^9",8,"^:",32],"^4=","~$cljs.core/ISet"],"~$interceptor?",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",10,"^8",7,"^9",10,"^:",19,"^3P",["^[",["^3Q",["^[",[["~$m"]]]]]],"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/interceptor?","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",19,"^3V",["^[",[["~$m"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",10,"^44","~$boolean","^9",10,"^3Z",1,"^3[",true,"^3P",["^[",["^3Q",["^[",[["~$m"]]]]]],"~$change-direction",["^ ","^3N",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^7",131,"^8",8,"^9",131,"^:",24,"^3O",true,"^3P",["^[",["^3Q",["^[",[["^3R"]]]]],"^3T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^3O",true,"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/change-direction","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",24,"^3V",["^[",[["^3R"]]],"^3W",null,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^7",131,"^44",["^F",["^45","^46"]],"^9",131,"^3Z",1,"^3[",true,"^3P",["^[",["^3Q",["^[",[["^3R"]]]]],"^3T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^3R",["^ ","^3N",null,"^5",["^ ","^3O",true,"^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",15,"^49",["^ ","^3Y",false,"^4:",3,"^3Z",3,"^3V",["^[",[["~$event","^4O"],["^51","^4O","~$db"]]],"^3P",["^[",[["^51","^4O"],["^51","^4O","^52"]]],"^3X",["^[",[null,null]]],"^8",8,"^7",120,"^9",120,"^3P",["^[",["^3Q",["^[",[["^51","^4O"],["^51","^4O","^52"]]]]],"^3T","Create a fresh context"],"^3O",true,"^G","~$mranderson048.re-frame.v0v10v2.re-frame.interceptor/context","^6","mranderson048/re_frame/v0v10v2/re_frame/interceptor.cljc","^:",15,"^49",["^ ","^3Y",false,"^4:",3,"^3Z",3,"^3V",["^[",[["^51","^4O"],["^51","^4O","^52"]]],"^3P",["^[",[["^51","^4O"],["^51","^4O","^52"]]],"^3X",["^[",[null,null]]],"^3V",["^[",[["^51","^4O"],["^51","^4O","^52"]]],"^3W",null,"^4:",3,"^3X",["^[",[null,null]],"^8",1,"^3Y",false,"^4<",[["^ ","^4:",2,"^3Y",false,"^4=",["^F",["^45","^46"]]],["^ ","^4:",3,"^3Y",false,"^4=",["^F",["^45","^46"]]]],"^7",120,"^9",120,"^3Z",3,"^3[",true,"^3P",["^[",[["^51","^4O"],["^51","^4O","^52"]]],"^3T","Create a fresh context"]],"^Y",["^ ","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^F",["~:unnamed","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:before"]],"~:order",["^59","^5:","^5?","^5=","^55","^5;","^5>","^57","^5<","^58","^56"]],"^13",["^ ","^T",["^F",[]]],"^14",["^ "],"^15",["^R","^Q","^M","^N","^O"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^5C","~:static-fns"],true,["^5C","~:elide-asserts"],false,["^5C","~:optimize-constants"],null,["^5C","^1:"],null,["^5C","~:external-config"],null,["^5C","~:tooling-config"],null,["^5C","~:emit-constants"],null,["^5C","~:load-tests"],null,["^5C","~:form-size-threshold"],null,["^5C","~:infer-externs"],true,["^5C","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5C","~:fn-invoke-direct"],null,["^5C","~:source-map"],"/dev/null"]]]