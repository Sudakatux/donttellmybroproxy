["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/deepmerge/dist/umd.js"],"~:js","shadow$provide.module$node_modules$deepmerge$dist$umd=function(global$jscomp$0,require,module,exports){(function(global,factory){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=factory():\"function\"===typeof define&&define.amd?define(factory):(global=global||self,global.deepmerge=factory())})(this,function(){function cloneUnlessOtherwiseSpecified(value,options){return!1!==options.clone&&options.isMergeableObject(value)?deepmerge(Array.isArray(value)?[]:{},value,options):value}\nfunction defaultArrayMerge(target,source,options){return target.concat(source).map(function(element){return cloneUnlessOtherwiseSpecified(element,options)})}function getEnumerableOwnPropertySymbols(target){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(target).filter(function(symbol){return target.propertyIsEnumerable(symbol)}):[]}function getKeys(target){return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))}function mergeObject(target,source,options){var destination=\n{};options.isMergeableObject(target)&&getKeys(target).forEach(function(key){destination[key]=cloneUnlessOtherwiseSpecified(target[key],options)});getKeys(source).forEach(function(key){if(options.isMergeableObject(source[key])&&target[key]){if(options.customMerge){var JSCompiler_inline_result=options.customMerge(key);JSCompiler_inline_result=\"function\"===typeof JSCompiler_inline_result?JSCompiler_inline_result:deepmerge}else JSCompiler_inline_result=deepmerge;destination[key]=JSCompiler_inline_result(target[key],\nsource[key],options)}else destination[key]=cloneUnlessOtherwiseSpecified(source[key],options)});return destination}function deepmerge(target,source,options){options=options||{};options.arrayMerge=options.arrayMerge||defaultArrayMerge;options.isMergeableObject=options.isMergeableObject||isMergeableObject;var sourceIsArray=Array.isArray(source),targetIsArray=Array.isArray(target);return sourceIsArray!==targetIsArray?cloneUnlessOtherwiseSpecified(source,options):sourceIsArray?options.arrayMerge(target,\nsource,options):mergeObject(target,source,options)}var isMergeableObject=function(value){var JSCompiler_temp;if(JSCompiler_temp=!!value&&\"object\"===typeof value)JSCompiler_temp=Object.prototype.toString.call(value),JSCompiler_temp=!(\"[object RegExp]\"===JSCompiler_temp||\"[object Date]\"===JSCompiler_temp||value.$$typeof===REACT_ELEMENT_TYPE);return JSCompiler_temp},REACT_ELEMENT_TYPE=\"function\"===typeof Symbol&&Symbol.for?Symbol.for(\"react.element\"):60103;deepmerge.all=function(array,options){if(!Array.isArray(array))throw Error(\"first argument should be an array\");\nreturn array.reduce(function(prev,next){return deepmerge(prev,next,options)},{})};return deepmerge})}","~:source","shadow$provide[\"module$node_modules$deepmerge$dist$umd\"] = function(global,require,module,exports) {\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global = global || self, global.deepmerge = factory());\n}(this, function () { 'use strict';\n\n\tvar isMergeableObject = function isMergeableObject(value) {\n\t\treturn isNonNullObject(value)\n\t\t\t&& !isSpecial(value)\n\t};\n\n\tfunction isNonNullObject(value) {\n\t\treturn !!value && typeof value === 'object'\n\t}\n\n\tfunction isSpecial(value) {\n\t\tvar stringValue = Object.prototype.toString.call(value);\n\n\t\treturn stringValue === '[object RegExp]'\n\t\t\t|| stringValue === '[object Date]'\n\t\t\t|| isReactElement(value)\n\t}\n\n\t// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\tvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\n\tvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\n\tfunction isReactElement(value) {\n\t\treturn value.$$typeof === REACT_ELEMENT_TYPE\n\t}\n\n\tfunction emptyTarget(val) {\n\t\treturn Array.isArray(val) ? [] : {}\n\t}\n\n\tfunction cloneUnlessOtherwiseSpecified(value, options) {\n\t\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t\t: value\n\t}\n\n\tfunction defaultArrayMerge(target, source, options) {\n\t\treturn target.concat(source).map(function(element) {\n\t\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t\t})\n\t}\n\n\tfunction getMergeFunction(key, options) {\n\t\tif (!options.customMerge) {\n\t\t\treturn deepmerge\n\t\t}\n\t\tvar customMerge = options.customMerge(key);\n\t\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n\t}\n\n\tfunction getEnumerableOwnPropertySymbols(target) {\n\t\treturn Object.getOwnPropertySymbols\n\t\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t\t})\n\t\t\t: []\n\t}\n\n\tfunction getKeys(target) {\n\t\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n\t}\n\n\tfunction mergeObject(target, source, options) {\n\t\tvar destination = {};\n\t\tif (options.isMergeableObject(target)) {\n\t\t\tgetKeys(target).forEach(function(key) {\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t\t});\n\t\t}\n\t\tgetKeys(source).forEach(function(key) {\n\t\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t\t} else {\n\t\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t\t}\n\t\t});\n\t\treturn destination\n\t}\n\n\tfunction deepmerge(target, source, options) {\n\t\toptions = options || {};\n\t\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\t\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\t\tvar sourceIsArray = Array.isArray(source);\n\t\tvar targetIsArray = Array.isArray(target);\n\t\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\t\tif (!sourceAndTargetTypesMatch) {\n\t\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t\t} else if (sourceIsArray) {\n\t\t\treturn options.arrayMerge(target, source, options)\n\t\t} else {\n\t\t\treturn mergeObject(target, source, options)\n\t\t}\n\t}\n\n\tdeepmerge.all = function deepmergeAll(array, options) {\n\t\tif (!Array.isArray(array)) {\n\t\t\tthrow new Error('first argument should be an array')\n\t\t}\n\n\t\treturn array.reduce(function(prev, next) {\n\t\t\treturn deepmerge(prev, next, options)\n\t\t}, {})\n\t};\n\n\tvar deepmerge_1 = deepmerge;\n\n\treturn deepmerge_1;\n\n}));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["deepmerge","arrayMerge","isMergeableObject","all"]],"~:compiled-at",1570448038650,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$deepmerge$dist$umd.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/deepmerge/dist/umd.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$deepmerge$dist$umd\\\"] = function(global,require,module,exports) {\\n(function (global, factory) {\\n\\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\\n\\ttypeof define === 'function' && define.amd ? define(factory) :\\n\\t(global = global || self, global.deepmerge = factory());\\n}(this, function () { 'use strict';\\n\\n\\tvar isMergeableObject = function isMergeableObject(value) {\\n\\t\\treturn isNonNullObject(value)\\n\\t\\t\\t&& !isSpecial(value)\\n\\t};\\n\\n\\tfunction isNonNullObject(value) {\\n\\t\\treturn !!value && typeof value === 'object'\\n\\t}\\n\\n\\tfunction isSpecial(value) {\\n\\t\\tvar stringValue = Object.prototype.toString.call(value);\\n\\n\\t\\treturn stringValue === '[object RegExp]'\\n\\t\\t\\t|| stringValue === '[object Date]'\\n\\t\\t\\t|| isReactElement(value)\\n\\t}\\n\\n\\t// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\\n\\tvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\\n\\tvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\\n\\n\\tfunction isReactElement(value) {\\n\\t\\treturn value.$$typeof === REACT_ELEMENT_TYPE\\n\\t}\\n\\n\\tfunction emptyTarget(val) {\\n\\t\\treturn Array.isArray(val) ? [] : {}\\n\\t}\\n\\n\\tfunction cloneUnlessOtherwiseSpecified(value, options) {\\n\\t\\treturn (options.clone !== false && options.isMergeableObject(value))\\n\\t\\t\\t? deepmerge(emptyTarget(value), value, options)\\n\\t\\t\\t: value\\n\\t}\\n\\n\\tfunction defaultArrayMerge(target, source, options) {\\n\\t\\treturn target.concat(source).map(function(element) {\\n\\t\\t\\treturn cloneUnlessOtherwiseSpecified(element, options)\\n\\t\\t})\\n\\t}\\n\\n\\tfunction getMergeFunction(key, options) {\\n\\t\\tif (!options.customMerge) {\\n\\t\\t\\treturn deepmerge\\n\\t\\t}\\n\\t\\tvar customMerge = options.customMerge(key);\\n\\t\\treturn typeof customMerge === 'function' ? customMerge : deepmerge\\n\\t}\\n\\n\\tfunction getEnumerableOwnPropertySymbols(target) {\\n\\t\\treturn Object.getOwnPropertySymbols\\n\\t\\t\\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\\n\\t\\t\\t\\treturn target.propertyIsEnumerable(symbol)\\n\\t\\t\\t})\\n\\t\\t\\t: []\\n\\t}\\n\\n\\tfunction getKeys(target) {\\n\\t\\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\\n\\t}\\n\\n\\tfunction mergeObject(target, source, options) {\\n\\t\\tvar destination = {};\\n\\t\\tif (options.isMergeableObject(target)) {\\n\\t\\t\\tgetKeys(target).forEach(function(key) {\\n\\t\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tgetKeys(source).forEach(function(key) {\\n\\t\\t\\tif (!options.isMergeableObject(source[key]) || !target[key]) {\\n\\t\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn destination\\n\\t}\\n\\n\\tfunction deepmerge(target, source, options) {\\n\\t\\toptions = options || {};\\n\\t\\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\\n\\t\\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\\n\\n\\t\\tvar sourceIsArray = Array.isArray(source);\\n\\t\\tvar targetIsArray = Array.isArray(target);\\n\\t\\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\\n\\n\\t\\tif (!sourceAndTargetTypesMatch) {\\n\\t\\t\\treturn cloneUnlessOtherwiseSpecified(source, options)\\n\\t\\t} else if (sourceIsArray) {\\n\\t\\t\\treturn options.arrayMerge(target, source, options)\\n\\t\\t} else {\\n\\t\\t\\treturn mergeObject(target, source, options)\\n\\t\\t}\\n\\t}\\n\\n\\tdeepmerge.all = function deepmergeAll(array, options) {\\n\\t\\tif (!Array.isArray(array)) {\\n\\t\\t\\tthrow new Error('first argument should be an array')\\n\\t\\t}\\n\\n\\t\\treturn array.reduce(function(prev, next) {\\n\\t\\t\\treturn deepmerge(prev, next, options)\\n\\t\\t}, {})\\n\\t};\\n\\n\\tvar deepmerge_1 = deepmerge;\\n\\n\\treturn deepmerge_1;\\n\\n}));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"self\",\"deepmerge\",\"cloneUnlessOtherwiseSpecified\",\"value\",\"options\",\"clone\",\"isMergeableObject\",\"Array\",\"isArray\",\"defaultArrayMerge\",\"target\",\"source\",\"concat\",\"map\",\"element\",\"getEnumerableOwnPropertySymbols\",\"Object\",\"getOwnPropertySymbols\",\"filter\",\"symbol\",\"propertyIsEnumerable\",\"getKeys\",\"keys\",\"mergeObject\",\"destination\",\"forEach\",\"key\",\"customMerge\",\"arrayMerge\",\"sourceIsArray\",\"targetIsArray\",\"stringValue\",\"prototype\",\"toString\",\"call\",\"$$typeof\",\"REACT_ELEMENT_TYPE\",\"Symbol\",\"for\",\"all\",\"deepmerge.all\",\"array\",\"Error\",\"reduce\",\"prev\",\"next\"]\n}\n"]