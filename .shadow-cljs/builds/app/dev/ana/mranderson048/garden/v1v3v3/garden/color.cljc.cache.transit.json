["^ ","~:output",["^ ","~:js","goog.provide('mranderson048.garden.v1v3v3.garden.color');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('mranderson048.garden.v1v3v3.garden.util');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nmranderson048.garden.v1v3v3.garden.color.CSSColor = (function (red,green,blue,hue,saturation,lightness,alpha,__meta,__extmap,__hash){\nthis.red = red;\nthis.green = green;\nthis.blue = blue;\nthis.hue = hue;\nthis.saturation = saturation;\nthis.lightness = lightness;\nthis.alpha = alpha;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716171;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k43489,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__43502 = k43489;\nvar G__43502__$1 = (((G__43502 instanceof cljs.core.Keyword))?G__43502.fqn:null);\nswitch (G__43502__$1) {\ncase \"red\":\nreturn self__.red;\n\nbreak;\ncase \"green\":\nreturn self__.green;\n\nbreak;\ncase \"blue\":\nreturn self__.blue;\n\nbreak;\ncase \"hue\":\nreturn self__.hue;\n\nbreak;\ncase \"saturation\":\nreturn self__.saturation;\n\nbreak;\ncase \"lightness\":\nreturn self__.lightness;\n\nbreak;\ncase \"alpha\":\nreturn self__.alpha;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k43489,else__4388__auto__);\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__43504){\nvar vec__43505 = p__43504;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43505,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43505,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#mranderson048.garden.v1v3v3.garden.color.CSSColor{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"red\",\"red\",-969428204),self__.red],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"green\",\"green\",-945526839),self__.green],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),self__.blue],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),self__.hue],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),self__.saturation],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),self__.lightness],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),self__.alpha],null))], null),self__.__extmap));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__43488){\nvar self__ = this;\nvar G__43488__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__43488__$1,7,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (7 + cljs.core.count(self__.__extmap));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__43519 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (-94015427 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__43519(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this43490,other43491){\nvar self__ = this;\nvar this43490__$1 = this;\nreturn (((!((other43491 == null)))) && ((this43490__$1.constructor === other43491.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.red,other43491.red)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.green,other43491.green)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.blue,other43491.blue)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.hue,other43491.hue)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.saturation,other43491.saturation)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.lightness,other43491.lightness)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.alpha,other43491.alpha)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43490__$1.__extmap,other43491.__extmap)));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__43488){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__43531 = cljs.core.keyword_identical_QMARK_;\nvar expr__43532 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__43534 = new cljs.core.Keyword(null,\"red\",\"red\",-969428204);\nvar G__43535 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43534,G__43535) : pred__43531.call(null,G__43534,G__43535));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(G__43488,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__43537 = new cljs.core.Keyword(null,\"green\",\"green\",-945526839);\nvar G__43538 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43537,G__43538) : pred__43531.call(null,G__43537,G__43538));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,G__43488,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__43539 = new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620);\nvar G__43540 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43539,G__43540) : pred__43531.call(null,G__43539,G__43540));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,G__43488,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__43541 = new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848);\nvar G__43542 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43541,G__43542) : pred__43531.call(null,G__43541,G__43542));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,G__43488,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__43543 = new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929);\nvar G__43544 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43543,G__43544) : pred__43531.call(null,G__43543,G__43544));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,G__43488,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__43546 = new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930);\nvar G__43547 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43546,G__43547) : pred__43531.call(null,G__43546,G__43547));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,G__43488,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__43548 = new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441);\nvar G__43549 = expr__43532;\nreturn (pred__43531.cljs$core$IFn$_invoke$arity$2 ? pred__43531.cljs$core$IFn$_invoke$arity$2(G__43548,G__43549) : pred__43531.call(null,G__43548,G__43549));\n})())){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,G__43488,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__43488),null));\n}\n}\n}\n}\n}\n}\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"red\",\"red\",-969428204),self__.red,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"green\",\"green\",-945526839),self__.green,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),self__.blue,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),self__.hue,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),self__.saturation,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),self__.lightness,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),self__.alpha,null))], null),self__.__extmap));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__43488){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,G__43488,self__.__extmap,self__.__hash));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.call = (function() {\nvar G__43816 = null;\nvar G__43816__1 = (function (self__){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn this$;\n});\nvar G__43816__2 = (function (self__,k){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(this$,k);\n});\nvar G__43816__3 = (function (self__,k,missing){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(this$,k,missing);\n});\nG__43816 = function(self__,k,missing){\nswitch(arguments.length){\ncase 1:\nreturn G__43816__1.call(this,self__);\ncase 2:\nreturn G__43816__2.call(this,self__,k);\ncase 3:\nreturn G__43816__3.call(this,self__,k,missing);\n}\nthrow(new Error('Invalid arity: ' + (arguments.length - 1)));\n};\nG__43816.cljs$core$IFn$_invoke$arity$1 = G__43816__1;\nG__43816.cljs$core$IFn$_invoke$arity$2 = G__43816__2;\nG__43816.cljs$core$IFn$_invoke$arity$3 = G__43816__3;\nreturn G__43816;\n})()\n;\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.apply = (function (self__,args43501){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args43501)));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$;\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){\nvar self__ = this;\nvar this$ = this;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(this$,k);\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,missing){\nvar self__ = this;\nvar this$ = this;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(this$,k,missing);\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"red\",\"red\",671103323,null),new cljs.core.Symbol(null,\"green\",\"green\",695004688,null),new cljs.core.Symbol(null,\"blue\",\"blue\",1018430907,null),new cljs.core.Symbol(null,\"hue\",\"hue\",1132452679,null),new cljs.core.Symbol(null,\"saturation\",\"saturation\",1626283598,null),new cljs.core.Symbol(null,\"lightness\",\"lightness\",-400370403,null),new cljs.core.Symbol(null,\"alpha\",\"alpha\",65549086,null)], null);\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.cljs$lang$type = true;\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"mranderson048.garden.v1v3v3.garden.color/CSSColor\",null,(1),null));\n});\n\nmranderson048.garden.v1v3v3.garden.color.CSSColor.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"mranderson048.garden.v1v3v3.garden.color/CSSColor\");\n});\n\n/**\n * Positional factory function for mranderson048.garden.v1v3v3.garden.color/CSSColor.\n */\nmranderson048.garden.v1v3v3.garden.color.__GT_CSSColor = (function mranderson048$garden$v1v3v3$garden$color$__GT_CSSColor(red,green,blue,hue,saturation,lightness,alpha){\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(red,green,blue,hue,saturation,lightness,alpha,null,null,null));\n});\n\n/**\n * Factory function for mranderson048.garden.v1v3v3.garden.color/CSSColor, taking a map of keywords to field values.\n */\nmranderson048.garden.v1v3v3.garden.color.map__GT_CSSColor = (function mranderson048$garden$v1v3v3$garden$color$map__GT_CSSColor(G__43497){\nvar extmap__4424__auto__ = (function (){var G__43553 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__43497,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441)], 0));\nif(cljs.core.record_QMARK_(G__43497)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__43553);\n} else {\nreturn G__43553;\n}\n})();\nreturn (new mranderson048.garden.v1v3v3.garden.color.CSSColor(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(G__43497),new cljs.core.Keyword(null,\"green\",\"green\",-945526839).cljs$core$IFn$_invoke$arity$1(G__43497),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620).cljs$core$IFn$_invoke$arity$1(G__43497),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848).cljs$core$IFn$_invoke$arity$1(G__43497),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929).cljs$core$IFn$_invoke$arity$1(G__43497),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930).cljs$core$IFn$_invoke$arity$1(G__43497),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441).cljs$core$IFn$_invoke$arity$1(G__43497),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\nmranderson048.garden.v1v3v3.garden.color.as_color = mranderson048.garden.v1v3v3.garden.color.map__GT_CSSColor;\n/**\n * Create an RGB color.\n */\nmranderson048.garden.v1v3v3.garden.color.rgb = (function mranderson048$garden$v1v3v3$garden$color$rgb(var_args){\nvar G__43560 = arguments.length;\nswitch (G__43560) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1 = (function (p__43566){\nvar vec__43567 = p__43566;\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43567,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43567,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43567,(2),null);\nvar vs = vec__43567;\nif(cljs.core.every_QMARK_(((function (vec__43567,r,g,b,vs){\nreturn (function (p1__43555_SHARP_){\nreturn mranderson048.garden.v1v3v3.garden.util.between_QMARK_(p1__43555_SHARP_,(0),(255));\n});})(vec__43567,r,g,b,vs))\n,vs)){\nvar G__43570 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),r,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),g,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),b], null);\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43570) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43570));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"RGB values must be between 0 and 255\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$3 = (function (r,g,b){\nreturn mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null));\n});\n\nmranderson048.garden.v1v3v3.garden.color.rgb.cljs$lang$maxFixedArity = 3;\n\n/**\n * Create an RGBA color.\n */\nmranderson048.garden.v1v3v3.garden.color.rgba = (function mranderson048$garden$v1v3v3$garden$color$rgba(var_args){\nvar G__43579 = arguments.length;\nswitch (G__43579) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 4:\nreturn mranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$1 = (function (p__43587){\nvar vec__43588 = p__43587;\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43588,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43588,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43588,(2),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43588,(3),null);\nif(mranderson048.garden.v1v3v3.garden.util.between_QMARK_(a,(0),(1))){\nvar G__43591 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null)),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),a);\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43591) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43591));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Alpha value must be between 0 and 1\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$4 = (function (r,g,b,a){\nreturn mranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b,a], null));\n});\n\nmranderson048.garden.v1v3v3.garden.color.rgba.cljs$lang$maxFixedArity = 4;\n\n/**\n * Create an HSL color.\n */\nmranderson048.garden.v1v3v3.garden.color.hsl = (function mranderson048$garden$v1v3v3$garden$color$hsl(var_args){\nvar G__43599 = arguments.length;\nswitch (G__43599) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1 = (function (p__43602){\nvar vec__43603 = p__43602;\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43603,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43603,(1),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43603,(2),null);\nvar vec__43608 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (vec__43603,h,s,l){\nreturn (function (p1__43596_SHARP_){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(p1__43596_SHARP_,new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222),p1__43596_SHARP_);\n});})(vec__43603,h,s,l))\n,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null));\nvar h__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43608,(0),null);\nvar s__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43608,(1),null);\nvar l__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43608,(2),null);\nif(((mranderson048.garden.v1v3v3.garden.util.between_QMARK_(s__$1,(0),(100))) && (mranderson048.garden.v1v3v3.garden.util.between_QMARK_(l__$1,(0),(100))))){\nvar G__43612 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),cljs.core.mod(h__$1,(360)),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),s__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),l__$1], null);\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43612) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43612));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Saturation and lightness must be between 0(%) and 100(%)\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$3 = (function (h,s,l){\nreturn mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null));\n});\n\nmranderson048.garden.v1v3v3.garden.color.hsl.cljs$lang$maxFixedArity = 3;\n\n/**\n * Create an HSLA color.\n */\nmranderson048.garden.v1v3v3.garden.color.hsla = (function mranderson048$garden$v1v3v3$garden$color$hsla(var_args){\nvar G__43615 = arguments.length;\nswitch (G__43615) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 4:\nreturn mranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$1 = (function (p__43617){\nvar vec__43618 = p__43617;\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43618,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43618,(1),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43618,(2),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43618,(3),null);\nif(mranderson048.garden.v1v3v3.garden.util.between_QMARK_(a,(0),(1))){\nvar G__43621 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null)),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),a);\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43621) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43621));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Alpha value must be between 0 and 1\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$4 = (function (h,s,l,a){\nreturn mranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l,a], null));\n});\n\nmranderson048.garden.v1v3v3.garden.color.hsla.cljs$lang$maxFixedArity = 4;\n\n/**\n * Return true if color is an RGB color.\n */\nmranderson048.garden.v1v3v3.garden.color.rgb_QMARK_ = (function mranderson048$garden$v1v3v3$garden$color$rgb_QMARK_(color){\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"green\",\"green\",-945526839),null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),null], null), null))));\n});\n/**\n * Return true if color is an HSL color.\n */\nmranderson048.garden.v1v3v3.garden.color.hsl_QMARK_ = (function mranderson048$garden$v1v3v3$garden$color$hsl_QMARK_(color){\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null], null), null))));\n});\n/**\n * Return true if x is a color.\n */\nmranderson048.garden.v1v3v3.garden.color.color_QMARK_ = (function mranderson048$garden$v1v3v3$garden$color$color_QMARK_(x){\nreturn ((mranderson048.garden.v1v3v3.garden.color.rgb_QMARK_(x)) || (mranderson048.garden.v1v3v3.garden.color.hsl_QMARK_(x)));\n});\n/**\n * Regular expression for matching a hexadecimal color.\n *           Matches hexadecimal colors of length three or six possibly\n *           lead by a \"#\". The color portion is captured.\n */\nmranderson048.garden.v1v3v3.garden.color.hex_re = /#?([\\da-fA-F]{6}|[\\da-fA-F]{3})/;\n/**\n * Returns true if x is a hexadecimal color.\n */\nmranderson048.garden.v1v3v3.garden.color.hex_QMARK_ = (function mranderson048$garden$v1v3v3$garden$color$hex_QMARK_(x){\nreturn cljs.core.boolean$((function (){var and__4120__auto__ = typeof x === 'string';\nif(and__4120__auto__){\nreturn cljs.core.re_matches(mranderson048.garden.v1v3v3.garden.color.hex_re,x);\n} else {\nreturn and__4120__auto__;\n}\n})());\n});\n/**\n * Convert a hexadecimal color to an RGB color map.\n */\nmranderson048.garden.v1v3v3.garden.color.hex__GT_rgb = (function mranderson048$garden$v1v3v3$garden$color$hex__GT_rgb(s){\nvar temp__5720__auto__ = cljs.core.re_matches(mranderson048.garden.v1v3v3.garden.color.hex_re,s);\nif(cljs.core.truth_(temp__5720__auto__)){\nvar vec__43630 = temp__5720__auto__;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43630,(0),null);\nvar hex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43630,(1),null);\nvar hex__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(hex)))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (vec__43630,_,hex,temp__5720__auto__){\nreturn (function (p1__43627_SHARP_){\nreturn (new cljs.core.List(null,p1__43627_SHARP_,(new cljs.core.List(null,p1__43627_SHARP_,null,(1),null)),(2),null));\n});})(vec__43630,_,hex,temp__5720__auto__))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([hex], 0))):hex);\nreturn mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (hex__$1,vec__43630,_,hex,temp__5720__auto__){\nreturn (function (p1__43628_SHARP_){\nreturn mranderson048.garden.v1v3v3.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic(p1__43628_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(16)], 0));\n});})(hex__$1,vec__43630,_,hex,temp__5720__auto__))\n,cljs.core.re_seq(/[\\da-fA-F]{2}/,hex__$1)));\n} else {\nreturn null;\n}\n});\n/**\n * Convert an RGB color map to a hexadecimal color.\n */\nmranderson048.garden.v1v3v3.garden.color.rgb__GT_hex = (function mranderson048$garden$v1v3v3$garden$color$rgb__GT_hex(p__43635){\nvar map__43636 = p__43635;\nvar map__43636__$1 = (((((!((map__43636 == null))))?(((((map__43636.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43636.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43636):map__43636);\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43636__$1,new cljs.core.Keyword(null,\"red\",\"red\",-969428204));\nvar g = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43636__$1,new cljs.core.Keyword(null,\"green\",\"green\",-945526839));\nvar b = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43636__$1,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620));\nvar hex_part = ((function (map__43636,map__43636__$1,r,g,b){\nreturn (function mranderson048$garden$v1v3v3$garden$color$rgb__GT_hex_$_hex_part(v){\nreturn clojure.string.replace(mranderson048.garden.v1v3v3.garden.util.format.cljs$core$IFn$_invoke$arity$variadic(\"%2s\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([mranderson048.garden.v1v3v3.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(16)], 0))], 0)),\" \",\"0\");\n});})(map__43636,map__43636__$1,r,g,b))\n;\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.str,\"#\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(hex_part,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null)));\n});\nmranderson048.garden.v1v3v3.garden.color.trim_one = (function mranderson048$garden$v1v3v3$garden$color$trim_one(x){\nif(((1) < x)){\nreturn (1);\n} else {\nreturn x;\n}\n});\n/**\n * Convert an RGB color map to an HSL color map.\n */\nmranderson048.garden.v1v3v3.garden.color.rgb__GT_hsl = (function mranderson048$garden$v1v3v3$garden$color$rgb__GT_hsl(p__43642){\nvar map__43643 = p__43642;\nvar map__43643__$1 = (((((!((map__43643 == null))))?(((((map__43643.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43643.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43643):map__43643);\nvar color = map__43643__$1;\nvar red = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43643__$1,new cljs.core.Keyword(null,\"red\",\"red\",-969428204));\nvar green = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43643__$1,new cljs.core.Keyword(null,\"green\",\"green\",-945526839));\nvar blue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43643__$1,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620));\nif(mranderson048.garden.v1v3v3.garden.color.hsl_QMARK_(color)){\nreturn color;\n} else {\nvar vec__43648 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (map__43643,map__43643__$1,color,red,green,blue){\nreturn (function (p1__43640_SHARP_){\nreturn (p1__43640_SHARP_ / (255));\n});})(map__43643,map__43643__$1,color,red,green,blue))\n,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [red,green,blue], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43648,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43648,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43648,(2),null);\nvar mx = (function (){var x__4219__auto__ = (function (){var x__4219__auto__ = r;\nvar y__4220__auto__ = g;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar y__4220__auto__ = b;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar mn = (function (){var x__4222__auto__ = (function (){var x__4222__auto__ = r;\nvar y__4223__auto__ = g;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4223__auto__ = b;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar d = (mx - mn);\nvar h = (function (){var pred__43652 = cljs.core._EQ_;\nvar expr__43653 = mx;\nif(cljs.core.truth_((pred__43652.cljs$core$IFn$_invoke$arity$2 ? pred__43652.cljs$core$IFn$_invoke$arity$2(mn,expr__43653) : pred__43652.call(null,mn,expr__43653)))){\nreturn (0);\n} else {\nif(cljs.core.truth_((pred__43652.cljs$core$IFn$_invoke$arity$2 ? pred__43652.cljs$core$IFn$_invoke$arity$2(r,expr__43653) : pred__43652.call(null,r,expr__43653)))){\nreturn ((60) * ((g - b) / d));\n} else {\nif(cljs.core.truth_((pred__43652.cljs$core$IFn$_invoke$arity$2 ? pred__43652.cljs$core$IFn$_invoke$arity$2(g,expr__43653) : pred__43652.call(null,g,expr__43653)))){\nreturn (((60) * ((b - r) / d)) + (120));\n} else {\nif(cljs.core.truth_((pred__43652.cljs$core$IFn$_invoke$arity$2 ? pred__43652.cljs$core$IFn$_invoke$arity$2(b,expr__43653) : pred__43652.call(null,b,expr__43653)))){\nreturn (((60) * ((r - g) / d)) + (240));\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__43653)].join('')));\n}\n}\n}\n}\n})();\nvar l = mranderson048.garden.v1v3v3.garden.color.trim_one(((mx + mn) / (2)));\nvar s = mranderson048.garden.v1v3v3.garden.color.trim_one(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(mx,mn))?(0):(((l < 0.5))?(d / ((2) * l)):(d / ((2) - ((2) * l)))\n)));\nreturn mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$3(cljs.core.mod(h,(360)),((100) * s),((100) * l));\n}\n});\n/**\n * Convert an HSL color map to an RGB color map.\n */\nmranderson048.garden.v1v3v3.garden.color.hsl__GT_rgb = (function mranderson048$garden$v1v3v3$garden$color$hsl__GT_rgb(p__43656){\nvar map__43657 = p__43656;\nvar map__43657__$1 = (((((!((map__43657 == null))))?(((((map__43657.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43657.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43657):map__43657);\nvar color = map__43657__$1;\nvar hue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43657__$1,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848));\nvar saturation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43657__$1,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929));\nvar lightness = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43657__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930));\nif(mranderson048.garden.v1v3v3.garden.color.rgb_QMARK_(color)){\nreturn color;\n} else {\nvar h = (hue / 360.0);\nvar s = (saturation / 100.0);\nvar l = (lightness / 100.0);\nvar m2 = (((l <= 0.5))?(l * (s + (1))):((l + s) - (l * s)));\nvar m1 = (((2) * l) - m2);\nvar vec__43659 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (h,s,l,m2,m1,map__43657,map__43657__$1,color,hue,saturation,lightness){\nreturn (function (p1__43655_SHARP_){\nvar G__43663 = (p1__43655_SHARP_ * (255));\nreturn Math.round(G__43663);\n});})(h,s,l,m2,m1,map__43657,map__43657__$1,color,hue,saturation,lightness))\n,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__43664 = m1;\nvar G__43665 = m2;\nvar G__43666 = (h + (1.0 / (3)));\nreturn (mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(G__43664,G__43665,G__43666) : mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.call(null,G__43664,G__43665,G__43666));\n})(),(mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(m1,m2,h) : mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.call(null,m1,m2,h)),(function (){var G__43667 = m1;\nvar G__43668 = m2;\nvar G__43669 = (h - (1.0 / (3)));\nreturn (mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(G__43667,G__43668,G__43669) : mranderson048.garden.v1v3v3.garden.color.hue__GT_rgb.call(null,G__43667,G__43668,G__43669));\n})()], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43659,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43659,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43659,(2),null);\nreturn mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null));\n}\n});\nmranderson048.garden.v1v3v3.garden.color.hue__GT_rgb = (function mranderson048$garden$v1v3v3$garden$color$hue__GT_rgb(m1,m2,h){\nvar h__$1 = (((h < (0)))?(h + (1)):(((h > (1)))?(h - (1)):h\n));\nif((((6) * h__$1) < (1))){\nreturn (m1 + (((m2 - m1) * h__$1) * (6)));\n} else {\nif((((2) * h__$1) < (1))){\nreturn m2;\n} else {\nif((((3) * h__$1) < (2))){\nreturn (m1 + (((m2 - m1) * ((2.0 / (3)) - h__$1)) * (6)));\n} else {\nreturn m1;\n\n}\n}\n}\n});\n/**\n * Convert an HSL color map to a hexadecimal string.\n */\nmranderson048.garden.v1v3v3.garden.color.hsl__GT_hex = (function mranderson048$garden$v1v3v3$garden$color$hsl__GT_hex(color){\nreturn mranderson048.garden.v1v3v3.garden.color.rgb__GT_hex(mranderson048.garden.v1v3v3.garden.color.hsl__GT_rgb(color));\n});\n/**\n * Convert a hexadecimal color to an HSL color.\n */\nmranderson048.garden.v1v3v3.garden.color.hex__GT_hsl = (function mranderson048$garden$v1v3v3$garden$color$hex__GT_hsl(color){\nreturn mranderson048.garden.v1v3v3.garden.color.rgb__GT_hsl(mranderson048.garden.v1v3v3.garden.color.hex__GT_rgb(color));\n});\nmranderson048.garden.v1v3v3.garden.color.percent_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(mranderson048.garden.v1v3v3.garden.util.clip,(0),(100));\nmranderson048.garden.v1v3v3.garden.color.rgb_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(mranderson048.garden.v1v3v3.garden.util.clip,(0),(255));\n/**\n * Convert a color to a hexadecimal string.\n */\nmranderson048.garden.v1v3v3.garden.color.as_hex = (function mranderson048$garden$v1v3v3$garden$color$as_hex(x){\nif(mranderson048.garden.v1v3v3.garden.color.hex_QMARK_(x)){\nreturn x;\n} else {\nif(mranderson048.garden.v1v3v3.garden.color.rgb_QMARK_(x)){\nreturn mranderson048.garden.v1v3v3.garden.color.rgb__GT_hex(x);\n} else {\nif(mranderson048.garden.v1v3v3.garden.color.hsl_QMARK_(x)){\nreturn mranderson048.garden.v1v3v3.garden.color.hsl__GT_hex(x);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n\n}\n}\n}\n});\n/**\n * Convert a color to a RGB.\n */\nmranderson048.garden.v1v3v3.garden.color.as_rgb = (function mranderson048$garden$v1v3v3$garden$color$as_rgb(x){\nif(mranderson048.garden.v1v3v3.garden.color.rgb_QMARK_(x)){\nreturn x;\n} else {\nif(mranderson048.garden.v1v3v3.garden.color.hsl_QMARK_(x)){\nreturn mranderson048.garden.v1v3v3.garden.color.hsl__GT_rgb(x);\n} else {\nif(mranderson048.garden.v1v3v3.garden.color.hex_QMARK_(x)){\nreturn mranderson048.garden.v1v3v3.garden.color.hex__GT_rgb(x);\n} else {\nif(typeof x === 'number'){\nreturn mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.rgb_clip,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,x,x], null)));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n\n}\n}\n}\n}\n});\n/**\n * Convert a color to a HSL.\n */\nmranderson048.garden.v1v3v3.garden.color.as_hsl = (function mranderson048$garden$v1v3v3$garden$color$as_hsl(x){\nif(mranderson048.garden.v1v3v3.garden.color.hsl_QMARK_(x)){\nreturn x;\n} else {\nif(mranderson048.garden.v1v3v3.garden.color.rgb_QMARK_(x)){\nreturn mranderson048.garden.v1v3v3.garden.color.rgb__GT_hsl(x);\n} else {\nif(mranderson048.garden.v1v3v3.garden.color.hex_QMARK_(x)){\nreturn mranderson048.garden.v1v3v3.garden.color.hex__GT_hsl(x);\n} else {\nif(typeof x === 'number'){\nreturn mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(mranderson048.garden.v1v3v3.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1(x) : mranderson048.garden.v1v3v3.garden.color.percent_clip.call(null,x)),(mranderson048.garden.v1v3v3.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1(x) : mranderson048.garden.v1v3v3.garden.color.percent_clip.call(null,x))], null));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n\n}\n}\n}\n}\n});\nmranderson048.garden.v1v3v3.garden.color.restrict_rgb = (function mranderson048$garden$v1v3v3$garden$color$restrict_rgb(m){\nreturn cljs.core.select_keys(m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620)], null));\n});\nmranderson048.garden.v1v3v3.garden.color.make_color_operation = (function mranderson048$garden$v1v3v3$garden$color$make_color_operation(op){\nreturn (function() {\nvar mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op = null;\nvar mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__1 = (function (a){\nreturn a;\n});\nvar mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__2 = (function (a,b){\nvar o = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.rgb_clip,op);\nvar a__$1 = mranderson048.garden.v1v3v3.garden.color.restrict_rgb(mranderson048.garden.v1v3v3.garden.color.as_rgb(a));\nvar b__$1 = mranderson048.garden.v1v3v3.garden.color.restrict_rgb(mranderson048.garden.v1v3v3.garden.color.as_rgb(b));\nvar G__43687 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(o,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a__$1,b__$1], 0));\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43687) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43687));\n});\nvar mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__3 = (function() { \nvar G__43895__delegate = function (a,b,more){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op,mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2(a,b),more);\n};\nvar G__43895 = function (a,b,var_args){\nvar more = null;\nif (arguments.length > 2) {\nvar G__43901__i = 0, G__43901__a = new Array(arguments.length -  2);\nwhile (G__43901__i < G__43901__a.length) {G__43901__a[G__43901__i] = arguments[G__43901__i + 2]; ++G__43901__i;}\n  more = new cljs.core.IndexedSeq(G__43901__a,0,null);\n} \nreturn G__43895__delegate.call(this,a,b,more);};\nG__43895.cljs$lang$maxFixedArity = 2;\nG__43895.cljs$lang$applyTo = (function (arglist__43903){\nvar a = cljs.core.first(arglist__43903);\narglist__43903 = cljs.core.next(arglist__43903);\nvar b = cljs.core.first(arglist__43903);\nvar more = cljs.core.rest(arglist__43903);\nreturn G__43895__delegate(a,b,more);\n});\nG__43895.cljs$core$IFn$_invoke$arity$variadic = G__43895__delegate;\nreturn G__43895;\n})()\n;\nmranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op = function(a,b,var_args){\nvar more = var_args;\nswitch(arguments.length){\ncase 1:\nreturn mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__1.call(this,a);\ncase 2:\nreturn mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__2.call(this,a,b);\ndefault:\nvar G__43910 = null;\nif (arguments.length > 2) {\nvar G__43911__i = 0, G__43911__a = new Array(arguments.length -  2);\nwhile (G__43911__i < G__43911__a.length) {G__43911__a[G__43911__i] = arguments[G__43911__i + 2]; ++G__43911__i;}\nG__43910 = new cljs.core.IndexedSeq(G__43911__a,0,null);\n}\nreturn mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic(a,b, G__43910);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nmranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$lang$maxFixedArity = 2;\nmranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$lang$applyTo = mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__3.cljs$lang$applyTo;\nmranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$1 = mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__1;\nmranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2 = mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__2;\nmranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$variadic = mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic;\nreturn mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op;\n})()\n});\n/**\n * Add the RGB components of two or more colors.\n */\nmranderson048.garden.v1v3v3.garden.color.color_PLUS_ = mranderson048.garden.v1v3v3.garden.color.make_color_operation(cljs.core._PLUS_);\n/**\n * Subtract the RGB components of two or more colors.\n */\nmranderson048.garden.v1v3v3.garden.color.color_ = mranderson048.garden.v1v3v3.garden.color.make_color_operation(cljs.core._);\n/**\n * Multiply the RGB components of two or more colors.\n */\nmranderson048.garden.v1v3v3.garden.color.color_STAR_ = mranderson048.garden.v1v3v3.garden.color.make_color_operation(cljs.core._STAR_);\n/**\n * Multiply the RGB components of two or more colors.\n */\nmranderson048.garden.v1v3v3.garden.color.color_div = mranderson048.garden.v1v3v3.garden.color.make_color_operation(cljs.core._SLASH_);\nmranderson048.garden.v1v3v3.garden.color.update_color = (function mranderson048$garden$v1v3v3$garden$color$update_color(color,field,f,v){\nvar v__$1 = (function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222).cljs$core$IFn$_invoke$arity$1(v);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn v;\n}\n})();\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(mranderson048.garden.v1v3v3.garden.color.as_hsl(color),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [field], null),f,v__$1);\n});\n/**\n * Rotates the hue value of a given color by amount.\n */\nmranderson048.garden.v1v3v3.garden.color.rotate_hue = (function mranderson048$garden$v1v3v3$garden$color$rotate_hue(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__43696_SHARP_){\nreturn cljs.core.mod(p1__43696_SHARP_,(360));\n}),cljs.core._PLUS_),amount);\n});\n/**\n * Increase the saturation value of a given color by amount.\n */\nmranderson048.garden.v1v3v3.garden.color.saturate = (function mranderson048$garden$v1v3v3$garden$color$saturate(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.percent_clip,cljs.core._PLUS_),amount);\n});\n/**\n * Decrease the saturation value of a given color by amount.\n */\nmranderson048.garden.v1v3v3.garden.color.desaturate = (function mranderson048$garden$v1v3v3$garden$color$desaturate(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.percent_clip,cljs.core._),amount);\n});\n/**\n * Increase the lightness value a given color by amount.\n */\nmranderson048.garden.v1v3v3.garden.color.lighten = (function mranderson048$garden$v1v3v3$garden$color$lighten(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.percent_clip,cljs.core._PLUS_),amount);\n});\n/**\n * Decrease the lightness value a given color by amount.\n */\nmranderson048.garden.v1v3v3.garden.color.darken = (function mranderson048$garden$v1v3v3$garden$color$darken(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.percent_clip,cljs.core._),amount);\n});\n/**\n * Return the inversion of a color.\n */\nmranderson048.garden.v1v3v3.garden.color.invert = (function mranderson048$garden$v1v3v3$garden$color$invert(color){\nvar G__43704 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(cljs.core._,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(255),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),(255),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),(255)], null),mranderson048.garden.v1v3v3.garden.color.as_rgb(color)], 0));\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43704) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43704));\n});\n/**\n * Mix two or more colors by averaging their RGB channels.\n */\nmranderson048.garden.v1v3v3.garden.color.mix = (function mranderson048$garden$v1v3v3$garden$color$mix(var_args){\nvar G__43711 = arguments.length;\nswitch (G__43711) {\ncase 2:\nreturn mranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___43922 = arguments.length;\nvar i__4731__auto___43923 = (0);\nwhile(true){\nif((i__4731__auto___43923 < len__4730__auto___43922)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___43923]));\n\nvar G__43924 = (i__4731__auto___43923 + (1));\ni__4731__auto___43923 = G__43924;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn mranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$2 = (function (color_1,color_2){\nvar c1 = mranderson048.garden.v1v3v3.garden.color.restrict_rgb(mranderson048.garden.v1v3v3.garden.color.as_rgb(color_1));\nvar c2 = mranderson048.garden.v1v3v3.garden.color.restrict_rgb(mranderson048.garden.v1v3v3.garden.color.as_rgb(color_2));\nvar G__43715 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(mranderson048.garden.v1v3v3.garden.util.average,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c1,c2], 0));\nreturn (mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__43715) : mranderson048.garden.v1v3v3.garden.color.as_color.call(null,G__43715));\n});\n\nmranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$variadic = (function (color_1,color_2,more){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(mranderson048.garden.v1v3v3.garden.color.mix,mranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$2(color_1,color_2),more);\n});\n\n/** @this {Function} */\nmranderson048.garden.v1v3v3.garden.color.mix.cljs$lang$applyTo = (function (seq43708){\nvar G__43709 = cljs.core.first(seq43708);\nvar seq43708__$1 = cljs.core.next(seq43708);\nvar G__43710 = cljs.core.first(seq43708__$1);\nvar seq43708__$2 = cljs.core.next(seq43708__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43709,G__43710,seq43708__$2);\n});\n\nmranderson048.garden.v1v3v3.garden.color.mix.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return the complement of a color.\n */\nmranderson048.garden.v1v3v3.garden.color.complement = (function mranderson048$garden$v1v3v3$garden$color$complement(color){\nreturn mranderson048.garden.v1v3v3.garden.color.rotate_hue(color,(180));\n});\nmranderson048.garden.v1v3v3.garden.color.hue_rotations = (function mranderson048$garden$v1v3v3$garden$color$hue_rotations(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___43925 = arguments.length;\nvar i__4731__auto___43926 = (0);\nwhile(true){\nif((i__4731__auto___43926 < len__4730__auto___43925)){\nargs__4736__auto__.push((arguments[i__4731__auto___43926]));\n\nvar G__43927 = (i__4731__auto___43926 + (1));\ni__4731__auto___43926 = G__43927;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn mranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nmranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic = (function (color,amounts){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.rotate_hue,color),amounts);\n});\n\nmranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nmranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$lang$applyTo = (function (seq43720){\nvar G__43721 = cljs.core.first(seq43720);\nvar seq43720__$1 = cljs.core.next(seq43720);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43721,seq43720__$1);\n});\n\n/**\n * Given a color return a triple of colors which are 0, 30, and 60\n *   degrees clockwise from it. If a second falsy argument is passed the\n *   returned values will be in a counter-clockwise direction.\n */\nmranderson048.garden.v1v3v3.garden.color.analogous = (function mranderson048$garden$v1v3v3$garden$color$analogous(var_args){\nvar G__43724 = arguments.length;\nswitch (G__43724) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn mranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$2(color,true);\n});\n\nmranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$2 = (function (color,clockwise_QMARK_){\nvar sign = (cljs.core.truth_(clockwise_QMARK_)?cljs.core._PLUS_:cljs.core._);\nreturn mranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),(sign.cljs$core$IFn$_invoke$arity$1 ? sign.cljs$core$IFn$_invoke$arity$1((30)) : sign.call(null,(30))),(sign.cljs$core$IFn$_invoke$arity$1 ? sign.cljs$core$IFn$_invoke$arity$1((60)) : sign.call(null,(60)))], 0));\n});\n\nmranderson048.garden.v1v3v3.garden.color.analogous.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a color return a triple of colors which are equidistance apart\n *   on the color wheel.\n */\nmranderson048.garden.v1v3v3.garden.color.triad = (function mranderson048$garden$v1v3v3$garden$color$triad(color){\nreturn mranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),(120),(240)], 0));\n});\n/**\n * Given a color return a triple of the color and the two colors on\n *   either side of it's complement.\n */\nmranderson048.garden.v1v3v3.garden.color.split_complement = (function mranderson048$garden$v1v3v3$garden$color$split_complement(var_args){\nvar G__43730 = arguments.length;\nswitch (G__43730) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn mranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2(color,(130));\n});\n\nmranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2 = (function (color,distance_from_complement){\nvar d = mranderson048.garden.v1v3v3.garden.util.clip((1),(179),distance_from_complement);\nreturn mranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),d,(- d)], 0));\n});\n\nmranderson048.garden.v1v3v3.garden.color.split_complement.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a color return a quadruple of four colors which are\n *   equidistance on the color wheel (ie. a pair of complements). An\n *   optional angle may be given for color of the second complement in the\n *   pair (this defaults to 90 when only color is passed).\n */\nmranderson048.garden.v1v3v3.garden.color.tetrad = (function mranderson048$garden$v1v3v3$garden$color$tetrad(var_args){\nvar G__43736 = arguments.length;\nswitch (G__43736) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn mranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2(color,(90));\n});\n\nmranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2 = (function (color,angle){\nvar a = mranderson048.garden.v1v3v3.garden.util.clip((1),(90),(function (){var G__43745 = new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222).cljs$core$IFn$_invoke$arity$2(angle,angle);\nreturn Math.abs(G__43745);\n})());\nvar color_2 = mranderson048.garden.v1v3v3.garden.color.rotate_hue(color,a);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [mranderson048.garden.v1v3v3.garden.color.rotate_hue(color,(0)),mranderson048.garden.v1v3v3.garden.color.complement(color),color_2,mranderson048.garden.v1v3v3.garden.color.complement(color_2)], null);\n});\n\nmranderson048.garden.v1v3v3.garden.color.tetrad.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a color return a list of shades from lightest to darkest by\n *   a step. By default the step is 10. White and black are excluded from\n *   the returned list.\n */\nmranderson048.garden.v1v3v3.garden.color.shades = (function mranderson048$garden$v1v3v3$garden$color$shades(var_args){\nvar G__43751 = arguments.length;\nswitch (G__43751) {\ncase 1:\nreturn mranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn mranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$2(color,(10));\n});\n\nmranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$2 = (function (color,step){\nvar c = mranderson048.garden.v1v3v3.garden.color.as_hsl(color);\nvar iter__4523__auto__ = ((function (c){\nreturn (function mranderson048$garden$v1v3v3$garden$color$iter__43753(s__43754){\nreturn (new cljs.core.LazySeq(null,((function (c){\nreturn (function (){\nvar s__43754__$1 = s__43754;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__43754__$1);\nif(temp__5720__auto__){\nvar s__43754__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__43754__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__43754__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__43756 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__43755 = (0);\nwhile(true){\nif((i__43755 < size__4522__auto__)){\nvar i = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__43755);\ncljs.core.chunk_append(b__43756,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),(i * step)));\n\nvar G__43958 = (i__43755 + (1));\ni__43755 = G__43958;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__43756),mranderson048$garden$v1v3v3$garden$color$iter__43753(cljs.core.chunk_rest(s__43754__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__43756),null);\n}\n} else {\nvar i = cljs.core.first(s__43754__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),(i * step)),mranderson048$garden$v1v3v3$garden$color$iter__43753(cljs.core.rest(s__43754__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(c))\n,null,null));\n});})(c))\n;\nreturn iter__4523__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(function (){var G__43768 = (100.0 / step);\nreturn Math.floor(G__43768);\n})()));\n});\n\nmranderson048.garden.v1v3v3.garden.color.shades.cljs$lang$maxFixedArity = 2;\n\nmranderson048.garden.v1v3v3.garden.color.color_name__GT_hex = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"aquamarine\",\"aquamarine\",263648544),new cljs.core.Keyword(null,\"lime\",\"lime\",-1796425088),new cljs.core.Keyword(null,\"deepskyblue\",\"deepskyblue\",-1691758944),new cljs.core.Keyword(null,\"darksalmon\",\"darksalmon\",-896495551),new cljs.core.Keyword(null,\"antiquewhite\",\"antiquewhite\",-1702201183),new cljs.core.Keyword(null,\"mediumturquoise\",\"mediumturquoise\",2112212449),new cljs.core.Keyword(null,\"slategrey\",\"slategrey\",-1531406687),new cljs.core.Keyword(null,\"slategray\",\"slategray\",-178672671),new cljs.core.Keyword(null,\"sienna\",\"sienna\",-1559699358),new cljs.core.Keyword(null,\"orange\",\"orange\",73816386),new cljs.core.Keyword(null,\"navajowhite\",\"navajowhite\",1463125346),new cljs.core.Keyword(null,\"lavenderblush\",\"lavenderblush\",667482818),new cljs.core.Keyword(null,\"firebrick\",\"firebrick\",-214380606),new cljs.core.Keyword(null,\"orangered\",\"orangered\",-1851964317),new cljs.core.Keyword(null,\"palevioletred\",\"palevioletred\",-1198100061),new cljs.core.Keyword(null,\"lawngreen\",\"lawngreen\",672111043),new cljs.core.Keyword(null,\"seashell\",\"seashell\",1208259012),new cljs.core.Keyword(null,\"lightpink\",\"lightpink\",808485476),new cljs.core.Keyword(null,\"darkolivegreen\",\"darkolivegreen\",-2098617596),new cljs.core.Keyword(null,\"aliceblue\",\"aliceblue\",-1185534108),new cljs.core.Keyword(null,\"gray\",\"gray\",1013268388),new cljs.core.Keyword(null,\"lightsteelblue\",\"lightsteelblue\",-209586236),new cljs.core.Keyword(null,\"whitesmoke\",\"whitesmoke\",1847137252),new cljs.core.Keyword(null,\"darkgoldenrod\",\"darkgoldenrod\",-1115778811),new cljs.core.Keyword(null,\"tan\",\"tan\",1273609893),new cljs.core.Keyword(null,\"bisque\",\"bisque\",-862836634),new cljs.core.Keyword(null,\"white\",\"white\",-483998618),new cljs.core.Keyword(null,\"lightgreen\",\"lightgreen\",-1542529498),new cljs.core.Keyword(null,\"darkseagreen\",\"darkseagreen\",410063911),new cljs.core.Keyword(null,\"crimson\",\"crimson\",-1192060857),new cljs.core.Keyword(null,\"darkslategray\",\"darkslategray\",348576839),new cljs.core.Keyword(null,\"mistyrose\",\"mistyrose\",-619815737),new cljs.core.Keyword(null,\"chocolate\",\"chocolate\",772404615),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"cadetblue\",\"cadetblue\",1126335112),new cljs.core.Keyword(null,\"navy\",\"navy\",1626342120),new cljs.core.Keyword(null,\"ghostwhite\",\"ghostwhite\",-1030428888),new cljs.core.Keyword(null,\"dimgrey\",\"dimgrey\",265814984),new cljs.core.Keyword(null,\"seagreen\",\"seagreen\",1345424905),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"mediumseagreen\",\"mediumseagreen\",2130779146),new cljs.core.Keyword(null,\"indigo\",\"indigo\",-280252374),new cljs.core.Keyword(null,\"olivedrab\",\"olivedrab\",477000042),new cljs.core.Keyword(null,\"cyan\",\"cyan\",1118839274),new cljs.core.Keyword(null,\"peachpuff\",\"peachpuff\",-1932127734),new cljs.core.Keyword(null,\"limegreen\",\"limegreen\",-121735638),new cljs.core.Keyword(null,\"mediumslateblue\",\"mediumslateblue\",-900241526),new cljs.core.Keyword(null,\"violet\",\"violet\",-1351470549),new cljs.core.Keyword(null,\"sandybrown\",\"sandybrown\",-417646484),new cljs.core.Keyword(null,\"yellowgreen\",\"yellowgreen\",844595052),new cljs.core.Keyword(null,\"mediumspringgreen\",\"mediumspringgreen\",-257604339),new cljs.core.Keyword(null,\"steelblue\",\"steelblue\",1620562381),new cljs.core.Keyword(null,\"rosybrown\",\"rosybrown\",1634897517),new cljs.core.Keyword(null,\"cornflowerblue\",\"cornflowerblue\",-1713148307),new cljs.core.Keyword(null,\"ivory\",\"ivory\",-1259182451),new cljs.core.Keyword(null,\"lightgoldenrodyellow\",\"lightgoldenrodyellow\",1849392877),new cljs.core.Keyword(null,\"salmon\",\"salmon\",-1093653298),new cljs.core.Keyword(null,\"darkcyan\",\"darkcyan\",-1999655442),new cljs.core.Keyword(null,\"peru\",\"peru\",1147074382),new cljs.core.Keyword(null,\"cornsilk\",\"cornsilk\",-1628976146),new cljs.core.Keyword(null,\"lightslategray\",\"lightslategray\",-1109503825),new cljs.core.Keyword(null,\"blueviolet\",\"blueviolet\",887936463),new cljs.core.Keyword(null,\"forestgreen\",\"forestgreen\",1609185807),new cljs.core.Keyword(null,\"lightseagreen\",\"lightseagreen\",-1503692817),new cljs.core.Keyword(null,\"gold\",\"gold\",-806826416),new cljs.core.Keyword(null,\"gainsboro\",\"gainsboro\",-218568880),new cljs.core.Keyword(null,\"darkorchid\",\"darkorchid\",-1255783536),new cljs.core.Keyword(null,\"burlywood\",\"burlywood\",1747294160),new cljs.core.Keyword(null,\"lightskyblue\",\"lightskyblue\",397352944),new cljs.core.Keyword(null,\"chartreuse\",\"chartreuse\",-1626529775),new cljs.core.Keyword(null,\"snow\",\"snow\",1266930033),new cljs.core.Keyword(null,\"moccasin\",\"moccasin\",885646097),new cljs.core.Keyword(null,\"honeydew\",\"honeydew\",297211825),new cljs.core.Keyword(null,\"aqua\",\"aqua\",745022417),new cljs.core.Keyword(null,\"darkred\",\"darkred\",1564487633),new cljs.core.Keyword(null,\"mediumorchid\",\"mediumorchid\",114416082),new cljs.core.Keyword(null,\"lightsalmon\",\"lightsalmon\",278000114),new cljs.core.Keyword(null,\"saddlebrown\",\"saddlebrown\",-1556765006),new cljs.core.Keyword(null,\"wheat\",\"wheat\",783520466),new cljs.core.Keyword(null,\"springgreen\",\"springgreen\",-1241565454),new cljs.core.Keyword(null,\"lightslategrey\",\"lightslategrey\",1806136178),new cljs.core.Keyword(null,\"darkblue\",\"darkblue\",511597490),new cljs.core.Keyword(null,\"powderblue\",\"powderblue\",65928114),new cljs.core.Keyword(null,\"turquoise\",\"turquoise\",876845491),new cljs.core.Keyword(null,\"blanchedalmond\",\"blanchedalmond\",-1397674477),new cljs.core.Keyword(null,\"papayawhip\",\"papayawhip\",-330388621),new cljs.core.Keyword(null,\"slateblue\",\"slateblue\",79472627),new cljs.core.Keyword(null,\"lightblue\",\"lightblue\",-1333083084),new cljs.core.Keyword(null,\"skyblue\",\"skyblue\",-2076132812),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"lightyellow\",\"lightyellow\",1576303380),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"palegreen\",\"palegreen\",1360601109),new cljs.core.Keyword(null,\"greenyellow\",\"greenyellow\",1380924629),new cljs.core.Keyword(null,\"khaki\",\"khaki\",-1417823979),new cljs.core.Keyword(null,\"maroon\",\"maroon\",-952210123),new cljs.core.Keyword(null,\"darkgrey\",\"darkgrey\",-860992715),new cljs.core.Keyword(null,\"midnightblue\",\"midnightblue\",688164725),new cljs.core.Keyword(null,\"floralwhite\",\"floralwhite\",1656937461),new cljs.core.Keyword(null,\"deeppink\",\"deeppink\",1577828374),new cljs.core.Keyword(null,\"paleturquoise\",\"paleturquoise\",1255621750),new cljs.core.Keyword(null,\"darkkhaki\",\"darkkhaki\",1599585526),new cljs.core.Keyword(null,\"azure\",\"azure\",1864287702),new cljs.core.Keyword(null,\"indianred\",\"indianred\",-1829312906),new cljs.core.Keyword(null,\"darkviolet\",\"darkviolet\",552615766),new cljs.core.Keyword(null,\"mediumpurple\",\"mediumpurple\",-1891751018),new cljs.core.Keyword(null,\"fuchsia\",\"fuchsia\",990719926),new cljs.core.Keyword(null,\"coral\",\"coral\",1082484055),new cljs.core.Keyword(null,\"mediumvioletred\",\"mediumvioletred\",-1767902505),new cljs.core.Keyword(null,\"lemonchiffon\",\"lemonchiffon\",1115945815),new cljs.core.Keyword(null,\"mediumblue\",\"mediumblue\",-1579936616),new cljs.core.Keyword(null,\"darkmagenta\",\"darkmagenta\",-1534491240),new cljs.core.Keyword(null,\"goldenrod\",\"goldenrod\",2000666104),new cljs.core.Keyword(null,\"darkorange\",\"darkorange\",1453996632),new cljs.core.Keyword(null,\"orchid\",\"orchid\",-1953715528),new cljs.core.Keyword(null,\"plum\",\"plum\",2022177528),new cljs.core.Keyword(null,\"pink\",\"pink\",393815864),new cljs.core.Keyword(null,\"teal\",\"teal\",1231496088),new cljs.core.Keyword(null,\"magenta\",\"magenta\",1687937081),new cljs.core.Keyword(null,\"lightgrey\",\"lightgrey\",-729897351),new cljs.core.Keyword(null,\"purple\",\"purple\",-876021126),new cljs.core.Keyword(null,\"dodgerblue\",\"dodgerblue\",-1678389350),new cljs.core.Keyword(null,\"darkturquoise\",\"darkturquoise\",-80977765),new cljs.core.Keyword(null,\"mintcream\",\"mintcream\",1437895067),new cljs.core.Keyword(null,\"hotpink\",\"hotpink\",1103829723),new cljs.core.Keyword(null,\"thistle\",\"thistle\",1477120028),new cljs.core.Keyword(null,\"royalblue\",\"royalblue\",978912636),new cljs.core.Keyword(null,\"darkgreen\",\"darkgreen\",2002841276),new cljs.core.Keyword(null,\"darkslateblue\",\"darkslateblue\",807219996),new cljs.core.Keyword(null,\"silver\",\"silver\",1044501468),new cljs.core.Keyword(null,\"darkgray\",\"darkgray\",-1229776547),new cljs.core.Keyword(null,\"oldlace\",\"oldlace\",-966038915),new cljs.core.Keyword(null,\"mediumaquamarine\",\"mediumaquamarine\",1476241181),new cljs.core.Keyword(null,\"brown\",\"brown\",1414854429),new cljs.core.Keyword(null,\"lightgray\",\"lightgray\",-845833379),new cljs.core.Keyword(null,\"olive\",\"olive\",-2080542466),new cljs.core.Keyword(null,\"lightcoral\",\"lightcoral\",-988903010),new cljs.core.Keyword(null,\"tomato\",\"tomato\",1086708254),new cljs.core.Keyword(null,\"lightcyan\",\"lightcyan\",-481418530),new cljs.core.Keyword(null,\"linen\",\"linen\",-1305214018),new cljs.core.Keyword(null,\"darkslategrey\",\"darkslategrey\",-114797409),new cljs.core.Keyword(null,\"lavender\",\"lavender\",-1469567809),new cljs.core.Keyword(null,\"dimgray\",\"dimgray\",-412750241),new cljs.core.Keyword(null,\"palegoldenrod\",\"palegoldenrod\",-2067529985),new cljs.core.Keyword(null,\"beige\",\"beige\",836725695),new cljs.core.Keyword(null,\"black\",\"black\",1294279647)],[\"#7fffd4\",\"#00ff00\",\"#00bfff\",\"#e9967a\",\"#faebd7\",\"#48d1cc\",\"#708090\",\"#708090\",\"#a0522d\",\"#ffa500\",\"#ffdead\",\"#fff0f5\",\"#b22222\",\"#ff4500\",\"#db7093\",\"#7cfc00\",\"#fff5ee\",\"#ffb6c1\",\"#556b2f\",\"#f0f8ff\",\"#808080\",\"#b0c4de\",\"#f5f5f5\",\"#b8860b\",\"#d2b48c\",\"#ffe4c4\",\"#ffffff\",\"#90ee90\",\"#8fbc8f\",\"#dc143c\",\"#2f4f4f\",\"#ffe4e1\",\"#d2691e\",\"#ffff00\",\"#5f9ea0\",\"#000080\",\"#f8f8ff\",\"#696969\",\"#2e8b57\",\"#008000\",\"#3cb371\",\"#4b0082\",\"#6b8e23\",\"#00ffff\",\"#ffdab9\",\"#32cd32\",\"#7b68ee\",\"#ee82ee\",\"#f4a460\",\"#9acd32\",\"#00fa9a\",\"#4682b4\",\"#bc8f8f\",\"#6495ed\",\"#fffff0\",\"#fafad2\",\"#fa8072\",\"#008b8b\",\"#cd853f\",\"#fff8dc\",\"#778899\",\"#8a2be2\",\"#228b22\",\"#20b2aa\",\"#ffd700\",\"#dcdcdc\",\"#9932cc\",\"#deb887\",\"#87cefa\",\"#7fff00\",\"#fffafa\",\"#ffe4b5\",\"#f0fff0\",\"#00ffff\",\"#8b0000\",\"#ba55d3\",\"#ffa07a\",\"#8b4513\",\"#f5deb3\",\"#00ff7f\",\"#778899\",\"#00008b\",\"#b0e0e6\",\"#40e0d0\",\"#ffebcd\",\"#ffefd5\",\"#6a5acd\",\"#add8e6\",\"#87ceeb\",\"#ff0000\",\"#ffffe0\",\"#0000ff\",\"#98fb98\",\"#adff2f\",\"#f0e68c\",\"#800000\",\"#a9a9a9\",\"#191970\",\"#fffaf0\",\"#ff1493\",\"#afeeee\",\"#bdb76b\",\"#f0ffff\",\"#cd5c5c\",\"#9400d3\",\"#9370db\",\"#ff00ff\",\"#ff7f50\",\"#c71585\",\"#fffacd\",\"#0000cd\",\"#8b008b\",\"#daa520\",\"#ff8c00\",\"#da70d6\",\"#dda0dd\",\"#ffc0cb\",\"#008080\",\"#ff00ff\",\"#d3d3d3\",\"#800080\",\"#1e90ff\",\"#00ced1\",\"#f5fffa\",\"#ff69b4\",\"#d8bfd8\",\"#4169e1\",\"#006400\",\"#483d8b\",\"#c0c0c0\",\"#a9a9a9\",\"#fdf5e6\",\"#66cdaa\",\"#a52a2a\",\"#d3d3d3\",\"#808000\",\"#f08080\",\"#ff6347\",\"#e0ffff\",\"#faf0e6\",\"#2f4f4f\",\"#e6e6fa\",\"#696969\",\"#eee8aa\",\"#f5f5dc\",\"#000000\"]);\n/**\n * Helper function for from-name. Returns an instance of ExceptionInfo\n *   for unknown colors.\n */\nmranderson048.garden.v1v3v3.garden.color.ex_info_color_name = (function mranderson048$garden$v1v3v3$garden$color$ex_info_color_name(n){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Unknown color \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n], 0)),\" see (:expected (ex-data e)) for a list of color names\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),n,new cljs.core.Keyword(null,\"expected\",\"expected\",1583670997),cljs.core.set(cljs.core.keys(mranderson048.garden.v1v3v3.garden.color.color_name__GT_hex))], null));\n});\n/**\n * Helper function for from-name.\n */\nmranderson048.garden.v1v3v3.garden.color.color_name__GT_color = cljs.core.memoize((function (k){\nreturn (mranderson048.garden.v1v3v3.garden.color.color_name__GT_hex.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.color_name__GT_hex.cljs$core$IFn$_invoke$arity$1(k) : mranderson048.garden.v1v3v3.garden.color.color_name__GT_hex.call(null,k));\n}));\n/**\n * Given a CSS color name n return an instance of CSSColor.\n */\nmranderson048.garden.v1v3v3.garden.color.from_name = (function mranderson048$garden$v1v3v3$garden$color$from_name(n){\nvar temp__5718__auto__ = (function (){var G__43781 = cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(n);\nreturn (mranderson048.garden.v1v3v3.garden.color.color_name__GT_color.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.color.color_name__GT_color.cljs$core$IFn$_invoke$arity$1(G__43781) : mranderson048.garden.v1v3v3.garden.color.color_name__GT_color.call(null,G__43781));\n})();\nif(cljs.core.truth_(temp__5718__auto__)){\nvar h = temp__5718__auto__;\nreturn h;\n} else {\nthrow mranderson048.garden.v1v3v3.garden.color.ex_info_color_name(n);\n}\n});\nmranderson048.garden.v1v3v3.garden.color.scale_color_value = (function mranderson048$garden$v1v3v3$garden$color$scale_color_value(value,amount){\nreturn (value + (((amount > (0)))?(((100) - value) * (amount / (100))):((value * amount) / (100))));\n});\n/**\n * Scale the lightness of a color by amount\n */\nmranderson048.garden.v1v3v3.garden.color.scale_lightness = (function mranderson048$garden$v1v3v3$garden$color$scale_lightness(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),mranderson048.garden.v1v3v3.garden.color.scale_color_value,amount);\n});\n/**\n * Scale the saturation of a color by amount\n */\nmranderson048.garden.v1v3v3.garden.color.scale_saturation = (function mranderson048$garden$v1v3v3$garden$color$scale_saturation(color,amount){\nreturn mranderson048.garden.v1v3v3.garden.color.update_color(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),mranderson048.garden.v1v3v3.garden.color.scale_color_value,amount);\n});\nmranderson048.garden.v1v3v3.garden.color.decrown_hex = (function mranderson048$garden$v1v3v3$garden$color$decrown_hex(hex){\nreturn clojure.string.replace(hex,/^#/,\"\");\n});\nmranderson048.garden.v1v3v3.garden.color.crown_hex = (function mranderson048$garden$v1v3v3$garden$color$crown_hex(hex){\nif(cljs.core.truth_(cljs.core.re_find(/^#/,hex))){\nreturn hex;\n} else {\nreturn [\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex)].join('');\n}\n});\n/**\n * (expand-hex \"#abc\") -> \"aabbcc\"\n * (expand-hex \"333333\") -> \"333333\"\n */\nmranderson048.garden.v1v3v3.garden.color.expand_hex = (function mranderson048$garden$v1v3v3$garden$color$expand_hex(hex){\nvar _ = mranderson048.garden.v1v3v3.garden.color.decrown_hex(hex);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(_))){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.vector,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([_,_], 0)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(_))){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((6),_));\n} else {\nreturn _;\n\n}\n}\n});\n/**\n * (hex->long \"#abc\") -> 11189196\n */\nmranderson048.garden.v1v3v3.garden.color.hex__GT_long = (function mranderson048$garden$v1v3v3$garden$color$hex__GT_long(hex){\nreturn parseInt(mranderson048.garden.v1v3v3.garden.color.expand_hex(clojure.string.replace(hex,/^#/,\"\")),(16));\n});\n/**\n * (long->hex 11189196) -> \"aabbcc\"\n */\nmranderson048.garden.v1v3v3.garden.color.long__GT_hex = (function mranderson048$garden$v1v3v3$garden$color$long__GT_hex(long$){\nreturn long$.toString((16));\n});\n/**\n * `weight` is number 0 to 100 (%).\n * At 0, it weighs color-1 at 100%.\n * At 100, it weighs color-2 at 100%.\n * Returns hex string.\n */\nmranderson048.garden.v1v3v3.garden.color.weighted_mix = (function mranderson048$garden$v1v3v3$garden$color$weighted_mix(color_1,color_2,weight){\nvar vec__43796 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__43795_SHARP_){\nreturn (p1__43795_SHARP_ / (100));\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((100) - weight),weight], null));\nvar weight_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43796,(0),null);\nvar weight_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43796,(1),null);\nvar vec__43799 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.color.hex__GT_long,mranderson048.garden.v1v3v3.garden.color.as_hex),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [color_1,color_2], null));\nvar long_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43799,(0),null);\nvar long_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43799,(1),null);\nreturn mranderson048.garden.v1v3v3.garden.color.crown_hex(mranderson048.garden.v1v3v3.garden.color.expand_hex(mranderson048.garden.v1v3v3.garden.color.long__GT_hex(((long_1 * weight_1) + (long_2 * weight_2)))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utilities for color creation, conversion, and manipulation.","~:file","mranderson048/garden/v1v3v3/garden/color.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",45],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$defcolor-operation","~$mranderson048.garden.v1v3v3.garden.color"],"~:excludes",["~#set",["~$complement"]],"~:macros",["^ "],"~:name","^G","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^Q","~$string","^Q","~$mranderson048.garden.v1v3v3.garden.util","^S","~$util","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^I",["~:require","~:require-macros"]],"~:uses",null,"^Y",["^ ","^G","^G","^U","^U"],"~:form",["~#list",["~$ns","^G","Utilities for color creation, conversion, and manipulation.",["^10",["~:refer-clojure","~:exclude",["^J"]]],["^10",["^Y",["^G","~:refer",["^F"]]]],["^10",["^X",["^Q","~:as","^R"],["^S","^15","^T"]]]]],"~:flags",["^ ","^Y",["^I",[]],"^X",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^Q","^S"]],"^N","^G","~:resource-id",["~:shadow.build.classpath/resource","mranderson048/garden/v1v3v3/garden/color.cljc"],"~:compiled-at",1570444243058,"~:resource-name","mranderson048/garden/v1v3v3/garden/color.cljc","~:warnings",[],"~:source","(ns mranderson048.garden.v1v3v3.garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [mranderson048.garden.v1v3v3.garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [mranderson048.garden.v1v3v3.garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors. \n\n;; Converts a color to a hexadecimal string (implementation below). \n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits. \n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(Math/round (* % 0xff))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-color [color field f v]\n  (let [v (or (:magnitude v) v)]\n    (update-in (as-hsl color) [field] f v)))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-color color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-color color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-color color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-color color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-color color :lightness (comp percent-clip -) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions. \n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (Math/abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (Math/floor (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  [value amount]\n  (+ value (if (pos? amount)\n             (* (- 100 value) (/ amount 100))\n             (/ (* value amount) 100))))\n\n(defn scale-lightness\n  \"Scale the lightness of a color by amount\"\n  [color amount]\n  (update-color color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scale the saturation of a color by amount\"\n  [color amount]\n  (update-color color :saturation scale-color-value amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4385__auto__","k__4386__auto__","this__4387__auto__","k43489","else__4388__auto__","G__43502","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__43504","vec__43505","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__43488","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__43519","coll__4382__auto__","cljs.core/hash-unordered-coll","this43490","other43491","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__43531","cljs.core/keyword-identical?","expr__43532","G__43534","G__43535","G__43537","G__43538","G__43539","G__43540","G__43541","G__43542","G__43543","G__43544","G__43546","G__43547","G__43548","G__43549","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","self__","args43501","cljs.core/aclone","mranderson048.garden.v1v3v3.garden.color/CSSColor","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__43497","extmap__4424__auto__","G__43553","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","mranderson048.garden.v1v3v3.garden.color/->CSSColor","mranderson048.garden.v1v3v3.garden.color/map->CSSColor","this","k","cljs.core.get.cljs$core$IFn$_invoke$arity$2","missing","mranderson048.garden.v1v3v3.garden.color/as-color","var_args","G__43560","mranderson048.garden.v1v3v3.garden.color/rgb","js/Error","p__43566","vec__43567","r","g","b","vs","p1__43555#","cljs.core/every?","mranderson048.garden.v1v3v3.garden.util/between?","G__43570","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1","G__43579","mranderson048.garden.v1v3v3.garden.color/rgba","p__43587","vec__43588","a","G__43591","mranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$1","G__43599","mranderson048.garden.v1v3v3.garden.color/hsl","p__43602","vec__43603","h","s","l","vec__43608","p1__43596#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__43612","cljs.core/mod","mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1","G__43615","mranderson048.garden.v1v3v3.garden.color/hsla","p__43617","vec__43618","G__43621","mranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$1","mranderson048.garden.v1v3v3.garden.color/rgb?","color","cljs.core/map?","mranderson048.garden.v1v3v3.garden.color/hsl?","mranderson048.garden.v1v3v3.garden.color/color?","x","mranderson048.garden.v1v3v3.garden.color/hex-re","mranderson048.garden.v1v3v3.garden.color/hex?","cljs.core/boolean","and__4120__auto__","cljs.core/re-matches","mranderson048.garden.v1v3v3.garden.color/hex->rgb","temp__5720__auto__","vec__43630","_","hex","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","p1__43627#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/re-seq","p1__43628#","mranderson048.garden.v1v3v3.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic","p__43635","map__43636","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","mranderson048.garden.v1v3v3.garden.color/rgb->hex","v","mranderson048.garden.v1v3v3.garden.util.format.cljs$core$IFn$_invoke$arity$variadic","mranderson048.garden.v1v3v3.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic","clojure.string/replace","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","hex-part","mranderson048.garden.v1v3v3.garden.color/trim-one","p__43642","map__43643","mranderson048.garden.v1v3v3.garden.color/rgb->hsl","vec__43648","p1__43640#","mx","x__4219__auto__","y__4220__auto__","mn","x__4222__auto__","y__4223__auto__","d","pred__43652","expr__43653","cljs.core/=","mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$3","p__43656","map__43657","mranderson048.garden.v1v3v3.garden.color/hsl->rgb","vec__43659","m2","m1","p1__43655#","G__43663","Math/round","G__43664","G__43665","G__43666","mranderson048.garden.v1v3v3.garden.color/hue->rgb","G__43667","G__43668","G__43669","mranderson048.garden.v1v3v3.garden.color/hsl->hex","mranderson048.garden.v1v3v3.garden.color/hex->hsl","mranderson048.garden.v1v3v3.garden.color/percent-clip","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","mranderson048.garden.v1v3v3.garden.util/clip","mranderson048.garden.v1v3v3.garden.color/rgb-clip","mranderson048.garden.v1v3v3.garden.color/as-hex","mranderson048.garden.v1v3v3.garden.color/as-rgb","mranderson048.garden.v1v3v3.garden.color/as-hsl","mranderson048.garden.v1v3v3.garden.color/restrict-rgb","m","cljs.core/select-keys","mranderson048.garden.v1v3v3.garden.color/make-color-operation","op","o","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__43687","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","more","color-op","mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color/color+","cljs.core/+","mranderson048.garden.v1v3v3.garden.color/color-","cljs.core/-","mranderson048.garden.v1v3v3.garden.color/color*","cljs.core/*","cljs.core//","mranderson048.garden.v1v3v3.garden.color/color-div","mranderson048.garden.v1v3v3.garden.color/update-color","field","f","or__4131__auto__","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","mranderson048.garden.v1v3v3.garden.color/rotate-hue","amount","p1__43696#","mranderson048.garden.v1v3v3.garden.color/saturate","mranderson048.garden.v1v3v3.garden.color/desaturate","mranderson048.garden.v1v3v3.garden.color/lighten","mranderson048.garden.v1v3v3.garden.color/darken","mranderson048.garden.v1v3v3.garden.color/invert","G__43704","G__43711","mranderson048.garden.v1v3v3.garden.color/mix","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq43708","G__43709","cljs.core/first","cljs.core/next","G__43710","self__4717__auto__","color-1","color-2","c1","c2","G__43715","mranderson048.garden.v1v3v3.garden.util/average","mranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color/complement","args__4736__auto__","argseq__4737__auto__","mranderson048.garden.v1v3v3.garden.color/hue-rotations","seq43720","G__43721","amounts","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__43724","mranderson048.garden.v1v3v3.garden.color/analogous","mranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$2","clockwise?","sign","mranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic","mranderson048.garden.v1v3v3.garden.color/triad","G__43730","mranderson048.garden.v1v3v3.garden.color/split-complement","mranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2","distance-from-complement","G__43736","mranderson048.garden.v1v3v3.garden.color/tetrad","mranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2","angle","G__43745","Math/abs","G__43751","mranderson048.garden.v1v3v3.garden.color/shades","mranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$2","step","c","iter__4523__auto__","s__43754","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__43756","cljs.core/chunk-buffer","i__43755","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43753","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__43768","Math/floor","mranderson048.garden.v1v3v3.garden.color/color-name->hex","mranderson048.garden.v1v3v3.garden.color/ex-info-color-name","n","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set","cljs.core/keys","mranderson048.garden.v1v3v3.garden.color/color-name->color","cljs.core/memoize","mranderson048.garden.v1v3v3.garden.color/from-name","temp__5718__auto__","G__43781","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","mranderson048.garden.v1v3v3.garden.color/scale-color-value","value","mranderson048.garden.v1v3v3.garden.color/scale-lightness","mranderson048.garden.v1v3v3.garden.color/scale-saturation","mranderson048.garden.v1v3v3.garden.color/decrown-hex","mranderson048.garden.v1v3v3.garden.color/crown-hex","cljs.core/re-find","mranderson048.garden.v1v3v3.garden.color/expand-hex","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/vector","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color/hex->long","js/parseInt","mranderson048.garden.v1v3v3.garden.color/long->hex","long","mranderson048.garden.v1v3v3.garden.color/weighted-mix","weight","vec__43796","vec__43799","weight-1","weight-2","p1__43795#","long-1","long-2","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^1:","goog/math/math.js"],[1568638513000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^1:","goog/string/stringformat.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","~$goog.string"]]],["^1:","goog/array/array.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^1L"]]],["^1:","goog/debug/error.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","goog/dom/nodetype.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","goog/object/object.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],"~:SHADOW-TIMESTAMP",[1568638379000,1568638518000],["^1:","goog/math/long.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^1L","~$goog.reflect"]]],["^1:","goog/string/internal.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","mranderson048/garden/v1v3v3/garden/types.cljc"],[1568718528000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^U"]]],["^1:","goog/functions/functions.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","goog/structs/map.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1:","mranderson048/garden/v1v3v3/garden/color.cljc"],[1568718528000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^U","^Q","^S"]]],["^1:","goog/asserts/asserts.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1:","goog/uri/uri.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^1K","^1L","^1M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1:","goog/base.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",[]]],["^1:","goog/structs/structs.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^1K","~$goog.object"]]],["^1:","clojure/string.cljs"],[1568638518000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^U","^1M","~$goog.string.StringBuffer"]]],["^1:","goog/string/string.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","~$goog.string.internal"]]],["^1:","goog/reflect/reflect.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","goog/string/stringbuffer.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","goog/iter/iter.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^1K","^1L","~$goog.functions","~$goog.math"]]],["^1:","cljs/core.cljs"],[1568638518000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["~$goog.math.Long","~$goog.math.Integer","^1M","^1Y","^1K","~$goog.Uri","^1Z"]]],["^1:","goog/math/integer.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V"]]],["^1:","mranderson048/garden/v1v3v3/garden/util.cljc"],[1568718528000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^U","^Q","~$mranderson048.garden.v1v3v3.garden.types","^1M","~$goog.string.format"]]],["^1:","goog/uri/utils.js"],[1568638513000,"^1G",["^ ","^1H",null,"^1I",["^I",[]],"^1J",["^V","^1K","^1L","^1M"]]]]],"~:clj-info",["^ ","jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/garden/v1v3v3/garden/types.cljc",1568718528000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/garden/v1v3v3/garden/color.cljc",1568718528000,"jar:file:/home/jimmy/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1537794058000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/day8/re-frame/re-frame-10x/0.3.3-react16/re-frame-10x-0.3.3-react16.jar!/mranderson048/garden/v1v3v3/garden/util.cljc",1568718528000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1537794256000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1562843760000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utilities for color creation, conversion, and manipulation.","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",1,"^9",5,"^:",1,"^;",45],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G"],"^H",["^I",["^J"]],"^K",["^ "],"^L","^G","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^I",["^X","^Y"]],"~:shadow/js-access-global",["^I",["Error","parseInt"]],"^Z",null,"~:defs",["^ ","~$update-color",["^ ","~:protocol-inline",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",280,"^9",8,"^:",280,"^;",20,"~:private",true,"~:arglists",["^10",["~$quote",["^10",[["~$color","~$field","~$f","~$v"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/update-color","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"~:method-params",["^10",[["^30","^31","~$f","~$v"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^9",1,"~:variadic?",false,"^8",280,"~:ret-tag",["^I",["~$clj","~$any"]],"^:",280,"~:max-fixed-arity",4,"~:fn-var",true,"^2Z",["^10",["^2[",["^10",[["^30","^31","~$f","~$v"]]]]]],"~$color+",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",263,"^9",3,"^:",263,"^;",9,"^6","Add the RGB components of two or more colors.","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","~$more"]]]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/color+","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",9,"^9",1,"^8",260,"^:",263,"~:tag","~$function","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]],"^6","Add the RGB components of two or more colors."],"~$mix",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",314,"^9",7,"^:",314,"^;",10,"^2Z",["^10",["^2[",["^10",[["~$color-1","~$color-2"],["^3B","^3C","~$&","^3="]]]]],"^6","Mix two or more colors by averaging their RGB channels.","~:top-fn",["^ ","^36",true,"~:fixed-arity",2,"^3:",2,"^33",["^10",[["^3B","^3C"]]],"^2Z",["^10",[["^3B","^3C"],["^3B","^3C","~$&","^3="]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/mix","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",10,"^3D",["^ ","^36",true,"^3E",2,"^3:",2,"^33",["^10",[["^3B","^3C"]]],"^2Z",["^10",[["^3B","^3C"],["^3B","^3C","~$&","^3="]]],"^35",["^10",[null,null]]],"^33",["^10",[["^3B","^3C"]]],"^34",null,"^3E",2,"^35",["^10",[null,null]],"^9",1,"^36",true,"~:methods",[["^ ","^3E",2,"^36",false,"^3?","^39"],["^ ","^3E",2,"^36",true,"^3?",["^I",[null,"^39"]]]],"^8",314,"^:",314,"^3:",2,"^3;",true,"^2Z",["^10",[["^3B","^3C"],["^3B","^3C","~$&","^3="]]],"^6","Mix two or more colors by averaging their RGB channels."],"~$color-name->color",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",548,"^9",3,"^:",548,"^;",20,"^2Y",true,"^6","Helper function for from-name."],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/color-name->color","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"^9",1,"^8",545,"^:",548,"^3?","^3@","^6","Helper function for from-name."],"~$expand-hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",582,"^9",8,"^:",582,"^;",18,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$hex"]]]]],"^6","(expand-hex \"#abc\") -> \"aabbcc\"\n   (expand-hex \"333333\") -> \"333333\""],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/expand-hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",18,"^33",["^10",[["^3K"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",582,"^37","^39","^:",582,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]],"^6","(expand-hex \"#abc\") -> \"aabbcc\"\n   (expand-hex \"333333\") -> \"333333\""],"~$invert",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",309,"^9",7,"^:",309,"^;",13,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return the inversion of a color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/invert","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",309,"^37","^39","^:",309,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return the inversion of a color."],"~$rotate-hue",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",284,"^9",7,"^:",284,"^;",17,"^2Z",["^10",["^2[",["^10",[["^30","~$amount"]]]]],"^6","Rotates the hue value of a given color by amount."],"^L","~$mranderson048.garden.v1v3v3.garden.color/rotate-hue","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",17,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",284,"^37",["^I",["^38","^39"]],"^:",284,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Rotates the hue value of a given color by amount."],"~$color*",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",273,"^9",3,"^:",273,"^;",9,"^6","Multiply the RGB components of two or more colors.","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/color*","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",9,"^9",1,"^8",270,"^:",273,"^3?","^3@","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]],"^6","Multiply the RGB components of two or more colors."],"~$hsl->hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",195,"^9",7,"^:",195,"^;",15,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Convert an HSL color map to a hexadecimal string."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hsl->hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",195,"^37","^39","^:",195,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Convert an HSL color map to a hexadecimal string."],"~$rgb->hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",129,"^9",7,"^:",129,"^;",15,"^2Z",["^10",["^2[",["^10",[[["^ ","~$r","~:red","~$g","~:green","~$b","~:blue"]]]]]],"^6","Convert an RGB color map to a hexadecimal color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/rgb->hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["~$p__43635"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",129,"^:",129,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[[["^ ","~$r","^3W","~$g","^3X","~$b","^3Y"]]]]]],"^6","Convert an RGB color map to a hexadecimal color."],"~$as-hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",211,"^9",7,"^:",211,"^;",13,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Convert a color to a hexadecimal string."],"^L","~$mranderson048.garden.v1v3v3.garden.color/as-hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^33",["^10",[["~$x"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",211,"^37",["^I",[null,"^39"]],"^:",211,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Convert a color to a hexadecimal string."],"~$analogous",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",334,"^9",7,"^:",334,"^;",16,"^2Z",["^10",["^2[",["^10",[["^30"],["^30","~$clockwise?"]]]]],"^6","Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.","^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^43"]]],"^2Z",["^10",[["^30"],["^30","^43"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/analogous","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",16,"^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^43"]]],"^2Z",["^10",[["^30"],["^30","^43"]]],"^35",["^10",[null,null]]],"^33",["^10",[["^30"],["^30","^43"]]],"^34",null,"^3E",2,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",2,"^36",false,"^3?","~$cljs.core/LazySeq"]],"^8",334,"^:",334,"^3:",2,"^3;",true,"^2Z",["^10",[["^30"],["^30","^43"]]],"^6","Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction."],"~$long->hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",601,"^9",8,"^:",601,"^;",17,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$long"]]]]],"^6","(long->hex 11189196) -> \"aabbcc\""],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/long->hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",17,"^33",["^10",[["^47"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",601,"^37","^39","^:",601,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^47"]]]]],"^6","(long->hex 11189196) -> \"aabbcc\""],"~$rgba",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",56,"^9",7,"^:",56,"^;",11,"^2Z",["^10",["^2[",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]]]],"^6","Create an RGBA color.","^3D",["^ ","^36",false,"^3E",4,"^3:",4,"^33",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^2Z",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/rgba","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",11,"^3D",["^ ","^36",false,"^3E",4,"^3:",4,"^33",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^2Z",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^35",["^10",[null,null]]],"^33",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^34",null,"^3E",4,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",4,"^36",false,"^3?","^39"]],"^8",56,"^:",56,"^3:",4,"^3;",true,"^2Z",["^10",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^6","Create an RGBA color."],"~$color-name->hex",["^ ","^L","~$mranderson048.garden.v1v3v3.garden.color/color-name->hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",388,"^9",1,"^:",388,"^;",21,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",388,"^9",6,"^:",388,"^;",21],"^3?","~$cljs.core/IMap"],"~$hex->long",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",592,"^9",8,"^:",592,"^;",17,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]],"^6","(hex->long \"#abc\") -> 11189196"],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/hex->long","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",17,"^33",["^10",[["^3K"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",592,"^37","~$js","^:",592,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]],"^6","(hex->long \"#abc\") -> 11189196"],"~$scale-lightness",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",564,"^9",7,"^:",564,"^;",22,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Scale the lightness of a color by amount"],"^L","~$mranderson048.garden.v1v3v3.garden.color/scale-lightness","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",22,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",564,"^37",["^I",["^38","^39"]],"^:",564,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Scale the lightness of a color by amount"],"~$darken",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",304,"^9",7,"^:",304,"^;",13,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Decrease the lightness value a given color by amount."],"^L","~$mranderson048.garden.v1v3v3.garden.color/darken","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",304,"^37",["^I",["^38","^39"]],"^:",304,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Decrease the lightness value a given color by amount."],"~$hue->rgb",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",183,"^9",8,"^:",183,"^;",16,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$m1","~$m2","~$h"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/hue->rgb","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",16,"^33",["^10",[["^4F","^4G","~$h"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",183,"^37",["^I",[null,"~$number"]],"^:",183,"^3:",3,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^4F","^4G","~$h"]]]]]],"~$hsl?",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",95,"^9",7,"^:",95,"^;",11,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return true if color is an HSL color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hsl?","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",11,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",95,"^37","~$boolean","^:",95,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return true if color is an HSL color."],"~$hex->hsl",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",200,"^9",7,"^:",200,"^;",15,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Convert a hexadecimal color to an HSL color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hex->hsl","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",200,"^37",["^I",[null,"^39"]],"^:",200,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Convert a hexadecimal color to an HSL color."],"~$as-rgb",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",220,"^9",7,"^:",220,"^;",13,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Convert a color to a RGB."],"^L","~$mranderson048.garden.v1v3v3.garden.color/as-rgb","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^33",["^10",[["~$x"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",220,"^37",["^I",[null,"^39","~$clj-nil"]],"^:",220,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Convert a color to a RGB."],"~$from-name",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",551,"^9",7,"^:",551,"^;",16,"^2Z",["^10",["^2[",["^10",[["~$n"]]]]],"^6","Given a CSS color name n return an instance of CSSColor."],"^L","~$mranderson048.garden.v1v3v3.garden.color/from-name","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",16,"^33",["^10",[["~$n"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",551,"^37","^39","^:",551,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$n"]]]]],"^6","Given a CSS color name n return an instance of CSSColor."],"~$as-color",["^ ","^L","~$mranderson048.garden.v1v3v3.garden.color/as-color","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",44,"^9",1,"^:",44,"^;",14,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",44,"^9",6,"^:",44,"^;",14]],"~$restrict-rgb",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",240,"^9",8,"^:",240,"^;",20,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$m"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/restrict-rgb","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"^33",["^10",[["~$m"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",240,"^37","^38","^:",240,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$m"]]]]]],"~$rgb->hsl",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",140,"^9",7,"^:",140,"^;",15,"^2Z",["^10",["^2[",["^10",[[["^ ","~:keys",["~$red","~$green","~$blue"],"^15","^30"]]]]]],"^6","Convert an RGB color map to an HSL color map."],"^L","~$mranderson048.garden.v1v3v3.garden.color/rgb->hsl","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["~$p__43642"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",140,"^37",["^I",[null,"^39"]],"^:",140,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[[["^ ","^4Y",["^4Z","^4[","^50"],"^15","^30"]]]]]],"^6","Convert an RGB color map to an HSL color map."],"~$ex-info-color-name",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",536,"^9",8,"^:",536,"^;",26,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$n"]]]]],"^6","Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/ex-info-color-name","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",26,"^33",["^10",[["~$n"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",536,"^37","^39","^:",536,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$n"]]]]],"^6","Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."],"~$rgb",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",46,"^9",7,"^:",46,"^;",10,"^2Z",["^10",["^2[",["^10",[[["~$r","~$g","~$b","^15","~$vs"]],["~$r","~$g","~$b"]]]]],"^6","Create an RGB color.","^3D",["^ ","^36",false,"^3E",3,"^3:",3,"^33",["^10",[[["~$r","~$g","~$b","^15","^56"]],["~$r","~$g","~$b"]]],"^2Z",["^10",[[["~$r","~$g","~$b","^15","^56"]],["~$r","~$g","~$b"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/rgb","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",10,"^3D",["^ ","^36",false,"^3E",3,"^3:",3,"^33",["^10",[[["~$r","~$g","~$b","^15","^56"]],["~$r","~$g","~$b"]]],"^2Z",["^10",[[["~$r","~$g","~$b","^15","^56"]],["~$r","~$g","~$b"]]],"^35",["^10",[null,null]]],"^33",["^10",[[["~$r","~$g","~$b","^15","^56"]],["~$r","~$g","~$b"]]],"^34",null,"^3E",3,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",3,"^36",false,"^3?","^39"]],"^8",46,"^:",46,"^3:",3,"^3;",true,"^2Z",["^10",[[["~$r","~$g","~$b","^15","^56"]],["~$r","~$g","~$b"]]],"^6","Create an RGB color."],"~$tetrad",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",359,"^9",7,"^:",359,"^;",13,"^2Z",["^10",["^2[",["^10",[["^30"],["^30","~$angle"]]]]],"^6","Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).","^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^59"]]],"^2Z",["^10",[["^30"],["^30","^59"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/tetrad","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^59"]]],"^2Z",["^10",[["^30"],["^30","^59"]]],"^35",["^10",[null,null]]],"^33",["^10",[["^30"],["^30","^59"]]],"^34",null,"^3E",2,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",2,"^36",false,"^3?","~$cljs.core/IVector"]],"^8",359,"^:",359,"^3:",2,"^3;",true,"^2Z",["^10",[["^30"],["^30","^59"]]],"^6","Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed)."],"~$hsl",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",66,"^9",7,"^:",66,"^;",10,"^2Z",["^10",["^2[",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]]]],"^6","Create an HSL color.","^3D",["^ ","^36",false,"^3E",3,"^3:",3,"^33",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^2Z",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/hsl","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",10,"^3D",["^ ","^36",false,"^3E",3,"^3:",3,"^33",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^2Z",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^35",["^10",[null,null]]],"^33",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^34",null,"^3E",3,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",3,"^36",false,"^3?","^39"]],"^8",66,"^:",66,"^3:",3,"^3;",true,"^2Z",["^10",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^6","Create an HSL color."],"~$hex-re",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",111,"^9",3,"^:",111,"^;",9,"^6","Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hex-re","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",9,"^9",1,"^8",106,"^:",111,"^3?","^39","^6","Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."],"~$rgb?",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",89,"^9",7,"^:",89,"^;",11,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return true if color is an RGB color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/rgb?","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",11,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",89,"^37","^4L","^:",89,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return true if color is an RGB color."],"~$color?",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",101,"^9",7,"^:",101,"^;",13,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Return true if x is a color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/color?","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^33",["^10",[["~$x"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",101,"^37","^4L","^:",101,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Return true if x is a color."],"~$hue-rotations",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",330,"^9",8,"^:",330,"^;",21,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["^30","~$&","~$amounts"]]]]],"^3D",["^ ","^36",true,"^3E",1,"^3:",1,"^33",[["^10",["^30","^5E"]]],"^2Z",["^10",[["^30","~$&","^5E"]]],"^35",["^10",[null]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/hue-rotations","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",21,"^3D",["^ ","^36",true,"^3E",1,"^3:",1,"^33",[["^10",["^30","^5E"]]],"^2Z",["^10",[["^30","~$&","^5E"]]],"^35",["^10",[null]]],"^33",[["^10",["^30","^5E"]]],"^34",null,"^3E",1,"^35",["^10",[null]],"^9",1,"^36",true,"^3G",[["^ ","^3E",1,"^36",true,"^3?","^45"]],"^8",330,"^37","^39","^:",330,"^3:",1,"^3;",true,"^2Z",["^10",[["^30","~$&","^5E"]]]],"~$lighten",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",299,"^9",7,"^:",299,"^;",14,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Increase the lightness value a given color by amount."],"^L","~$mranderson048.garden.v1v3v3.garden.color/lighten","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",14,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",299,"^37",["^I",["^38","^39"]],"^:",299,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Increase the lightness value a given color by amount."],"~$crown-hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",577,"^9",8,"^:",577,"^;",17,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/crown-hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",17,"^33",["^10",[["^3K"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",577,"^37",["^I",[null,"^R"]],"^:",577,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]]],"~$hex?",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",113,"^9",7,"^:",113,"^;",11,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Returns true if x is a hexadecimal color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hex?","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",11,"^33",["^10",[["~$x"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",113,"^37","^4L","^:",113,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Returns true if x is a hexadecimal color."],"~$scale-color-value",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",558,"^9",8,"^:",558,"^;",25,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$value","^3P"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/scale-color-value","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",25,"^33",["^10",[["^5N","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",558,"^37","^4I","^:",558,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^5N","^3P"]]]]]],"~$rgb-clip",["^ ","^L","~$mranderson048.garden.v1v3v3.garden.color/rgb-clip","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",208,"^9",1,"^:",208,"^;",14,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",208,"^9",6,"^:",208,"^;",14],"^3?","^3@"],"~$triad",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",344,"^9",7,"^:",344,"^;",12,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Given a color return a triple of colors which are equidistance apart\n  on the color wheel."],"^L","~$mranderson048.garden.v1v3v3.garden.color/triad","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",12,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",344,"^37","^45","^:",344,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Given a color return a triple of colors which are equidistance apart\n  on the color wheel."],"~$make-color-operation",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",244,"^9",8,"^:",244,"^;",28,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["~$op"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/make-color-operation","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",28,"^33",["^10",[["^5U"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",244,"^37","^3@","^:",244,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^5U"]]]]]],"~$as-hsl",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",230,"^9",7,"^:",230,"^;",13,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Convert a color to a HSL."],"^L","~$mranderson048.garden.v1v3v3.garden.color/as-hsl","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^33",["^10",[["~$x"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",230,"^37",["^I",[null,"^39"]],"^:",230,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]],"^6","Convert a color to a HSL."],"~$split-complement",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",350,"^9",7,"^:",350,"^;",23,"^2Z",["^10",["^2[",["^10",[["^30"],["^30","~$distance-from-complement"]]]]],"^6","Given a color return a triple of the color and the two colors on\n  either side of it's complement.","^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^5Z"]]],"^2Z",["^10",[["^30"],["^30","^5Z"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/split-complement","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",23,"^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^5Z"]]],"^2Z",["^10",[["^30"],["^30","^5Z"]]],"^35",["^10",[null,null]]],"^33",["^10",[["^30"],["^30","^5Z"]]],"^34",null,"^3E",2,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",2,"^36",false,"^3?","^45"]],"^8",350,"^:",350,"^3:",2,"^3;",true,"^2Z",["^10",[["^30"],["^30","^5Z"]]],"^6","Given a color return a triple of the color and the two colors on\n  either side of it's complement."],"~$weighted-mix",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",607,"^9",7,"^:",607,"^;",19,"^2Z",["^10",["^2[",["^10",[["^3B","^3C","~$weight"]]]]],"^6","~`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string."],"^L","~$mranderson048.garden.v1v3v3.garden.color/weighted-mix","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",19,"^33",["^10",[["^3B","^3C","^61"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",607,"^37",["^I",[null,"^R"]],"^:",607,"^3:",3,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^3B","^3C","^61"]]]]],"^6","~`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string."],"~$percent-clip",["^ ","^L","~$mranderson048.garden.v1v3v3.garden.color/percent-clip","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",205,"^9",1,"^:",205,"^;",18,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",205,"^9",6,"^:",205,"^;",18],"^3?","^3@"],"~$hsl->rgb",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",165,"^9",7,"^:",165,"^;",15,"^2Z",["^10",["^2[",["^10",[[["^ ","^4Y",["~$hue","~$saturation","~$lightness"],"^15","^30"]]]]]],"^6","Convert an HSL color map to an RGB color map."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hsl->rgb","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["~$p__43656"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",165,"^37",["^I",[null,"^39"]],"^:",165,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[[["^ ","^4Y",["^66","^67","^68"],"^15","^30"]]]]]],"^6","Convert an HSL color map to an RGB color map."],"~$shades",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",374,"^9",7,"^:",374,"^;",13,"^2Z",["^10",["^2[",["^10",[["^30"],["^30","~$step"]]]]],"^6","Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.","^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^6<"]]],"^2Z",["^10",[["^30"],["^30","^6<"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/shades","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",13,"^3D",["^ ","^36",false,"^3E",2,"^3:",2,"^33",["^10",[["^30"],["^30","^6<"]]],"^2Z",["^10",[["^30"],["^30","^6<"]]],"^35",["^10",[null,null]]],"^33",["^10",[["^30"],["^30","^6<"]]],"^34",null,"^3E",2,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",2,"^36",false,"^3?","^45"]],"^8",374,"^:",374,"^3:",2,"^3;",true,"^2Z",["^10",[["^30"],["^30","^6<"]]],"^6","Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list."],"~$hex->rgb",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",118,"^9",7,"^:",118,"^;",15,"^2Z",["^10",["^2[",["^10",[["~$s"]]]]],"^6","Convert a hexadecimal color to an RGB color map."],"^L","~$mranderson048.garden.v1v3v3.garden.color/hex->rgb","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["~$s"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",118,"^37",["^I",["^39","^4Q"]],"^:",118,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$s"]]]]],"^6","Convert a hexadecimal color to an RGB color map."],"~$map->CSSColor",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"^9",12,"~:internal-ctor",true,"~:factory","~:map","^8",22,"^:",22,"^2Z",["^10",["^2[",["^10",[["~$G__43497"]]]]],"^6","Factory function for mranderson048.garden.v1v3v3.garden.color/CSSColor, taking a map of keywords to field values."],"^L","~$mranderson048.garden.v1v3v3.garden.color/map->CSSColor","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"^33",["^10",[["^6D"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^6A",true,"^36",false,"^6B","^6C","^8",22,"^37","~$mranderson048.garden.v1v3v3.garden.color/CSSColor","^:",22,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^6D"]]]]],"^6","Factory function for mranderson048.garden.v1v3v3.garden.color/CSSColor, taking a map of keywords to field values."],"~$scale-saturation",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",569,"^9",7,"^:",569,"^;",23,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Scale the saturation of a color by amount"],"^L","~$mranderson048.garden.v1v3v3.garden.color/scale-saturation","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",23,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",569,"^37",["^I",["^38","^39"]],"^:",569,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Scale the saturation of a color by amount"],"~$desaturate",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",294,"^9",7,"^:",294,"^;",17,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Decrease the saturation value of a given color by amount."],"^L","~$mranderson048.garden.v1v3v3.garden.color/desaturate","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",17,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",294,"^37",["^I",["^38","^39"]],"^:",294,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Decrease the saturation value of a given color by amount."],"~$hsla",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",79,"^9",7,"^:",79,"^;",11,"^2Z",["^10",["^2[",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]]]],"^6","Create an HSLA color.","^3D",["^ ","^36",false,"^3E",4,"^3:",4,"^33",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^2Z",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^35",["^10",[null,null]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/hsla","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",11,"^3D",["^ ","^36",false,"^3E",4,"^3:",4,"^33",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^2Z",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^35",["^10",[null,null]]],"^33",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^34",null,"^3E",4,"^35",["^10",[null,null]],"^9",1,"^36",false,"^3G",[["^ ","^3E",1,"^36",false,"^3?","^39"],["^ ","^3E",4,"^36",false,"^3?","^39"]],"^8",79,"^:",79,"^3:",4,"^3;",true,"^2Z",["^10",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^6","Create an HSLA color."],"~$->CSSColor",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"^9",12,"^6A",true,"^6B","~:positional","^8",22,"^:",22,"^2Z",["^10",["^2[",["^10",[["^4Z","^4[","^50","^66","^67","^68","~$alpha"]]]]],"^6","Positional factory function for mranderson048.garden.v1v3v3.garden.color/CSSColor."],"^L","~$mranderson048.garden.v1v3v3.garden.color/->CSSColor","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"^33",["^10",[["^4Z","^4[","^50","^66","^67","^68","^6O"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^6A",true,"^36",false,"^6B","^6N","^8",22,"^37","^6F","^:",22,"^3:",7,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^4Z","^4[","^50","^66","^67","^68","^6O"]]]]],"^6","Positional factory function for mranderson048.garden.v1v3v3.garden.color/CSSColor."],"~$CSSColor",["^ ","~:num-fields",7,"~:protocols",["^I",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^4=","~$cljs.core/ILookup"]],"^L","^6F","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",20,"~:type",true,"^9",12,"^6A",true,"^8",22,"~:record",true,"^:",22,"^3?","^3@","~:skip-protocol-flag",["^I",["^6T","^6U","^6V","^6W","^6X","^6Y","^6Z","^6[","^70","^71","^72","^73","^74","^75","^4=","^76"]]],"^J",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",325,"^9",7,"^:",325,"^;",17,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return the complement of a color."],"^L","~$mranderson048.garden.v1v3v3.garden.color/complement","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",17,"^33",["^10",[["^30"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",325,"^37",["^I",["^38","^39"]],"^:",325,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30"]]]]],"^6","Return the complement of a color."],"~$saturate",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",289,"^9",7,"^:",289,"^;",15,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Increase the saturation value of a given color by amount."],"^L","~$mranderson048.garden.v1v3v3.garden.color/saturate","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["^30","^3P"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",289,"^37",["^I",["^38","^39"]],"^:",289,"^3:",2,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^30","^3P"]]]]],"^6","Increase the saturation value of a given color by amount."],"~$color-div",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",278,"^9",3,"^:",278,"^;",12,"^6","Multiply the RGB components of two or more colors.","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/color-div","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",12,"^9",1,"^8",275,"^:",278,"^3?","^3@","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]],"^6","Multiply the RGB components of two or more colors."],"~$color-",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",268,"^9",3,"^:",268,"^;",9,"^6","Subtract the RGB components of two or more colors.","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/color-","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",9,"^9",1,"^8",265,"^:",268,"^3?","^3@","^2Z",["^10",["^2[",["^10",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^3="]]]]],"^6","Subtract the RGB components of two or more colors."],"~$decrown-hex",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",574,"^9",8,"^:",574,"^;",19,"^2Y",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]]],"^2Y",true,"^L","~$mranderson048.garden.v1v3v3.garden.color/decrown-hex","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",19,"^33",["^10",[["^3K"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",574,"^37","^39","^:",574,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["^3K"]]]]]],"~$trim-one",["^ ","^2X",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^8",137,"^9",7,"^:",137,"^;",15,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]]],"^L","~$mranderson048.garden.v1v3v3.garden.color/trim-one","^7","mranderson048/garden/v1v3v3/garden/color.cljc","^;",15,"^33",["^10",[["~$x"]]],"^34",null,"^35",["^10",[null,null]],"^9",1,"^36",false,"^8",137,"^37",["^I",[null,"^4I"]],"^:",137,"^3:",1,"^3;",true,"^2Z",["^10",["^2[",["^10",[["~$x"]]]]]]],"^Y",["^ ","^G","^G","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^I",["~:hue","~:aquamarine","~:lime","~:deepskyblue","~:darksalmon","~:antiquewhite","~:mediumturquoise","~:slategrey","~:slategray","~:sienna","~:orange","~:navajowhite","~:given","~:lavenderblush","~:firebrick","~:orangered","~:palevioletred","~:lawngreen","~:seashell","~:lightpink","~:darkolivegreen","~:aliceblue","~:gray","~:lightsteelblue","~:whitesmoke","~:darkgoldenrod","~:tan","~:bisque","~:white","~:else","~:lightgreen","~:saturation","~:darkseagreen","~:crimson","~:darkslategray","~:mistyrose","~:chocolate","^66","~:yellow","~:cadetblue","~:navy","~:ghostwhite","~:dimgrey","~:seagreen","^3X","~:mediumseagreen","~:indigo","~:olivedrab","~:cyan","~:peachpuff","~:limegreen","~:mediumslateblue","~:violet","~:sandybrown","~:yellowgreen","~:mediumspringgreen","~:steelblue","~:rosybrown","~:cornflowerblue","~:ivory","~:lightgoldenrodyellow","~:magnitude","~:salmon","~:darkcyan","^67","~:peru","~:cornsilk","~:lightslategray","~:blueviolet","~:forestgreen","~:lightseagreen","^4[","~:gold","~:gainsboro","~:darkorchid","~:burlywood","~:lightskyblue","~:chartreuse","~:snow","~:moccasin","~:honeydew","~:aqua","~:darkred","~:mediumorchid","~:lightsalmon","~:saddlebrown","~:wheat","~:springgreen","~:lightslategrey","~:darkblue","~:powderblue","~:turquoise","~:blanchedalmond","~:papayawhip","~:slateblue","~:lightblue","~:skyblue","^3W","~:lightyellow","^3Y","~:palegreen","~:greenyellow","~:khaki","~:maroon","~:expected","~:darkgrey","~:midnightblue","~:floralwhite","~:deeppink","~:paleturquoise","~:darkkhaki","~:azure","~:indianred","~:lightness","~:darkviolet","~:mediumpurple","~:fuchsia","~:alpha","~:coral","~:mediumvioletred","~:lemonchiffon","~:mediumblue","~:darkmagenta","~:goldenrod","~:darkorange","~:orchid","~:plum","~:pink","~:teal","~:magenta","~:lightgrey","~:purple","~:dodgerblue","~:darkturquoise","^4Z","~:mintcream","^50","~:hotpink","~:thistle","~:royalblue","~:darkgreen","~:darkslateblue","~:silver","^68","~:darkgray","~:oldlace","~:mediumaquamarine","~:brown","~:lightgray","~:olive","~:lightcoral","~:tomato","~:lightcyan","^6O","~:linen","~:darkslategrey","~:lavender","~:dimgray","~:palegoldenrod","~:beige","~:black"]],"~:order~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1F",[["^;0","~:static-fns"],true,["^;0","~:elide-asserts"],false,["^;0","~:optimize-constants"],null,["^;0","^1="],null,["^;0","~:external-config"],null,["^;0","~:tooling-config"],null,["^;0","~:emit-constants"],null,["^;0","~:load-tests"],null,["^;0","~:form-size-threshold"],null,["^;0","~:infer-externs"],true,["^;0","^1?"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;0","~:fn-invoke-direct"],null,["^;0","~:source-map"],"/dev/null"]]]