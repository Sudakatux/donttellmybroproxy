["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/scheduler/cjs/scheduler.development.js"],"~:js","shadow$provide.module$node_modules$scheduler$cjs$scheduler_development=function(global,require,module,exports){(function(){function push(heap,node){var index=heap.length;heap.push(node);a:for(;;){var parentIndex=Math.floor((index-1)/2),parent=heap[parentIndex];if(void 0!==parent&&0<compare(parent,node))heap[parentIndex]=node,heap[index]=parent,index=parentIndex;else break a}}function peek(heap){heap=heap[0];return void 0===heap?null:heap}function pop(heap){var first=heap[0];if(void 0!==first){var last=\nheap.pop();if(last!==first){heap[0]=last;a:for(var index=0,length=heap.length;index<length;){var leftIndex=2*(index+1)-1,left=heap[leftIndex],rightIndex=leftIndex+1,right=heap[rightIndex];if(void 0!==left&&0>compare(left,last))void 0!==right&&0>compare(right,left)?(heap[index]=right,heap[rightIndex]=last,index=rightIndex):(heap[index]=left,heap[leftIndex]=last,index=leftIndex);else if(void 0!==right&&0>compare(right,last))heap[index]=right,heap[rightIndex]=last,index=rightIndex;else break a}}return first}return null}\nfunction compare(a,b){var diff=a.sortIndex-b.sortIndex;return 0!==diff?diff:a.id-b.id}function logEvent(entries){if(null!==eventLog){var offset=eventLogIndex;eventLogIndex+=entries.length;if(eventLogIndex+1>eventLogSize){eventLogSize*=2;if(524288<eventLogSize){console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.\");stopLoggingProfilingEvents();return}var newEventLog=new Int32Array(4*eventLogSize);newEventLog.set(eventLog);eventLogBuffer=\nnewEventLog.buffer;eventLog=newEventLog}eventLog.set(entries,offset)}}function stopLoggingProfilingEvents(){var buffer=eventLogBuffer;eventLogSize=0;eventLog=eventLogBuffer=null;eventLogIndex=0;return buffer}function advanceTimers(currentTime){for(var timer=peek(timerQueue);null!==timer;){if(null===timer.callback)pop(timerQueue);else if(timer.startTime<=currentTime){pop(timerQueue);timer.sortIndex=timer.expirationTime;push(taskQueue,timer);var task=timer,time=currentTime;profilingState[3]++;null!==\neventLog&&logEvent([1,time,task.id,task.priorityLevel]);timer.isQueued=!0}else break;timer=peek(timerQueue)}}function handleTimeout(currentTime){isHostTimeoutScheduled=!1;advanceTimers(currentTime);if(!isHostCallbackScheduled)if(null!==peek(taskQueue))isHostCallbackScheduled=!0,requestHostCallback(flushWork);else{var firstTimer=peek(timerQueue);null!==firstTimer&&requestHostTimeout(handleTimeout,firstTimer.startTime-currentTime)}}function flushWork(hasTimeRemaining,initialTime){null!==eventLog&&logEvent([8,\ninitialTime,mainThreadIdCounter]);isHostCallbackScheduled=!1;isHostTimeoutScheduled&&(isHostTimeoutScheduled=!1,cancelHostTimeout());isPerformingWork=!0;var previousPriorityLevel=currentPriorityLevel;try{try{advanceTimers(initialTime);for(currentTask=peek(taskQueue);null!==currentTask&&(!(currentTask.expirationTime>initialTime)||hasTimeRemaining&&!shouldYieldToHost());){var callback=currentTask.callback;if(null!==callback){currentTask.callback=null;currentPriorityLevel=currentTask.priorityLevel;var didUserCallbackTimeout=\ncurrentTask.expirationTime<=initialTime,task=currentTask,time=initialTime;runIdCounter++;profilingState[0]=task.priorityLevel;profilingState[1]=task.id;profilingState[2]=runIdCounter;null!==eventLog&&logEvent([5,time,task.id,runIdCounter]);var continuationCallback=callback(didUserCallbackTimeout);initialTime=exports.unstable_now();\"function\"===typeof continuationCallback?(currentTask.callback=continuationCallback,task=currentTask,time=initialTime,profilingState[0]=0,profilingState[1]=0,profilingState[2]=\n0,null!==eventLog&&logEvent([6,time,task.id,runIdCounter])):(task=currentTask,time=initialTime,profilingState[0]=0,profilingState[1]=0,profilingState[3]--,null!==eventLog&&logEvent([2,time,task.id]),currentTask.isQueued=!1,currentTask===peek(taskQueue)&&pop(taskQueue));advanceTimers(initialTime)}else pop(taskQueue);currentTask=peek(taskQueue)}if(null!==currentTask)var JSCompiler_inline_result=!0;else{var firstTimer=peek(timerQueue);null!==firstTimer&&requestHostTimeout(handleTimeout,firstTimer.startTime-\ninitialTime);JSCompiler_inline_result=!1}return JSCompiler_inline_result}catch(error){if(null!==currentTask){var currentTime=exports.unstable_now();hasTimeRemaining=currentTask;profilingState[0]=0;profilingState[1]=0;profilingState[3]--;null!==eventLog&&logEvent([3,currentTime,hasTimeRemaining.id]);currentTask.isQueued=!1}throw error;}}finally{currentTask=null,currentPriorityLevel=previousPriorityLevel,isPerformingWork=!1,previousPriorityLevel=exports.unstable_now(),mainThreadIdCounter++,null!==eventLog&&\nlogEvent([7,previousPriorityLevel,mainThreadIdCounter])}}function timeoutForPriorityLevel(priorityLevel){switch(priorityLevel){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}Object.defineProperty(exports,\"__esModule\",{value:!0});if(\"undefined\"===typeof window||\"function\"!==typeof MessageChannel){var _callback=null,_timeoutID=null,_flushCallback=function(){if(null!==_callback)try{var currentTime=exports.unstable_now();_callback(!0,currentTime);_callback=\nnull}catch(e){throw setTimeout(_flushCallback,0),e;}},initialTime=Date.now();exports.unstable_now=function(){return Date.now()-initialTime};var requestHostCallback=function(cb){null!==_callback?setTimeout(requestHostCallback,0,cb):(_callback=cb,setTimeout(_flushCallback,0))};var requestHostTimeout=function(cb,ms){_timeoutID=setTimeout(cb,ms)};var cancelHostTimeout=function(){clearTimeout(_timeoutID)};var shouldYieldToHost=function(){return!1};var requestPaint=exports.unstable_forceFrameRate=function(){}}else{var performance=\nwindow.performance,_Date=window.Date,_setTimeout=window.setTimeout,_clearTimeout=window.clearTimeout;requestPaint=window.requestAnimationFrame;var cancelAnimationFrame=window.cancelAnimationFrame;\"undefined\"!==typeof console&&(\"function\"!==typeof requestPaint&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"),\"function\"!==typeof cancelAnimationFrame&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"));\nif(\"object\"===typeof performance&&\"function\"===typeof performance.now)exports.unstable_now=function(){return performance.now()};else{var _initialTime=_Date.now();exports.unstable_now=function(){return _Date.now()-_initialTime}}var isMessageLoopRunning=!1,scheduledHostCallback=null,taskTimeoutID=-1,frameLength=5,frameDeadline=0;shouldYieldToHost=function(){return exports.unstable_now()>=frameDeadline};requestPaint=function(){};exports.unstable_forceFrameRate=function(fps){0>fps||125<fps?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported\"):\nframeLength=0<fps?Math.floor(1E3/fps):33.33};cancelAnimationFrame=new MessageChannel;var port=cancelAnimationFrame.port2;cancelAnimationFrame.port1.onmessage=function(){if(null!==scheduledHostCallback){var currentTime=exports.unstable_now();frameDeadline=currentTime+frameLength;try{scheduledHostCallback(!0,currentTime)?port.postMessage(null):(isMessageLoopRunning=!1,scheduledHostCallback=null)}catch(error){throw port.postMessage(null),error;}}else isMessageLoopRunning=!1};requestHostCallback=function(callback){scheduledHostCallback=\ncallback;isMessageLoopRunning||(isMessageLoopRunning=!0,port.postMessage(null))};requestHostTimeout=function(callback,ms){taskTimeoutID=_setTimeout(function(){callback(exports.unstable_now())},ms)};cancelHostTimeout=function(){_clearTimeout(taskTimeoutID);taskTimeoutID=-1}}var runIdCounter=0,mainThreadIdCounter=0;cancelAnimationFrame=\"function\"===typeof SharedArrayBuffer?new SharedArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT):\"function\"===typeof ArrayBuffer?new ArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT):\nnull;var profilingState=null!==cancelAnimationFrame?new Int32Array(cancelAnimationFrame):[];profilingState[0]=0;profilingState[3]=0;var eventLogSize=profilingState[1]=0,eventLogBuffer=null,eventLog=null,eventLogIndex=0,taskQueue=[],timerQueue=[],taskIdCounter=1,currentTask=null,currentPriorityLevel=3,isPerformingWork=!1,isHostCallbackScheduled=!1,isHostTimeoutScheduled=!1;cancelAnimationFrame={startLoggingProfilingEvents:function(){eventLogSize=131072;eventLogBuffer=new ArrayBuffer(4*eventLogSize);\neventLog=new Int32Array(eventLogBuffer);eventLogIndex=0},stopLoggingProfilingEvents:stopLoggingProfilingEvents,sharedProfilingBuffer:cancelAnimationFrame};exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(priorityLevel,eventHandler){switch(priorityLevel){case 1:case 2:case 3:case 4:case 5:break;default:priorityLevel=3}var previousPriorityLevel=\ncurrentPriorityLevel;currentPriorityLevel=priorityLevel;try{return eventHandler()}finally{currentPriorityLevel=previousPriorityLevel}};exports.unstable_next=function(eventHandler){switch(currentPriorityLevel){case 1:case 2:case 3:var priorityLevel=3;break;default:priorityLevel=currentPriorityLevel}var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=priorityLevel;try{return eventHandler()}finally{currentPriorityLevel=previousPriorityLevel}};exports.unstable_scheduleCallback=function(priorityLevel,\ncallback,options){var currentTime=exports.unstable_now();if(\"object\"===typeof options&&null!==options){var startTime=options.delay;startTime=\"number\"===typeof startTime&&0<startTime?currentTime+startTime:currentTime;options=\"number\"===typeof options.timeout?options.timeout:timeoutForPriorityLevel(priorityLevel)}else options=timeoutForPriorityLevel(priorityLevel),startTime=currentTime;options=startTime+options;priorityLevel={id:taskIdCounter++,callback:callback,priorityLevel:priorityLevel,startTime:startTime,\nexpirationTime:options,sortIndex:-1,isQueued:!1};startTime>currentTime?(priorityLevel.sortIndex=startTime,push(timerQueue,priorityLevel),null===peek(taskQueue)&&priorityLevel===peek(timerQueue)&&(isHostTimeoutScheduled?cancelHostTimeout():isHostTimeoutScheduled=!0,requestHostTimeout(handleTimeout,startTime-currentTime))):(priorityLevel.sortIndex=options,push(taskQueue,priorityLevel),profilingState[3]++,null!==eventLog&&logEvent([1,currentTime,priorityLevel.id,priorityLevel.priorityLevel]),priorityLevel.isQueued=\n!0,isHostCallbackScheduled||isPerformingWork||(isHostCallbackScheduled=!0,requestHostCallback(flushWork)));return priorityLevel};exports.unstable_cancelCallback=function(task){if(task.isQueued){var currentTime=exports.unstable_now();profilingState[3]--;null!==eventLog&&logEvent([4,currentTime,task.id]);task.isQueued=!1}task.callback=null};exports.unstable_wrapCallback=function(callback){var parentPriorityLevel=currentPriorityLevel;return function(){var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=\nparentPriorityLevel;try{return callback.apply(this,arguments)}finally{currentPriorityLevel=previousPriorityLevel}}};exports.unstable_getCurrentPriorityLevel=function(){return currentPriorityLevel};exports.unstable_shouldYield=function(){var currentTime=exports.unstable_now();advanceTimers(currentTime);var firstTask=peek(taskQueue);return firstTask!==currentTask&&null!==currentTask&&null!==firstTask&&null!==firstTask.callback&&firstTask.startTime<=currentTime&&firstTask.expirationTime<currentTask.expirationTime||\nshouldYieldToHost()};exports.unstable_requestPaint=requestPaint;exports.unstable_continueExecution=function(){isHostCallbackScheduled||isPerformingWork||(isHostCallbackScheduled=!0,requestHostCallback(flushWork))};exports.unstable_pauseExecution=function(){};exports.unstable_getFirstCallbackNode=function(){return peek(taskQueue)};exports.unstable_Profiling=cancelAnimationFrame})()}","~:source","shadow$provide[\"module$node_modules$scheduler$cjs$scheduler_development\"] = function(global,require,module,exports) {\n/** @license React v0.16.2\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar enableSchedulerDebugging = false;\nvar enableIsInputPending = false;\nvar enableMessageLoopImplementation = true;\nvar enableProfiling = true;\n\n// works by scheduling a requestAnimationFrame, storing the time for the start\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\n// Within the postMessage handler do as much work as possible until time + frame\n// rate. By separating the idle call into a separate event tick we ensure that\n// layout, paint and other browser work is counted against the available time.\n// The frame rate is dynamically adjusted.\n\nvar requestHostCallback;\n\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar shouldYieldToHost;\nvar requestPaint;\n\n\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  var initialTime = Date.now();\n\n  exports.unstable_now = function () {\n    return Date.now() - initialTime;\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  shouldYieldToHost = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var performance = window.performance;\n  var _Date = window.Date;\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n  var requestAnimationFrame = window.requestAnimationFrame;\n  var cancelAnimationFrame = window.cancelAnimationFrame;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Remove fb.me link\n    if (typeof requestAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n  }\n\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\n    exports.unstable_now = function () {\n      return performance.now();\n    };\n  } else {\n    var _initialTime = _Date.now();\n\n    exports.unstable_now = function () {\n      return _Date.now() - _initialTime;\n    };\n  }\n\n  var isRAFLoopRunning = false;\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var rAFTimeoutID = -1;\n  var taskTimeoutID = -1;\n  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple\n  // times per frame, often enough to keep it responsive even at really\n  // high frame rates > 120.\n  5 : // Use a heuristic to measure the frame rate and yield at the end of the\n  // frame. We start out assuming that we run at 30fps but then the\n  // heuristic tracking will adjust this value to a faster fps if we get\n  // more frequent animation frames.\n  33.33;\n  var prevRAFTime = -1;\n  var prevRAFInterval = -1;\n  var frameDeadline = 0;\n  var fpsLocked = false; // TODO: Make this configurable\n  // TODO: Adjust this based on priority?\n\n  var maxFrameLength = 300;\n  var needsPaint = false;\n\n  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n    var scheduling = navigator.scheduling;\n\n    shouldYieldToHost = function () {\n      var currentTime = exports.unstable_now();\n\n      if (currentTime >= frameDeadline) {\n        // There's no time left in the frame. We may want to yield control of\n        // the main thread, so the browser can perform high priority tasks. The\n        // main ones are painting and user input. If there's a pending paint or\n        // a pending input, then we should yield. But if there's neither, then\n        // we can yield less often while remaining responsive. We'll eventually\n        // yield regardless, since there could be a pending paint that wasn't\n        // accompanied by a call to `requestPaint`, or other main thread tasks\n        // like network events.\n        if (needsPaint || scheduling.isInputPending()) {\n          // There is either a pending paint or a pending input.\n          return true;\n        } // There's no pending input. Only yield if we've reached the max\n        // frame length.\n\n\n        return currentTime >= frameDeadline + maxFrameLength;\n      } else {\n        // There's still time left in the frame.\n        return false;\n      }\n    };\n\n    requestPaint = function () {\n      needsPaint = true;\n    };\n  } else {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    shouldYieldToHost = function () {\n      return exports.unstable_now() >= frameDeadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n      return;\n    }\n\n    if (fps > 0) {\n      frameLength = Math.floor(1000 / fps);\n      fpsLocked = true;\n    } else {\n      // reset the framerate\n      frameLength = 33.33;\n      fpsLocked = false;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (enableMessageLoopImplementation) {\n      if (scheduledHostCallback !== null) {\n        var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync\n        // cycle. This means there's always time remaining at the beginning of\n        // the message event.\n\n        frameDeadline = currentTime + frameLength;\n        var hasTimeRemaining = true;\n\n        try {\n          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n          if (!hasMoreWork) {\n            isMessageLoopRunning = false;\n            scheduledHostCallback = null;\n          } else {\n            // If there's more work, schedule the next message event at the end\n            // of the preceding one.\n            port.postMessage(null);\n          }\n        } catch (error) {\n          // If a scheduler task throws, exit the current browser task so the\n          // error can be observed.\n          port.postMessage(null);\n          throw error;\n        }\n      } else {\n        isMessageLoopRunning = false;\n      } // Yielding to the browser will give it a chance to paint, so we can\n      // reset this.\n\n\n      needsPaint = false;\n    } else {\n      if (scheduledHostCallback !== null) {\n        var _currentTime = exports.unstable_now();\n\n        var _hasTimeRemaining = frameDeadline - _currentTime > 0;\n\n        try {\n          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\n\n          if (!_hasMoreWork) {\n            scheduledHostCallback = null;\n          }\n        } catch (error) {\n          // If a scheduler task throws, exit the current browser task so the\n          // error can be observed, and post a new task as soon as possible\n          // so we can continue where we left off.\n          port.postMessage(null);\n          throw error;\n        }\n      } // Yielding to the browser will give it a chance to paint, so we can\n      // reset this.\n\n\n      needsPaint = false;\n    }\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  var onAnimationFrame = function (rAFTime) {\n    if (scheduledHostCallback === null) {\n      // No scheduled work. Exit.\n      prevRAFTime = -1;\n      prevRAFInterval = -1;\n      isRAFLoopRunning = false;\n      return;\n    } // Eagerly schedule the next animation callback at the beginning of the\n    // frame. If the scheduler queue is not empty at the end of the frame, it\n    // will continue flushing inside that callback. If the queue *is* empty,\n    // then it will exit immediately. Posting the callback at the start of the\n    // frame ensures it's fired within the earliest possible frame. If we\n    // waited until the end of the frame to post the callback, we risk the\n    // browser skipping a frame and not firing the callback until the frame\n    // after that.\n\n\n    isRAFLoopRunning = true;\n    requestAnimationFrame(function (nextRAFTime) {\n      _clearTimeout(rAFTimeoutID);\n\n      onAnimationFrame(nextRAFTime);\n    }); // requestAnimationFrame is throttled when the tab is backgrounded. We\n    // don't want to stop working entirely. So we'll fallback to a timeout loop.\n    // TODO: Need a better heuristic for backgrounded work.\n\n    var onTimeout = function () {\n      frameDeadline = exports.unstable_now() + frameLength / 2;\n      performWorkUntilDeadline();\n      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n    };\n\n    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n\n    if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check\n    // could fail if two rAFs fire in the same frame.\n    rAFTime - prevRAFTime > 0.1) {\n      var rAFInterval = rAFTime - prevRAFTime;\n\n      if (!fpsLocked && prevRAFInterval !== -1) {\n        // We've observed two consecutive frame intervals. We'll use this to\n        // dynamically adjust the frame rate.\n        //\n        // If one frame goes long, then the next one can be short to catch up.\n        // If two frames are short in a row, then that's an indication that we\n        // actually have a higher frame rate than what we're currently\n        // optimizing. For example, if we're running on 120hz display or 90hz VR\n        // display. Take the max of the two in case one of them was an anomaly\n        // due to missed frame deadlines.\n        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\n          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\n\n          if (frameLength < 8.33) {\n            // Defensive coding. We don't support higher frame rates than 120hz.\n            // If the calculated frame length gets lower than 8, it is probably\n            // a bug.\n            frameLength = 8.33;\n          }\n        }\n      }\n\n      prevRAFInterval = rAFInterval;\n    }\n\n    prevRAFTime = rAFTime;\n    frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.\n\n    port.postMessage(null);\n  };\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (enableMessageLoopImplementation) {\n      if (!isMessageLoopRunning) {\n        isMessageLoopRunning = true;\n        port.postMessage(null);\n      }\n    } else {\n      if (!isRAFLoopRunning) {\n        // Start a rAF loop.\n        isRAFLoopRunning = true;\n        requestAnimationFrame(function (rAFTime) {\n          onAnimationFrame(rAFTime);\n        });\n      }\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = Math.floor((index - 1) / 2);\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar NoPriority = 0;\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nvar runIdCounter = 0;\nvar mainThreadIdCounter = 0;\nvar profilingStateSize = 4;\nvar sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n: null;\nvar profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\nvar PRIORITY = 0;\nvar CURRENT_TASK_ID = 1;\nvar CURRENT_RUN_ID = 2;\nvar QUEUE_SIZE = 3;\n\nif (enableProfiling) {\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n  // array might include canceled tasks.\n\n  profilingState[QUEUE_SIZE] = 0;\n  profilingState[CURRENT_TASK_ID] = 0;\n} // Bytes per element is 4\n\n\nvar INITIAL_EVENT_LOG_SIZE = 131072;\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nvar eventLogSize = 0;\nvar eventLogBuffer = null;\nvar eventLog = null;\nvar eventLogIndex = 0;\nvar TaskStartEvent = 1;\nvar TaskCompleteEvent = 2;\nvar TaskErrorEvent = 3;\nvar TaskCancelEvent = 4;\nvar TaskRunEvent = 5;\nvar TaskYieldEvent = 6;\nvar SchedulerSuspendEvent = 7;\nvar SchedulerResumeEvent = 8;\n\nfunction logEvent(entries) {\n  if (eventLog !== null) {\n    var offset = eventLogIndex;\n    eventLogIndex += entries.length;\n\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n        stopLoggingProfilingEvents();\n        return;\n      }\n\n      var newEventLog = new Int32Array(eventLogSize * 4);\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n\n    eventLog.set(entries, offset);\n  }\n}\n\nfunction startLoggingProfilingEvents() {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\nfunction stopLoggingProfilingEvents() {\n  var buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\nfunction markTaskStart(task, time) {\n  if (enableProfiling) {\n    profilingState[QUEUE_SIZE]++;\n\n    if (eventLog !== null) {\n      logEvent([TaskStartEvent, time, task.id, task.priorityLevel]);\n    }\n  }\n}\nfunction markTaskCompleted(task, time) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, time, task.id]);\n    }\n  }\n}\nfunction markTaskCanceled(task, time) {\n  if (enableProfiling) {\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, time, task.id]);\n    }\n  }\n}\nfunction markTaskErrored(task, time) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, time, task.id]);\n    }\n  }\n}\nfunction markTaskRun(task, time) {\n  if (enableProfiling) {\n    runIdCounter++;\n    profilingState[PRIORITY] = task.priorityLevel;\n    profilingState[CURRENT_TASK_ID] = task.id;\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, time, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markTaskYield(task, time) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[CURRENT_RUN_ID] = 0;\n\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, time, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markSchedulerSuspended(time) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, time, mainThreadIdCounter]);\n    }\n  }\n}\nfunction markSchedulerUnsuspended(time) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, time, mainThreadIdCounter]);\n    }\n  }\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\nvar isSchedulerPaused = false;\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod codepath.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    if (enableProfiling) {\n      var _currentTime = exports.unstable_now();\n\n      markSchedulerSuspended(_currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (callback !== null) {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      markTaskRun(currentTask, currentTime);\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n        markTaskYield(currentTask, currentTime);\n      } else {\n        if (enableProfiling) {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction timeoutForPriorityLevel(priorityLevel) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      return IMMEDIATE_PRIORITY_TIMEOUT;\n\n    case UserBlockingPriority:\n      return USER_BLOCKING_PRIORITY;\n\n    case IdlePriority:\n      return IDLE_PRIORITY;\n\n    case LowPriority:\n      return LOW_PRIORITY_TIMEOUT;\n\n    case NormalPriority:\n    default:\n      return NORMAL_PRIORITY_TIMEOUT;\n  }\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n  var timeout;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n  } else {\n    timeout = timeoutForPriorityLevel(priorityLevel);\n    startTime = currentTime;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      var currentTime = exports.unstable_now();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction unstable_shouldYield() {\n  var currentTime = exports.unstable_now();\n  advanceTimers(currentTime);\n  var firstTask = peek(taskQueue);\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling = enableProfiling ? {\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n  sharedProfilingBuffer: sharedProfilingBuffer\n} : null;\n\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_next = unstable_next;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_shouldYield = unstable_shouldYield;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_Profiling = unstable_Profiling;\n  })();\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["unstable_runWithPriority","callback","unstable_LowPriority","unstable_getCurrentPriorityLevel","unstable_forceFrameRate","isQueued","unstable_pauseExecution","stopLoggingProfilingEvents","sharedProfilingBuffer","priorityLevel","__esModule","id","unstable_UserBlockingPriority","unstable_shouldYield","unstable_requestPaint","expirationTime","value","unstable_NormalPriority","startTime","unstable_cancelCallback","sortIndex","unstable_Profiling","startLoggingProfilingEvents","unstable_scheduleCallback","unstable_now","unstable_getFirstCallbackNode","unstable_continueExecution","unstable_ImmediatePriority","unstable_wrapCallback","unstable_next","onmessage","unstable_IdlePriority"]],"~:compiled-at",1570444216208,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$scheduler$cjs$scheduler_development.js\",\n\"lineCount\":23,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/scheduler/cjs/scheduler.development.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$scheduler$cjs$scheduler_development\\\"] = function(global,require,module,exports) {\\n/** @license React v0.16.2\\n * scheduler.development.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n'use strict';\\n\\n\\n\\nif (process.env.NODE_ENV !== \\\"production\\\") {\\n  (function() {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar enableSchedulerDebugging = false;\\nvar enableIsInputPending = false;\\nvar enableMessageLoopImplementation = true;\\nvar enableProfiling = true;\\n\\n// works by scheduling a requestAnimationFrame, storing the time for the start\\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\\n// Within the postMessage handler do as much work as possible until time + frame\\n// rate. By separating the idle call into a separate event tick we ensure that\\n// layout, paint and other browser work is counted against the available time.\\n// The frame rate is dynamically adjusted.\\n\\nvar requestHostCallback;\\n\\nvar requestHostTimeout;\\nvar cancelHostTimeout;\\nvar shouldYieldToHost;\\nvar requestPaint;\\n\\n\\n\\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\\n// implementation using setTimeout.\\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\\ntypeof MessageChannel !== 'function') {\\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\\n  // fallback to a naive implementation.\\n  var _callback = null;\\n  var _timeoutID = null;\\n\\n  var _flushCallback = function () {\\n    if (_callback !== null) {\\n      try {\\n        var currentTime = exports.unstable_now();\\n        var hasRemainingTime = true;\\n\\n        _callback(hasRemainingTime, currentTime);\\n\\n        _callback = null;\\n      } catch (e) {\\n        setTimeout(_flushCallback, 0);\\n        throw e;\\n      }\\n    }\\n  };\\n\\n  var initialTime = Date.now();\\n\\n  exports.unstable_now = function () {\\n    return Date.now() - initialTime;\\n  };\\n\\n  requestHostCallback = function (cb) {\\n    if (_callback !== null) {\\n      // Protect against re-entrancy.\\n      setTimeout(requestHostCallback, 0, cb);\\n    } else {\\n      _callback = cb;\\n      setTimeout(_flushCallback, 0);\\n    }\\n  };\\n\\n  requestHostTimeout = function (cb, ms) {\\n    _timeoutID = setTimeout(cb, ms);\\n  };\\n\\n  cancelHostTimeout = function () {\\n    clearTimeout(_timeoutID);\\n  };\\n\\n  shouldYieldToHost = function () {\\n    return false;\\n  };\\n\\n  requestPaint = exports.unstable_forceFrameRate = function () {};\\n} else {\\n  // Capture local references to native APIs, in case a polyfill overrides them.\\n  var performance = window.performance;\\n  var _Date = window.Date;\\n  var _setTimeout = window.setTimeout;\\n  var _clearTimeout = window.clearTimeout;\\n  var requestAnimationFrame = window.requestAnimationFrame;\\n  var cancelAnimationFrame = window.cancelAnimationFrame;\\n\\n  if (typeof console !== 'undefined') {\\n    // TODO: Remove fb.me link\\n    if (typeof requestAnimationFrame !== 'function') {\\n      console.error(\\\"This browser doesn't support requestAnimationFrame. \\\" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\\n    }\\n\\n    if (typeof cancelAnimationFrame !== 'function') {\\n      console.error(\\\"This browser doesn't support cancelAnimationFrame. \\\" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\\n    }\\n  }\\n\\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\\n    exports.unstable_now = function () {\\n      return performance.now();\\n    };\\n  } else {\\n    var _initialTime = _Date.now();\\n\\n    exports.unstable_now = function () {\\n      return _Date.now() - _initialTime;\\n    };\\n  }\\n\\n  var isRAFLoopRunning = false;\\n  var isMessageLoopRunning = false;\\n  var scheduledHostCallback = null;\\n  var rAFTimeoutID = -1;\\n  var taskTimeoutID = -1;\\n  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple\\n  // times per frame, often enough to keep it responsive even at really\\n  // high frame rates > 120.\\n  5 : // Use a heuristic to measure the frame rate and yield at the end of the\\n  // frame. We start out assuming that we run at 30fps but then the\\n  // heuristic tracking will adjust this value to a faster fps if we get\\n  // more frequent animation frames.\\n  33.33;\\n  var prevRAFTime = -1;\\n  var prevRAFInterval = -1;\\n  var frameDeadline = 0;\\n  var fpsLocked = false; // TODO: Make this configurable\\n  // TODO: Adjust this based on priority?\\n\\n  var maxFrameLength = 300;\\n  var needsPaint = false;\\n\\n  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\\n    var scheduling = navigator.scheduling;\\n\\n    shouldYieldToHost = function () {\\n      var currentTime = exports.unstable_now();\\n\\n      if (currentTime >= frameDeadline) {\\n        // There's no time left in the frame. We may want to yield control of\\n        // the main thread, so the browser can perform high priority tasks. The\\n        // main ones are painting and user input. If there's a pending paint or\\n        // a pending input, then we should yield. But if there's neither, then\\n        // we can yield less often while remaining responsive. We'll eventually\\n        // yield regardless, since there could be a pending paint that wasn't\\n        // accompanied by a call to `requestPaint`, or other main thread tasks\\n        // like network events.\\n        if (needsPaint || scheduling.isInputPending()) {\\n          // There is either a pending paint or a pending input.\\n          return true;\\n        } // There's no pending input. Only yield if we've reached the max\\n        // frame length.\\n\\n\\n        return currentTime >= frameDeadline + maxFrameLength;\\n      } else {\\n        // There's still time left in the frame.\\n        return false;\\n      }\\n    };\\n\\n    requestPaint = function () {\\n      needsPaint = true;\\n    };\\n  } else {\\n    // `isInputPending` is not available. Since we have no way of knowing if\\n    // there's pending input, always yield at the end of the frame.\\n    shouldYieldToHost = function () {\\n      return exports.unstable_now() >= frameDeadline;\\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\\n\\n\\n    requestPaint = function () {};\\n  }\\n\\n  exports.unstable_forceFrameRate = function (fps) {\\n    if (fps < 0 || fps > 125) {\\n      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\\n      return;\\n    }\\n\\n    if (fps > 0) {\\n      frameLength = Math.floor(1000 / fps);\\n      fpsLocked = true;\\n    } else {\\n      // reset the framerate\\n      frameLength = 33.33;\\n      fpsLocked = false;\\n    }\\n  };\\n\\n  var performWorkUntilDeadline = function () {\\n    if (enableMessageLoopImplementation) {\\n      if (scheduledHostCallback !== null) {\\n        var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync\\n        // cycle. This means there's always time remaining at the beginning of\\n        // the message event.\\n\\n        frameDeadline = currentTime + frameLength;\\n        var hasTimeRemaining = true;\\n\\n        try {\\n          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\\n\\n          if (!hasMoreWork) {\\n            isMessageLoopRunning = false;\\n            scheduledHostCallback = null;\\n          } else {\\n            // If there's more work, schedule the next message event at the end\\n            // of the preceding one.\\n            port.postMessage(null);\\n          }\\n        } catch (error) {\\n          // If a scheduler task throws, exit the current browser task so the\\n          // error can be observed.\\n          port.postMessage(null);\\n          throw error;\\n        }\\n      } else {\\n        isMessageLoopRunning = false;\\n      } // Yielding to the browser will give it a chance to paint, so we can\\n      // reset this.\\n\\n\\n      needsPaint = false;\\n    } else {\\n      if (scheduledHostCallback !== null) {\\n        var _currentTime = exports.unstable_now();\\n\\n        var _hasTimeRemaining = frameDeadline - _currentTime > 0;\\n\\n        try {\\n          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\\n\\n          if (!_hasMoreWork) {\\n            scheduledHostCallback = null;\\n          }\\n        } catch (error) {\\n          // If a scheduler task throws, exit the current browser task so the\\n          // error can be observed, and post a new task as soon as possible\\n          // so we can continue where we left off.\\n          port.postMessage(null);\\n          throw error;\\n        }\\n      } // Yielding to the browser will give it a chance to paint, so we can\\n      // reset this.\\n\\n\\n      needsPaint = false;\\n    }\\n  };\\n\\n  var channel = new MessageChannel();\\n  var port = channel.port2;\\n  channel.port1.onmessage = performWorkUntilDeadline;\\n\\n  var onAnimationFrame = function (rAFTime) {\\n    if (scheduledHostCallback === null) {\\n      // No scheduled work. Exit.\\n      prevRAFTime = -1;\\n      prevRAFInterval = -1;\\n      isRAFLoopRunning = false;\\n      return;\\n    } // Eagerly schedule the next animation callback at the beginning of the\\n    // frame. If the scheduler queue is not empty at the end of the frame, it\\n    // will continue flushing inside that callback. If the queue *is* empty,\\n    // then it will exit immediately. Posting the callback at the start of the\\n    // frame ensures it's fired within the earliest possible frame. If we\\n    // waited until the end of the frame to post the callback, we risk the\\n    // browser skipping a frame and not firing the callback until the frame\\n    // after that.\\n\\n\\n    isRAFLoopRunning = true;\\n    requestAnimationFrame(function (nextRAFTime) {\\n      _clearTimeout(rAFTimeoutID);\\n\\n      onAnimationFrame(nextRAFTime);\\n    }); // requestAnimationFrame is throttled when the tab is backgrounded. We\\n    // don't want to stop working entirely. So we'll fallback to a timeout loop.\\n    // TODO: Need a better heuristic for backgrounded work.\\n\\n    var onTimeout = function () {\\n      frameDeadline = exports.unstable_now() + frameLength / 2;\\n      performWorkUntilDeadline();\\n      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\\n    };\\n\\n    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\\n\\n    if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check\\n    // could fail if two rAFs fire in the same frame.\\n    rAFTime - prevRAFTime > 0.1) {\\n      var rAFInterval = rAFTime - prevRAFTime;\\n\\n      if (!fpsLocked && prevRAFInterval !== -1) {\\n        // We've observed two consecutive frame intervals. We'll use this to\\n        // dynamically adjust the frame rate.\\n        //\\n        // If one frame goes long, then the next one can be short to catch up.\\n        // If two frames are short in a row, then that's an indication that we\\n        // actually have a higher frame rate than what we're currently\\n        // optimizing. For example, if we're running on 120hz display or 90hz VR\\n        // display. Take the max of the two in case one of them was an anomaly\\n        // due to missed frame deadlines.\\n        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\\n          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\\n\\n          if (frameLength < 8.33) {\\n            // Defensive coding. We don't support higher frame rates than 120hz.\\n            // If the calculated frame length gets lower than 8, it is probably\\n            // a bug.\\n            frameLength = 8.33;\\n          }\\n        }\\n      }\\n\\n      prevRAFInterval = rAFInterval;\\n    }\\n\\n    prevRAFTime = rAFTime;\\n    frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.\\n\\n    port.postMessage(null);\\n  };\\n\\n  requestHostCallback = function (callback) {\\n    scheduledHostCallback = callback;\\n\\n    if (enableMessageLoopImplementation) {\\n      if (!isMessageLoopRunning) {\\n        isMessageLoopRunning = true;\\n        port.postMessage(null);\\n      }\\n    } else {\\n      if (!isRAFLoopRunning) {\\n        // Start a rAF loop.\\n        isRAFLoopRunning = true;\\n        requestAnimationFrame(function (rAFTime) {\\n          onAnimationFrame(rAFTime);\\n        });\\n      }\\n    }\\n  };\\n\\n  requestHostTimeout = function (callback, ms) {\\n    taskTimeoutID = _setTimeout(function () {\\n      callback(exports.unstable_now());\\n    }, ms);\\n  };\\n\\n  cancelHostTimeout = function () {\\n    _clearTimeout(taskTimeoutID);\\n\\n    taskTimeoutID = -1;\\n  };\\n}\\n\\nfunction push(heap, node) {\\n  var index = heap.length;\\n  heap.push(node);\\n  siftUp(heap, node, index);\\n}\\nfunction peek(heap) {\\n  var first = heap[0];\\n  return first === undefined ? null : first;\\n}\\nfunction pop(heap) {\\n  var first = heap[0];\\n\\n  if (first !== undefined) {\\n    var last = heap.pop();\\n\\n    if (last !== first) {\\n      heap[0] = last;\\n      siftDown(heap, last, 0);\\n    }\\n\\n    return first;\\n  } else {\\n    return null;\\n  }\\n}\\n\\nfunction siftUp(heap, node, i) {\\n  var index = i;\\n\\n  while (true) {\\n    var parentIndex = Math.floor((index - 1) / 2);\\n    var parent = heap[parentIndex];\\n\\n    if (parent !== undefined && compare(parent, node) > 0) {\\n      // The parent is larger. Swap positions.\\n      heap[parentIndex] = node;\\n      heap[index] = parent;\\n      index = parentIndex;\\n    } else {\\n      // The parent is smaller. Exit.\\n      return;\\n    }\\n  }\\n}\\n\\nfunction siftDown(heap, node, i) {\\n  var index = i;\\n  var length = heap.length;\\n\\n  while (index < length) {\\n    var leftIndex = (index + 1) * 2 - 1;\\n    var left = heap[leftIndex];\\n    var rightIndex = leftIndex + 1;\\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\\n\\n    if (left !== undefined && compare(left, node) < 0) {\\n      if (right !== undefined && compare(right, left) < 0) {\\n        heap[index] = right;\\n        heap[rightIndex] = node;\\n        index = rightIndex;\\n      } else {\\n        heap[index] = left;\\n        heap[leftIndex] = node;\\n        index = leftIndex;\\n      }\\n    } else if (right !== undefined && compare(right, node) < 0) {\\n      heap[index] = right;\\n      heap[rightIndex] = node;\\n      index = rightIndex;\\n    } else {\\n      // Neither child is smaller. Exit.\\n      return;\\n    }\\n  }\\n}\\n\\nfunction compare(a, b) {\\n  // Compare sort index first, then task id.\\n  var diff = a.sortIndex - b.sortIndex;\\n  return diff !== 0 ? diff : a.id - b.id;\\n}\\n\\n// TODO: Use symbols?\\nvar NoPriority = 0;\\nvar ImmediatePriority = 1;\\nvar UserBlockingPriority = 2;\\nvar NormalPriority = 3;\\nvar LowPriority = 4;\\nvar IdlePriority = 5;\\n\\nvar runIdCounter = 0;\\nvar mainThreadIdCounter = 0;\\nvar profilingStateSize = 4;\\nvar sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer\\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\\n: null;\\nvar profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\\n\\nvar PRIORITY = 0;\\nvar CURRENT_TASK_ID = 1;\\nvar CURRENT_RUN_ID = 2;\\nvar QUEUE_SIZE = 3;\\n\\nif (enableProfiling) {\\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\\n  // array might include canceled tasks.\\n\\n  profilingState[QUEUE_SIZE] = 0;\\n  profilingState[CURRENT_TASK_ID] = 0;\\n} // Bytes per element is 4\\n\\n\\nvar INITIAL_EVENT_LOG_SIZE = 131072;\\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\\n\\nvar eventLogSize = 0;\\nvar eventLogBuffer = null;\\nvar eventLog = null;\\nvar eventLogIndex = 0;\\nvar TaskStartEvent = 1;\\nvar TaskCompleteEvent = 2;\\nvar TaskErrorEvent = 3;\\nvar TaskCancelEvent = 4;\\nvar TaskRunEvent = 5;\\nvar TaskYieldEvent = 6;\\nvar SchedulerSuspendEvent = 7;\\nvar SchedulerResumeEvent = 8;\\n\\nfunction logEvent(entries) {\\n  if (eventLog !== null) {\\n    var offset = eventLogIndex;\\n    eventLogIndex += entries.length;\\n\\n    if (eventLogIndex + 1 > eventLogSize) {\\n      eventLogSize *= 2;\\n\\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\\n        console.error(\\\"Scheduler Profiling: Event log exceeded maximum size. Don't \\\" + 'forget to call `stopLoggingProfilingEvents()`.');\\n        stopLoggingProfilingEvents();\\n        return;\\n      }\\n\\n      var newEventLog = new Int32Array(eventLogSize * 4);\\n      newEventLog.set(eventLog);\\n      eventLogBuffer = newEventLog.buffer;\\n      eventLog = newEventLog;\\n    }\\n\\n    eventLog.set(entries, offset);\\n  }\\n}\\n\\nfunction startLoggingProfilingEvents() {\\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\\n  eventLog = new Int32Array(eventLogBuffer);\\n  eventLogIndex = 0;\\n}\\nfunction stopLoggingProfilingEvents() {\\n  var buffer = eventLogBuffer;\\n  eventLogSize = 0;\\n  eventLogBuffer = null;\\n  eventLog = null;\\n  eventLogIndex = 0;\\n  return buffer;\\n}\\nfunction markTaskStart(task, time) {\\n  if (enableProfiling) {\\n    profilingState[QUEUE_SIZE]++;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskStartEvent, time, task.id, task.priorityLevel]);\\n    }\\n  }\\n}\\nfunction markTaskCompleted(task, time) {\\n  if (enableProfiling) {\\n    profilingState[PRIORITY] = NoPriority;\\n    profilingState[CURRENT_TASK_ID] = 0;\\n    profilingState[QUEUE_SIZE]--;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskCompleteEvent, time, task.id]);\\n    }\\n  }\\n}\\nfunction markTaskCanceled(task, time) {\\n  if (enableProfiling) {\\n    profilingState[QUEUE_SIZE]--;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskCancelEvent, time, task.id]);\\n    }\\n  }\\n}\\nfunction markTaskErrored(task, time) {\\n  if (enableProfiling) {\\n    profilingState[PRIORITY] = NoPriority;\\n    profilingState[CURRENT_TASK_ID] = 0;\\n    profilingState[QUEUE_SIZE]--;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskErrorEvent, time, task.id]);\\n    }\\n  }\\n}\\nfunction markTaskRun(task, time) {\\n  if (enableProfiling) {\\n    runIdCounter++;\\n    profilingState[PRIORITY] = task.priorityLevel;\\n    profilingState[CURRENT_TASK_ID] = task.id;\\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskRunEvent, time, task.id, runIdCounter]);\\n    }\\n  }\\n}\\nfunction markTaskYield(task, time) {\\n  if (enableProfiling) {\\n    profilingState[PRIORITY] = NoPriority;\\n    profilingState[CURRENT_TASK_ID] = 0;\\n    profilingState[CURRENT_RUN_ID] = 0;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskYieldEvent, time, task.id, runIdCounter]);\\n    }\\n  }\\n}\\nfunction markSchedulerSuspended(time) {\\n  if (enableProfiling) {\\n    mainThreadIdCounter++;\\n\\n    if (eventLog !== null) {\\n      logEvent([SchedulerSuspendEvent, time, mainThreadIdCounter]);\\n    }\\n  }\\n}\\nfunction markSchedulerUnsuspended(time) {\\n  if (enableProfiling) {\\n    if (eventLog !== null) {\\n      logEvent([SchedulerResumeEvent, time, mainThreadIdCounter]);\\n    }\\n  }\\n}\\n\\n/* eslint-disable no-var */\\n// Math.pow(2, 30) - 1\\n// 0b111111111111111111111111111111\\n\\nvar maxSigned31BitInt = 1073741823; // Times out immediately\\n\\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\\n\\nvar USER_BLOCKING_PRIORITY = 250;\\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\\n\\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\\n\\nvar taskQueue = [];\\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\\n\\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\\n\\nvar isSchedulerPaused = false;\\nvar currentTask = null;\\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\\n\\nvar isPerformingWork = false;\\nvar isHostCallbackScheduled = false;\\nvar isHostTimeoutScheduled = false;\\n\\nfunction advanceTimers(currentTime) {\\n  // Check for tasks that are no longer delayed and add them to the queue.\\n  var timer = peek(timerQueue);\\n\\n  while (timer !== null) {\\n    if (timer.callback === null) {\\n      // Timer was cancelled.\\n      pop(timerQueue);\\n    } else if (timer.startTime <= currentTime) {\\n      // Timer fired. Transfer to the task queue.\\n      pop(timerQueue);\\n      timer.sortIndex = timer.expirationTime;\\n      push(taskQueue, timer);\\n\\n      if (enableProfiling) {\\n        markTaskStart(timer, currentTime);\\n        timer.isQueued = true;\\n      }\\n    } else {\\n      // Remaining timers are pending.\\n      return;\\n    }\\n\\n    timer = peek(timerQueue);\\n  }\\n}\\n\\nfunction handleTimeout(currentTime) {\\n  isHostTimeoutScheduled = false;\\n  advanceTimers(currentTime);\\n\\n  if (!isHostCallbackScheduled) {\\n    if (peek(taskQueue) !== null) {\\n      isHostCallbackScheduled = true;\\n      requestHostCallback(flushWork);\\n    } else {\\n      var firstTimer = peek(timerQueue);\\n\\n      if (firstTimer !== null) {\\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\n      }\\n    }\\n  }\\n}\\n\\nfunction flushWork(hasTimeRemaining, initialTime) {\\n  if (enableProfiling) {\\n    markSchedulerUnsuspended(initialTime);\\n  } // We'll need a host callback the next time work is scheduled.\\n\\n\\n  isHostCallbackScheduled = false;\\n\\n  if (isHostTimeoutScheduled) {\\n    // We scheduled a timeout but it's no longer needed. Cancel it.\\n    isHostTimeoutScheduled = false;\\n    cancelHostTimeout();\\n  }\\n\\n  isPerformingWork = true;\\n  var previousPriorityLevel = currentPriorityLevel;\\n\\n  try {\\n    if (enableProfiling) {\\n      try {\\n        return workLoop(hasTimeRemaining, initialTime);\\n      } catch (error) {\\n        if (currentTask !== null) {\\n          var currentTime = exports.unstable_now();\\n          markTaskErrored(currentTask, currentTime);\\n          currentTask.isQueued = false;\\n        }\\n\\n        throw error;\\n      }\\n    } else {\\n      // No catch in prod codepath.\\n      return workLoop(hasTimeRemaining, initialTime);\\n    }\\n  } finally {\\n    currentTask = null;\\n    currentPriorityLevel = previousPriorityLevel;\\n    isPerformingWork = false;\\n\\n    if (enableProfiling) {\\n      var _currentTime = exports.unstable_now();\\n\\n      markSchedulerSuspended(_currentTime);\\n    }\\n  }\\n}\\n\\nfunction workLoop(hasTimeRemaining, initialTime) {\\n  var currentTime = initialTime;\\n  advanceTimers(currentTime);\\n  currentTask = peek(taskQueue);\\n\\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\\n      // This currentTask hasn't expired, and we've reached the deadline.\\n      break;\\n    }\\n\\n    var callback = currentTask.callback;\\n\\n    if (callback !== null) {\\n      currentTask.callback = null;\\n      currentPriorityLevel = currentTask.priorityLevel;\\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\\n      markTaskRun(currentTask, currentTime);\\n      var continuationCallback = callback(didUserCallbackTimeout);\\n      currentTime = exports.unstable_now();\\n\\n      if (typeof continuationCallback === 'function') {\\n        currentTask.callback = continuationCallback;\\n        markTaskYield(currentTask, currentTime);\\n      } else {\\n        if (enableProfiling) {\\n          markTaskCompleted(currentTask, currentTime);\\n          currentTask.isQueued = false;\\n        }\\n\\n        if (currentTask === peek(taskQueue)) {\\n          pop(taskQueue);\\n        }\\n      }\\n\\n      advanceTimers(currentTime);\\n    } else {\\n      pop(taskQueue);\\n    }\\n\\n    currentTask = peek(taskQueue);\\n  } // Return whether there's additional work\\n\\n\\n  if (currentTask !== null) {\\n    return true;\\n  } else {\\n    var firstTimer = peek(timerQueue);\\n\\n    if (firstTimer !== null) {\\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\n    }\\n\\n    return false;\\n  }\\n}\\n\\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\\n  switch (priorityLevel) {\\n    case ImmediatePriority:\\n    case UserBlockingPriority:\\n    case NormalPriority:\\n    case LowPriority:\\n    case IdlePriority:\\n      break;\\n\\n    default:\\n      priorityLevel = NormalPriority;\\n  }\\n\\n  var previousPriorityLevel = currentPriorityLevel;\\n  currentPriorityLevel = priorityLevel;\\n\\n  try {\\n    return eventHandler();\\n  } finally {\\n    currentPriorityLevel = previousPriorityLevel;\\n  }\\n}\\n\\nfunction unstable_next(eventHandler) {\\n  var priorityLevel;\\n\\n  switch (currentPriorityLevel) {\\n    case ImmediatePriority:\\n    case UserBlockingPriority:\\n    case NormalPriority:\\n      // Shift down to normal priority\\n      priorityLevel = NormalPriority;\\n      break;\\n\\n    default:\\n      // Anything lower than normal priority should remain at the current level.\\n      priorityLevel = currentPriorityLevel;\\n      break;\\n  }\\n\\n  var previousPriorityLevel = currentPriorityLevel;\\n  currentPriorityLevel = priorityLevel;\\n\\n  try {\\n    return eventHandler();\\n  } finally {\\n    currentPriorityLevel = previousPriorityLevel;\\n  }\\n}\\n\\nfunction unstable_wrapCallback(callback) {\\n  var parentPriorityLevel = currentPriorityLevel;\\n  return function () {\\n    // This is a fork of runWithPriority, inlined for performance.\\n    var previousPriorityLevel = currentPriorityLevel;\\n    currentPriorityLevel = parentPriorityLevel;\\n\\n    try {\\n      return callback.apply(this, arguments);\\n    } finally {\\n      currentPriorityLevel = previousPriorityLevel;\\n    }\\n  };\\n}\\n\\nfunction timeoutForPriorityLevel(priorityLevel) {\\n  switch (priorityLevel) {\\n    case ImmediatePriority:\\n      return IMMEDIATE_PRIORITY_TIMEOUT;\\n\\n    case UserBlockingPriority:\\n      return USER_BLOCKING_PRIORITY;\\n\\n    case IdlePriority:\\n      return IDLE_PRIORITY;\\n\\n    case LowPriority:\\n      return LOW_PRIORITY_TIMEOUT;\\n\\n    case NormalPriority:\\n    default:\\n      return NORMAL_PRIORITY_TIMEOUT;\\n  }\\n}\\n\\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\\n  var currentTime = exports.unstable_now();\\n  var startTime;\\n  var timeout;\\n\\n  if (typeof options === 'object' && options !== null) {\\n    var delay = options.delay;\\n\\n    if (typeof delay === 'number' && delay > 0) {\\n      startTime = currentTime + delay;\\n    } else {\\n      startTime = currentTime;\\n    }\\n\\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\\n  } else {\\n    timeout = timeoutForPriorityLevel(priorityLevel);\\n    startTime = currentTime;\\n  }\\n\\n  var expirationTime = startTime + timeout;\\n  var newTask = {\\n    id: taskIdCounter++,\\n    callback: callback,\\n    priorityLevel: priorityLevel,\\n    startTime: startTime,\\n    expirationTime: expirationTime,\\n    sortIndex: -1\\n  };\\n\\n  if (enableProfiling) {\\n    newTask.isQueued = false;\\n  }\\n\\n  if (startTime > currentTime) {\\n    // This is a delayed task.\\n    newTask.sortIndex = startTime;\\n    push(timerQueue, newTask);\\n\\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\\n      // All tasks are delayed, and this is the task with the earliest delay.\\n      if (isHostTimeoutScheduled) {\\n        // Cancel an existing timeout.\\n        cancelHostTimeout();\\n      } else {\\n        isHostTimeoutScheduled = true;\\n      } // Schedule a timeout.\\n\\n\\n      requestHostTimeout(handleTimeout, startTime - currentTime);\\n    }\\n  } else {\\n    newTask.sortIndex = expirationTime;\\n    push(taskQueue, newTask);\\n\\n    if (enableProfiling) {\\n      markTaskStart(newTask, currentTime);\\n      newTask.isQueued = true;\\n    } // Schedule a host callback, if needed. If we're already performing work,\\n    // wait until the next time we yield.\\n\\n\\n    if (!isHostCallbackScheduled && !isPerformingWork) {\\n      isHostCallbackScheduled = true;\\n      requestHostCallback(flushWork);\\n    }\\n  }\\n\\n  return newTask;\\n}\\n\\nfunction unstable_pauseExecution() {\\n  isSchedulerPaused = true;\\n}\\n\\nfunction unstable_continueExecution() {\\n  isSchedulerPaused = false;\\n\\n  if (!isHostCallbackScheduled && !isPerformingWork) {\\n    isHostCallbackScheduled = true;\\n    requestHostCallback(flushWork);\\n  }\\n}\\n\\nfunction unstable_getFirstCallbackNode() {\\n  return peek(taskQueue);\\n}\\n\\nfunction unstable_cancelCallback(task) {\\n  if (enableProfiling) {\\n    if (task.isQueued) {\\n      var currentTime = exports.unstable_now();\\n      markTaskCanceled(task, currentTime);\\n      task.isQueued = false;\\n    }\\n  } // Null out the callback to indicate the task has been canceled. (Can't\\n  // remove from the queue because you can't remove arbitrary nodes from an\\n  // array based heap, only the first one.)\\n\\n\\n  task.callback = null;\\n}\\n\\nfunction unstable_getCurrentPriorityLevel() {\\n  return currentPriorityLevel;\\n}\\n\\nfunction unstable_shouldYield() {\\n  var currentTime = exports.unstable_now();\\n  advanceTimers(currentTime);\\n  var firstTask = peek(taskQueue);\\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\\n}\\n\\nvar unstable_requestPaint = requestPaint;\\nvar unstable_Profiling = enableProfiling ? {\\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\\n  sharedProfilingBuffer: sharedProfilingBuffer\\n} : null;\\n\\nexports.unstable_ImmediatePriority = ImmediatePriority;\\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\\nexports.unstable_NormalPriority = NormalPriority;\\nexports.unstable_IdlePriority = IdlePriority;\\nexports.unstable_LowPriority = LowPriority;\\nexports.unstable_runWithPriority = unstable_runWithPriority;\\nexports.unstable_next = unstable_next;\\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\\nexports.unstable_cancelCallback = unstable_cancelCallback;\\nexports.unstable_wrapCallback = unstable_wrapCallback;\\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\\nexports.unstable_shouldYield = unstable_shouldYield;\\nexports.unstable_requestPaint = unstable_requestPaint;\\nexports.unstable_continueExecution = unstable_continueExecution;\\nexports.unstable_pauseExecution = unstable_pauseExecution;\\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\\nexports.unstable_Profiling = unstable_Profiling;\\n  })();\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"push\",\"heap\",\"node\",\"index\",\"length\",\"parentIndex\",\"Math\",\"floor\",\"parent\",\"undefined\",\"compare\",\"peek\",\"first\",\"pop\",\"last\",\"i\",\"leftIndex\",\"left\",\"rightIndex\",\"right\",\"a\",\"b\",\"diff\",\"sortIndex\",\"id\",\"logEvent\",\"entries\",\"eventLog\",\"offset\",\"eventLogIndex\",\"eventLogSize\",\"MAX_EVENT_LOG_SIZE\",\"console\",\"error\",\"stopLoggingProfilingEvents\",\"newEventLog\",\"Int32Array\",\"set\",\"eventLogBuffer\",\"buffer\",\"advanceTimers\",\"currentTime\",\"timer\",\"timerQueue\",\"callback\",\"startTime\",\"expirationTime\",\"taskQueue\",\"profilingState\",\"QUEUE_SIZE\",\"TaskStartEvent\",\"time\",\"task\",\"priorityLevel\",\"isQueued\",\"handleTimeout\",\"isHostTimeoutScheduled\",\"isHostCallbackScheduled\",\"requestHostCallback\",\"flushWork\",\"firstTimer\",\"requestHostTimeout\",\"hasTimeRemaining\",\"initialTime\",\"SchedulerResumeEvent\",\"mainThreadIdCounter\",\"cancelHostTimeout\",\"isPerformingWork\",\"previousPriorityLevel\",\"currentPriorityLevel\",\"currentTask\",\"shouldYieldToHost\",\"didUserCallbackTimeout\",\"runIdCounter\",\"PRIORITY\",\"CURRENT_TASK_ID\",\"CURRENT_RUN_ID\",\"TaskRunEvent\",\"continuationCallback\",\"unstable_now\",\"NoPriority\",\"TaskYieldEvent\",\"TaskCompleteEvent\",\"TaskErrorEvent\",\"_currentTime\",\"SchedulerSuspendEvent\",\"timeoutForPriorityLevel\",\"ImmediatePriority\",\"IMMEDIATE_PRIORITY_TIMEOUT\",\"UserBlockingPriority\",\"USER_BLOCKING_PRIORITY\",\"IdlePriority\",\"maxSigned31BitInt\",\"LowPriority\",\"LOW_PRIORITY_TIMEOUT\",\"NORMAL_PRIORITY_TIMEOUT\",\"Object\",\"defineProperty\",\"value\",\"window\",\"MessageChannel\",\"_callback\",\"_timeoutID\",\"_flushCallback\",\"hasRemainingTime\",\"e\",\"setTimeout\",\"Date\",\"now\",\"exports.unstable_now\",\"cb\",\"ms\",\"clearTimeout\",\"requestPaint\",\"unstable_forceFrameRate\",\"exports.unstable_forceFrameRate\",\"performance\",\"_Date\",\"_setTimeout\",\"_clearTimeout\",\"requestAnimationFrame\",\"cancelAnimationFrame\",\"_initialTime\",\"isMessageLoopRunning\",\"scheduledHostCallback\",\"taskTimeoutID\",\"frameLength\",\"frameDeadline\",\"fps\",\"channel\",\"port\",\"port2\",\"port1\",\"onmessage\",\"performWorkUntilDeadline\",\"hasMoreWork\",\"postMessage\",\"sharedProfilingBuffer\",\"SharedArrayBuffer\",\"profilingStateSize\",\"BYTES_PER_ELEMENT\",\"ArrayBuffer\",\"taskIdCounter\",\"NormalPriority\",\"unstable_Profiling\",\"startLoggingProfilingEvents\",\"INITIAL_EVENT_LOG_SIZE\",\"unstable_ImmediatePriority\",\"unstable_UserBlockingPriority\",\"unstable_NormalPriority\",\"unstable_IdlePriority\",\"unstable_LowPriority\",\"unstable_runWithPriority\",\"eventHandler\",\"unstable_next\",\"unstable_scheduleCallback\",\"options\",\"delay\",\"timeout\",\"newTask\",\"unstable_cancelCallback\",\"TaskCancelEvent\",\"unstable_wrapCallback\",\"parentPriorityLevel\",\"apply\",\"arguments\",\"unstable_getCurrentPriorityLevel\",\"unstable_shouldYield\",\"firstTask\",\"unstable_requestPaint\",\"unstable_continueExecution\",\"unstable_pauseExecution\",\"unstable_getFirstCallbackNode\"]\n}\n"]