["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/abnf.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$abnf=function(global,require,module,exports){module.exports=function(hljs){return{illegal:\"[!@#$^\\x26',?+~`|:]\",keywords:\"ALPHA BIT CHAR CR CRLF CTL DIGIT DQUOTE HEXDIG HTAB LF LWSP OCTET SP VCHAR WSP\",contains:[{begin:\"^[a-zA-Z][a-zA-Z0-9-]*\\\\s*\\x3d\",returnBegin:!0,end:/=/,relevance:0,contains:[{className:\"attribute\",begin:\"^[a-zA-Z][a-zA-Z0-9-]*\"}]},hljs.COMMENT(\";\",\"$\"),{className:\"symbol\",begin:/%b[0-1]+(-[0-1]+|(\\.[0-1]+)+){0,1}/},\n{className:\"symbol\",begin:/%d[0-9]+(-[0-9]+|(\\.[0-9]+)+){0,1}/},{className:\"symbol\",begin:/%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+){0,1}/},{className:\"symbol\",begin:/%[si]/},hljs.QUOTE_STRING_MODE,hljs.NUMBER_MODE]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$abnf\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n    var regexes = {\n        ruleDeclaration: \"^[a-zA-Z][a-zA-Z0-9-]*\",\n        unexpectedChars: \"[!@#$^&',?+~`|:]\"\n    };\n\n    var keywords = [\n        \"ALPHA\",\n        \"BIT\",\n        \"CHAR\",\n        \"CR\",\n        \"CRLF\",\n        \"CTL\",\n        \"DIGIT\",\n        \"DQUOTE\",\n        \"HEXDIG\",\n        \"HTAB\",\n        \"LF\",\n        \"LWSP\",\n        \"OCTET\",\n        \"SP\",\n        \"VCHAR\",\n        \"WSP\"\n    ];\n\n    var commentMode = hljs.COMMENT(\";\", \"$\");\n\n    var terminalBinaryMode = {\n        className: \"symbol\",\n        begin: /%b[0-1]+(-[0-1]+|(\\.[0-1]+)+){0,1}/\n    };\n\n    var terminalDecimalMode = {\n        className: \"symbol\",\n        begin: /%d[0-9]+(-[0-9]+|(\\.[0-9]+)+){0,1}/\n    };\n\n    var terminalHexadecimalMode = {\n        className: \"symbol\",\n        begin: /%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+){0,1}/,\n    };\n\n    var caseSensitivityIndicatorMode = {\n        className: \"symbol\",\n        begin: /%[si]/\n    };\n\n    var ruleDeclarationMode = {\n        begin: regexes.ruleDeclaration + '\\\\s*=',\n        returnBegin: true,\n        end: /=/,\n        relevance: 0,\n        contains: [{className: \"attribute\", begin: regexes.ruleDeclaration}]\n    };\n\n    return {\n      illegal: regexes.unexpectedChars,\n      keywords: keywords.join(\" \"),\n      contains: [\n          ruleDeclarationMode,\n          commentMode,\n          terminalBinaryMode,\n          terminalDecimalMode,\n          terminalHexadecimalMode,\n          caseSensitivityIndicatorMode,\n          hljs.QUOTE_STRING_MODE,\n          hljs.NUMBER_MODE\n      ]\n    };\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["begin","className","contains","relevance","returnBegin","keywords","illegal","end"]],"~:compiled-at",1570444216309,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$abnf.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACpHD,MAAAC,QAAA,CAAiBC,QAAQ,CAACC,IAAD,CAAO,CAuD5B,MAAO,CACLC,QArDmBC,qBAoDd,CAELC,SAnCE,gFAiCG,CAGLC,SAAU,CAXcC,CACtBC,MAAO,gCADeD,CAEtBE,YAAa,CAAA,CAFSF,CAGtBG,IAAK,GAHiBH,CAItBI,UAAW,CAJWJ,CAKtBD,SAAU,CAAC,CAACM,UAAW,WAAZ,CAAyBJ,MAlDnBK,wBAkDN,CAAD,CALYN,CAWd,CAjCML,IAAAY,QAAAC,CAAa,GAAbA,CAAkB,GAAlBA,CAiCN,CA/BaC,CACrBJ,UAAW,QADUI,CAErBR,MAAO,oCAFcQ,CA+Bb;AA1BcC,CACtBL,UAAW,QADWK,CAEtBT,MAAO,oCAFeS,CA0Bd,CArBkBC,CAC1BN,UAAW,QADeM,CAE1BV,MAAO,6CAFmBU,CAqBlB,CAhBuBC,CAC/BP,UAAW,QADoBO,CAE/BX,MAAO,OAFwBW,CAgBvB,CAONjB,IAAAkB,kBAPM,CAQNlB,IAAAmB,YARM,CAHL,CAvDqB,CADoF;\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/abnf.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$abnf\\\"] = function(global,require,module,exports) {\\nmodule.exports = function(hljs) {\\n    var regexes = {\\n        ruleDeclaration: \\\"^[a-zA-Z][a-zA-Z0-9-]*\\\",\\n        unexpectedChars: \\\"[!@#$^&',?+~`|:]\\\"\\n    };\\n\\n    var keywords = [\\n        \\\"ALPHA\\\",\\n        \\\"BIT\\\",\\n        \\\"CHAR\\\",\\n        \\\"CR\\\",\\n        \\\"CRLF\\\",\\n        \\\"CTL\\\",\\n        \\\"DIGIT\\\",\\n        \\\"DQUOTE\\\",\\n        \\\"HEXDIG\\\",\\n        \\\"HTAB\\\",\\n        \\\"LF\\\",\\n        \\\"LWSP\\\",\\n        \\\"OCTET\\\",\\n        \\\"SP\\\",\\n        \\\"VCHAR\\\",\\n        \\\"WSP\\\"\\n    ];\\n\\n    var commentMode = hljs.COMMENT(\\\";\\\", \\\"$\\\");\\n\\n    var terminalBinaryMode = {\\n        className: \\\"symbol\\\",\\n        begin: /%b[0-1]+(-[0-1]+|(\\\\.[0-1]+)+){0,1}/\\n    };\\n\\n    var terminalDecimalMode = {\\n        className: \\\"symbol\\\",\\n        begin: /%d[0-9]+(-[0-9]+|(\\\\.[0-9]+)+){0,1}/\\n    };\\n\\n    var terminalHexadecimalMode = {\\n        className: \\\"symbol\\\",\\n        begin: /%x[0-9A-F]+(-[0-9A-F]+|(\\\\.[0-9A-F]+)+){0,1}/,\\n    };\\n\\n    var caseSensitivityIndicatorMode = {\\n        className: \\\"symbol\\\",\\n        begin: /%[si]/\\n    };\\n\\n    var ruleDeclarationMode = {\\n        begin: regexes.ruleDeclaration + '\\\\\\\\s*=',\\n        returnBegin: true,\\n        end: /=/,\\n        relevance: 0,\\n        contains: [{className: \\\"attribute\\\", begin: regexes.ruleDeclaration}]\\n    };\\n\\n    return {\\n      illegal: regexes.unexpectedChars,\\n      keywords: keywords.join(\\\" \\\"),\\n      contains: [\\n          ruleDeclarationMode,\\n          commentMode,\\n          terminalBinaryMode,\\n          terminalDecimalMode,\\n          terminalHexadecimalMode,\\n          caseSensitivityIndicatorMode,\\n          hljs.QUOTE_STRING_MODE,\\n          hljs.NUMBER_MODE\\n      ]\\n    };\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"module.exports\",\"hljs\",\"illegal\",\"unexpectedChars\",\"keywords\",\"contains\",\"ruleDeclarationMode\",\"begin\",\"returnBegin\",\"end\",\"relevance\",\"className\",\"ruleDeclaration\",\"COMMENT\",\"commentMode\",\"terminalBinaryMode\",\"terminalDecimalMode\",\"terminalHexadecimalMode\",\"caseSensitivityIndicatorMode\",\"QUOTE_STRING_MODE\",\"NUMBER_MODE\"]\n}\n"]