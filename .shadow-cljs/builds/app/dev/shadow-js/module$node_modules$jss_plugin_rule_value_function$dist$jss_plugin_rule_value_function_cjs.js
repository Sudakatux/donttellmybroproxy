["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js"],"~:js","shadow$provide.module$node_modules$jss_plugin_rule_value_function$dist$jss_plugin_rule_value_function_cjs=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var jss=require(\"module$node_modules$jss$dist$jss_cjs\");global=Date.now();var fnValuesNs=\"fnValues\"+global,fnRuleNs=\"fnStyle\"+ ++global;exports.default=function(){return{onCreateRule:function(name,decl,options){if(\"function\"!==typeof decl)return null;name=jss.createRule(name,{},options);name[fnRuleNs]=\ndecl;return name},onProcessStyle:function(style,rule){if(fnValuesNs in rule||fnRuleNs in rule)return style;var fnValues={},prop;for(prop in style){var value=style[prop];\"function\"===typeof value&&(delete style[prop],fnValues[prop]=value)}rule[fnValuesNs]=fnValues;return style},onUpdate:function(data,rule,sheet,options){if(sheet=rule[fnRuleNs])rule.style=sheet(data)||{};if(sheet=rule[fnValuesNs])for(var prop in sheet)rule.prop(prop,sheet[prop](data),options)}}}}","~:source","shadow$provide[\"module$node_modules$jss_plugin_rule_value_function$dist$jss_plugin_rule_value_function_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar jss = require('jss');\n\nvar now = Date.now();\nvar fnValuesNs = \"fnValues\" + now;\nvar fnRuleNs = \"fnStyle\" + ++now;\nfunction functionPlugin() {\n  return {\n    onCreateRule: function onCreateRule(name, decl, options) {\n      if (typeof decl !== 'function') return null;\n      var rule = jss.createRule(name, {}, options);\n      rule[fnRuleNs] = decl;\n      return rule;\n    },\n    onProcessStyle: function onProcessStyle(style, rule) {\n      // We need to extract function values from the declaration, so that we can keep core unaware of them.\n      // We need to do that only once.\n      // We don't need to extract functions on each style update, since this can happen only once.\n      // We don't support function values inside of function rules.\n      if (fnValuesNs in rule || fnRuleNs in rule) return style;\n      var fnValues = {};\n\n      for (var prop in style) {\n        var value = style[prop];\n        if (typeof value !== 'function') continue;\n        delete style[prop];\n        fnValues[prop] = value;\n      } // $FlowFixMe\n\n\n      rule[fnValuesNs] = fnValues;\n      return style;\n    },\n    onUpdate: function onUpdate(data, rule, sheet, options) {\n      var styleRule = rule;\n      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object\n      // will be returned from that function.\n\n      if (fnRule) {\n        // Empty object will remove all currently defined props\n        // in case function rule returns a falsy value.\n        styleRule.style = fnRule(data) || {};\n      }\n\n      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.\n\n      if (fnValues) {\n        for (var prop in fnValues) {\n          styleRule.prop(prop, fnValues[prop](data), options);\n        }\n      }\n    }\n  };\n}\n\nexports.default = functionPlugin;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$jss$dist$jss_cjs"]],"~:properties",["^5",["onUpdate","__esModule","onProcessStyle","style","value","onCreateRule","default"]],"~:compiled-at",1570448038675,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$jss_plugin_rule_value_function$dist$jss_plugin_rule_value_function_cjs.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,2FAAA,CAA+G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvJC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,IAAMN,OAAA,CAAQ,sCAAR,CAENO,OAAAA,CAAMC,IAAAD,IAAA,EACV,KAAIE,WAAa,UAAbA,CAA0BF,MAA9B,CACIG,SAAW,SAAXA,CAAuB,GAAEH,MAkD7BL,QAAAS,QAAA,CAjDAC,QAAuB,EAAG,CACxB,MAAO,CACLC,aAAcA,QAAqB,CAACC,IAAD,CAAOC,IAAP,CAAaC,OAAb,CAAsB,CACvD,GAAoB,UAApB,GAAI,MAAOD,KAAX,CAAgC,MAAO,KACnCE,KAAAA,CAAOX,GAAAY,WAAA,CAAeJ,IAAf,CAAqB,EAArB,CAAyBE,OAAzB,CACXC,KAAA,CAAKP,QAAL,CAAA;AAAiBK,IACjB,OAAOE,KAJgD,CADpD,CAOLE,eAAgBA,QAAuB,CAACC,KAAD,CAAQH,IAAR,CAAc,CAKnD,GAAIR,UAAJ,GAAkBQ,KAAlB,EAA0BP,QAA1B,GAAsCO,KAAtC,CAA4C,MAAOG,MACnD,KAAIC,SAAW,EAAf,CAESC,IAAT,KAASA,IAAT,GAAiBF,MAAjB,CAAwB,CACtB,IAAIf,MAAQe,KAAA,CAAME,IAAN,CACS,WAArB,GAAI,MAAOjB,MAAX,GACA,OAAOe,KAAA,CAAME,IAAN,CACP,CAAAD,QAAA,CAASC,IAAT,CAAA,CAAiBjB,KAFjB,CAFsB,CAQxBY,IAAA,CAAKR,UAAL,CAAA,CAAmBY,QACnB,OAAOD,MAjB4C,CAPhD,CA0BLG,SAAUA,QAAiB,CAACC,IAAD,CAAOP,IAAP,CAAaQ,KAAb,CAAoBT,OAApB,CAA6B,CAKtD,GAHIU,KAGJ,CAJgBT,IACH,CAAUP,QAAV,CAGb,CAJgBO,IAOdG,MAAA,CAAkBM,KAAA,CAAOF,IAAP,CAAlB,EAAkC,EAKpC,IAFIH,KAEJ,CAZgBJ,IAUD,CAAUR,UAAV,CAEf,CACE,IAAKa,IAAIA,IAAT,GAAiBD,MAAjB,CAbcJ,IAcZK,KAAA,CAAeA,IAAf,CAAqBD,KAAA,CAASC,IAAT,CAAA,CAAeE,IAAf,CAArB,CAA2CR,OAA3C,CAfkD,CA1BnD,CADiB,CAV6H;\",\n\"sources\":[\"node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$jss_plugin_rule_value_function$dist$jss_plugin_rule_value_function_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar jss = require('jss');\\n\\nvar now = Date.now();\\nvar fnValuesNs = \\\"fnValues\\\" + now;\\nvar fnRuleNs = \\\"fnStyle\\\" + ++now;\\nfunction functionPlugin() {\\n  return {\\n    onCreateRule: function onCreateRule(name, decl, options) {\\n      if (typeof decl !== 'function') return null;\\n      var rule = jss.createRule(name, {}, options);\\n      rule[fnRuleNs] = decl;\\n      return rule;\\n    },\\n    onProcessStyle: function onProcessStyle(style, rule) {\\n      // We need to extract function values from the declaration, so that we can keep core unaware of them.\\n      // We need to do that only once.\\n      // We don't need to extract functions on each style update, since this can happen only once.\\n      // We don't support function values inside of function rules.\\n      if (fnValuesNs in rule || fnRuleNs in rule) return style;\\n      var fnValues = {};\\n\\n      for (var prop in style) {\\n        var value = style[prop];\\n        if (typeof value !== 'function') continue;\\n        delete style[prop];\\n        fnValues[prop] = value;\\n      } // $FlowFixMe\\n\\n\\n      rule[fnValuesNs] = fnValues;\\n      return style;\\n    },\\n    onUpdate: function onUpdate(data, rule, sheet, options) {\\n      var styleRule = rule;\\n      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object\\n      // will be returned from that function.\\n\\n      if (fnRule) {\\n        // Empty object will remove all currently defined props\\n        // in case function rule returns a falsy value.\\n        styleRule.style = fnRule(data) || {};\\n      }\\n\\n      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.\\n\\n      if (fnValues) {\\n        for (var prop in fnValues) {\\n          styleRule.prop(prop, fnValues[prop](data), options);\\n        }\\n      }\\n    }\\n  };\\n}\\n\\nexports.default = functionPlugin;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"jss\",\"now\",\"Date\",\"fnValuesNs\",\"fnRuleNs\",\"default\",\"functionPlugin\",\"onCreateRule\",\"name\",\"decl\",\"options\",\"rule\",\"createRule\",\"onProcessStyle\",\"style\",\"fnValues\",\"prop\",\"onUpdate\",\"data\",\"sheet\",\"fnRule\"]\n}\n"]