["^ ","~:output",["^ ","~:js","goog.provide('zprint.config');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('zprint.sutil');\ngoog.require('clojure.set');\ngoog.require('clojure.data');\ngoog.require('zprint.spec');\ngoog.require('cljs.reader');\n/**\n * Return version of this program.\n */\nzprint.config.about = (function zprint$config$about(){\nreturn \"zprint-0.4.7\";\n});\nzprint.config.zprintrc = \".zprintrc\";\nzprint.config.zprint_keys = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477)], null);\nzprint.config.explain_hide_keys = new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"configured?\",\"configured?\",642178633),new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872),new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771),new cljs.core.Keyword(null,\"do-in-hang?\",\"do-in-hang?\",-1235364947),new cljs.core.Keyword(null,\"drop?\",\"drop?\",-2009514790),new cljs.core.Keyword(null,\"dbg-ge\",\"dbg-ge\",257927017),new cljs.core.Keyword(null,\"file?\",\"file?\",1755223728),new cljs.core.Keyword(null,\"spaces?\",\"spaces?\",1967773960),new cljs.core.Keyword(null,\"process-bang-zprint?\",\"process-bang-zprint?\",-1250782024),new cljs.core.Keyword(null,\"trim-comments?\",\"trim-comments?\",-1532658667),new cljs.core.Keyword(null,\"zipper?\",\"zipper?\",-1061271842),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"remove\",\"remove\",-131428414),new cljs.core.Keyword(null,\"return-cvec?\",\"return-cvec?\",1372433982),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"object\",\"object\",1474613949),new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052),new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),new cljs.core.Keyword(null,\"comma?\",\"comma?\",1532168963)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243),new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243),new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),new cljs.core.Keyword(null,\"value\",\"value\",305978217)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"dbg-local?\",\"dbg-local?\",-895545325),new cljs.core.Keyword(null,\"hang-adjust\",\"hang-adjust\",-613514382),new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243),new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675)], null),new cljs.core.Keyword(null,\"tuning\",\"tuning\",-48660925),new cljs.core.Keyword(null,\"perf-vs-format\",\"perf-vs-format\",-1892061514)], null);\nzprint.config.zfnstyle = cljs.core.PersistentHashMap.fromArrays([\"map\",\"binding\",\"cond->\",\"as->\",\"with-local-vars\",\"loop\",\"defn\",\"=\",\"some->\",\"if-not\",\"when-first\",\"when-some\",\"defcc\",\"fdef\",\"if-let\",\"doseq\",\"try\",\"with-redefs\",\"defc\",\"defcs\",\"fn\",\"for\",\"defrecord\",\"with-meta\",\"catch\",\"defexpect\",\"with-redefs-fn\",\"defui\",\"s/or\",\"swap!\",\"apply\",\":require\",\"cond\",\"if\",\"let\",\"defproject\",\"reify\",\"defmulti\",\"when-let\",\":import\",\"not=\",\"with-bindings\",\"doto\",\"if-some\",\"extend-protocol\",\"or\",\"case\",\"alt\",\"remove\",\"mapcat\",\"with-open\",\"with-bindings*\",\"filter\",\"condp\",\"when\",\"s/and\",\"->\",\"and\",\"defmethod\",\"do\",\"some->>\",\"fn*\",\"interpose\",\"deftest\",\"extend\",\"->>\",\"defprotocol\",\"extend-type\",\"defn-\",\"filterv\",\"def\",\"reduce\",\"dotimes\",\"proxy\",\"assoc-in\",\"assoc\",\"mapv\",\"when-not\",\"cat\",\"letfn\",\"ns\",\"deftype\",\"defmacro\"],[new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-mixin\",\"arg1-mixin\",1553512120),new cljs.core.Keyword(null,\"arg1-force-nl\",\"arg1-force-nl\",-945624718),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-mixin\",\"arg1-mixin\",1553512120),new cljs.core.Keyword(null,\"arg1-mixin\",\"arg1-mixin\",1553512120),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"gt2-force-nl\",\"gt2-force-nl\",-1746243317),new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"gt2-force-nl\",\"gt2-force-nl\",-1746243317),new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"arg1-force-nl\",\"arg1-force-nl\",-945624718),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186),new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564)]);\nzprint.config.default_zprint_options = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"old?\",\"old?\",-1129887872),new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),new cljs.core.Keyword(null,\"remove\",\"remove\",-131428414),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"max-length\",\"max-length\",-254826109),new cljs.core.Keyword(null,\"tuning\",\"tuning\",-48660925),new cljs.core.Keyword(null,\"fn-force-nl\",\"fn-force-nl\",1501458692),new cljs.core.Keyword(null,\"max-hang-depth\",\"max-hang-depth\",-915232220),new cljs.core.Keyword(null,\"future\",\"future\",1877842724),new cljs.core.Keyword(null,\"user-fn-map\",\"user-fn-map\",-908243227),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"promise\",\"promise\",1767129287),new cljs.core.Keyword(null,\"spaces?\",\"spaces?\",1967773960),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"configured?\",\"configured?\",642178633),new cljs.core.Keyword(null,\"dbg-ge\",\"dbg-ge\",257927017),new cljs.core.Keyword(null,\"width\",\"width\",-384071477),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"fn-name\",\"fn-name\",-766594004),new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"color?\",\"color?\",-1891974356),new cljs.core.Keyword(null,\"output\",\"output\",-1105869043),new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027),new cljs.core.Keyword(null,\"do-in-hang?\",\"do-in-hang?\",-1235364947),new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.Keyword(null,\"array\",\"array\",-2080713842),new cljs.core.Keyword(null,\"parse-string-all?\",\"parse-string-all?\",-744455473),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872),new cljs.core.Keyword(null,\"file?\",\"file?\",1755223728),new cljs.core.Keyword(null,\"fn-obj\",\"fn-obj\",465065936),new cljs.core.Keyword(null,\"fn-gt2-force-nl\",\"fn-gt2-force-nl\",1348579537),new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.Keyword(null,\"trim-comments?\",\"trim-comments?\",-1532658667),new cljs.core.Keyword(null,\"max-hang-span\",\"max-hang-span\",256100693),new cljs.core.Keyword(null,\"record\",\"record\",-779106859),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.Keyword(null,\"parse\",\"parse\",-1162164619),new cljs.core.Keyword(null,\"parse-string?\",\"parse-string?\",2006674325),new cljs.core.Keyword(null,\"auto-width?\",\"auto-width?\",93515862),new cljs.core.Keyword(null,\"perf-vs-format\",\"perf-vs-format\",-1892061514),new cljs.core.Keyword(null,\"style-map\",\"style-map\",1488693527),new cljs.core.Keyword(null,\"fn-gt3-force-nl\",\"fn-gt3-force-nl\",-58306985),new cljs.core.Keyword(null,\"process-bang-zprint?\",\"process-bang-zprint?\",-1250782024),new cljs.core.Keyword(null,\"additional-libraries?\",\"additional-libraries?\",-538987431),new cljs.core.Keyword(null,\"max-depth\",\"max-depth\",127060793),new cljs.core.Keyword(null,\"drop?\",\"drop?\",-2009514790),new cljs.core.Keyword(null,\"set\",\"set\",304602554),new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146),new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653),new cljs.core.Keyword(null,\"tab\",\"tab\",-559583621),new cljs.core.Keyword(null,\"max-hang-count\",\"max-hang-count\",637294812),new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892),new cljs.core.Keyword(null,\"delay\",\"delay\",-574225219),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"object\",\"object\",1474613949),new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),new cljs.core.Keyword(null,\"return-cvec?\",\"return-cvec?\",1372433982),new cljs.core.Keyword(null,\"zipper?\",\"zipper?\",-1061271842)],[true,new cljs.core.Keyword(null,\"on\",\"on\",173873944),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"fn-force-nl\",\"fn-force-nl\",1501458692),null,new cljs.core.Keyword(null,\"fn-gt2-force-nl\",\"fn-gt2-force-nl\",1348579537),null,new cljs.core.Keyword(null,\"fn-gt3-force-nl\",\"fn-gt3-force-nl\",-58306985),null,new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"modifiers\",\"modifiers\",50378834),null], null)], null),(0),(1000),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"hang-flow\",\"hang-flow\",428126548),1.1,new cljs.core.Keyword(null,\"hang-type-flow\",\"hang-type-flow\",-1585576590),1.5,new cljs.core.Keyword(null,\"hang-flow-limit\",\"hang-flow-limit\",389146586),(10),new cljs.core.Keyword(null,\"general-hang-adjust\",\"general-hang-adjust\",-1631406987),(-1),new cljs.core.Keyword(null,\"hang-if-equal-flow?\",\"hang-if-equal-flow?\",-1113113992),true], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),null,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),null,new cljs.core.Keyword(null,\"noarg1\",\"noarg1\",2031519464),null,new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),null,new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),null,new cljs.core.Keyword(null,\"arg1-force-nl\",\"arg1-force-nl\",-945624718),null,new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),null], null), null),(3),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false], null),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),(1),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),2.0,new cljs.core.Keyword(null,\"hang-size\",\"hang-size\",-347944063),(10),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057),true,new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462),true,new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),(1),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),1000.0,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(2),new cljs.core.Keyword(null,\"modifiers\",\"modifiers\",50378834),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\"static\",null], null), null),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),false], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false], null),null,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462),new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)],[false,false,(2),false,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"hang-flow\",\"hang-flow\",428126548),(4),new cljs.core.Keyword(null,\"hang-flow-limit\",\"hang-flow-limit\",389146586),(30)], null),2.0,null,(1),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),(5)], null),true]),false,null,(80),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"user-fn\",\"user-fn\",223976490),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795),new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.Keyword(null,\"hash-brace\",\"hash-brace\",-1522139685),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)],[new cljs.core.Keyword(null,\"cyan\",\"cyan\",1118839274),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"cyan\",\"cyan\",1118839274),new cljs.core.Keyword(null,\"magenta\",\"magenta\",1687937081),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449)])], null),null,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"user-fn\",\"user-fn\",223976490),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795),new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.Keyword(null,\"hash-brace\",\"hash-brace\",-1522139685),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)],[new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"purple\",\"purple\",-876021126),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"black\",\"black\",1294279647),new cljs.core.Keyword(null,\"magenta\",\"magenta\",1687937081),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"magenta\",\"magenta\",1687937081),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"purple\",\"purple\",-876021126),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"black\",\"black\",1294279647)]),true,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"focus\",\"focus\",234677911),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"zloc?\",\"zloc?\",-1457193855),false,new cljs.core.Keyword(null,\"surround\",\"surround\",2016177296),null], null),new cljs.core.Keyword(null,\"lines\",\"lines\",-700165781),null,new cljs.core.Keyword(null,\"elide\",\"elide\",-1239101386),null], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false], null),true,new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1),new cljs.core.Keyword(null,\"binding?\",\"binding?\",-1071925644),false,new cljs.core.Keyword(null,\"option-fn-first\",\"option-fn-first\",-1679196201),null,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635),false,new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052),true,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571),true,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"hex?\",\"hex?\",890937870),false,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1),new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054),true], null),false,null,null,false,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),null,new cljs.core.Keyword(null,\"gt2-force-nl\",\"gt2-force-nl\",-1746243317),null,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),null], null), null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"docstring?\",\"docstring?\",-1820749410),true,new cljs.core.Keyword(null,\"value\",\"value\",305978217),null], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462),new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)],[false,false,(2),false,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"hang-flow\",\"hang-flow\",428126548),(4),new cljs.core.Keyword(null,\"hang-flow-limit\",\"hang-flow-limit\",389146586),(30)], null),2.0,false,(1),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),(5)], null),true]),null,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"hang-size\",\"hang-size\",-347944063),new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874),new cljs.core.Keyword(null,\"constant-pair?\",\"constant-pair?\",-1009181437),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),new cljs.core.Keyword(null,\"pair-hang?\",\"pair-hang?\",-492564664),new cljs.core.Keyword(null,\"constant-pair-min\",\"constant-pair-min\",1245759721),new cljs.core.Keyword(null,\"hang-avoid\",\"hang-avoid\",-138703568),new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)],[(100),null,true,(2),2.0,true,(4),0.5,(1),true]),null,(4),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true,new cljs.core.Keyword(null,\"record-type?\",\"record-type?\",-1195765660),true,new cljs.core.Keyword(null,\"to-string?\",\"to-string?\",1452120886),false], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128),false,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054),true,new cljs.core.Keyword(null,\"inline?\",\"inline?\",-1674483791),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"interpose\",\"interpose\",576140629),null,new cljs.core.Keyword(null,\"left-space\",\"left-space\",457574289),new cljs.core.Keyword(null,\"drop\",\"drop\",364481611)], null),false,false,null,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"pair-nl\",\"pair-nl\",-252106299),new cljs.core.Keyword(null,\"community\",\"community\",1600340198),new cljs.core.Keyword(null,\"extend-nl\",\"extend-nl\",-757494042),new cljs.core.Keyword(null,\"no-hang\",\"no-hang\",-667516119),new cljs.core.Keyword(null,\"keyword-respect-nl\",\"keyword-respect-nl\",1810746249),new cljs.core.Keyword(null,\"binding-nl\",\"binding-nl\",-1642873971),new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),new cljs.core.Keyword(null,\"map-nl\",\"map-nl\",727129906),new cljs.core.Keyword(null,\"all-hang\",\"all-hang\",-1243746923),new cljs.core.Keyword(null,\"justified\",\"justified\",-547284074)],[new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),true], null)], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0)], null),new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146),cljs.core.PersistentHashMap.fromArrays([\"map\",\"cond->\",\"with-meta\",\"apply\",\"remove\",\"filter\",\"filterv\",\"reduce\",\"assoc\",\"mapv\"],[new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)]),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874),(1)], null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0)], null),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0)], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057),true,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),true], null)], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null),new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null),new cljs.core.Keyword(null,\"record\",\"record\",-779106859),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),false], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"option-fn-first\",\"option-fn-first\",-1679196201),(function (p1__49624_SHARP_,p2__49623_SHARP_){\nvar k_QMARK_ = (p2__49623_SHARP_ instanceof cljs.core.Keyword);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(k_QMARK_,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158).cljs$core$IFn$_invoke$arity$1(p1__49624_SHARP_)))){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635),k_QMARK_], null)], null);\n} else {\nreturn null;\n}\n})], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),true], null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"constant-pair-min\",\"constant-pair-min\",1245759721),(2)], null),new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054),false], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(0),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),true], null)], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null),new cljs.core.Keyword(null,\"record\",\"record\",-779106859),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),true], null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),true], null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),true], null),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),true], null)], null)]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"gt3-force-nl\",\"gt3-force-nl\",-1297517534),null,new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),null,new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),null], null), null),null,true,(1000),null,new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1),new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924),true,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497),false,new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052),true,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571),true,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054),true], null),zprint.config.zfnstyle,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"expand?\",\"expand?\",-1744295862),true,new cljs.core.Keyword(null,\"size\",\"size\",1098693007),(8)], null),(4),false,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217),false], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057),new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497),new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767),new cljs.core.Keyword(null,\"key-depth-color\",\"key-depth-color\",1448522819),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"comma?\",\"comma?\",1532168963),new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148),new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),new cljs.core.Keyword(null,\"key-value-color\",\"key-value-color\",676042889),new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462),new cljs.core.Keyword(null,\"key-ignore-silent\",\"key-ignore-silent\",-1720115060),new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372),new cljs.core.Keyword(null,\"key-ignore\",\"key-ignore\",75506668),new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),new cljs.core.Keyword(null,\"lift-ns-in-code?\",\"lift-ns-in-code?\",1444279377),new cljs.core.Keyword(null,\"hang-adjust\",\"hang-adjust\",-613514382),new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243),new cljs.core.Keyword(null,\"key-color\",\"key-color\",-209002572),new cljs.core.Keyword(null,\"lift-ns?\",\"lift-ns?\",2021372853),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924)],[false,null,false,null,(2),true,false,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"hang-flow\",\"hang-flow\",428126548),(4),new cljs.core.Keyword(null,\"hang-flow-limit\",\"hang-flow-limit\",389146586),(30)], null),1000.0,null,null,null,null,null,(1),false,(-1),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),(5)], null),null,true,true,true]),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),(1),new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052),true,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571),true], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),new cljs.core.Keyword(null,\"comma?\",\"comma?\",1532168963),new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559),new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462),new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372),new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424),new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854),new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924)],[null,(2),null,1000.0,true,null,(1),true,null]),false,false]);\nzprint.config.no_color_map = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"user-fn\",\"user-fn\",223976490),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795),new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.Keyword(null,\"hash-brace\",\"hash-brace\",-1522139685),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)],[new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)]);\nzprint.config.configured_options = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(zprint.config.default_zprint_options);\nzprint.config.explained_options = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(zprint.config.default_zprint_options);\nzprint.config.explained_sequence = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((1));\n/**\n * Take two arguments of things to merge and figure it out.\n *   Works for sets too.\n */\nzprint.config.merge_with_fn = (function zprint$config$merge_with_fn(val_in_result,val_in_latter){\nif(((cljs.core.map_QMARK_(val_in_result)) && (cljs.core.map_QMARK_(val_in_latter)))){\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(zprint.config.merge_with_fn,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([val_in_result,val_in_latter], 0));\n} else {\nif(((cljs.core.set_QMARK_(val_in_result)) && (cljs.core.set_QMARK_(val_in_latter)))){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,val_in_result,cljs.core.seq(val_in_latter));\n} else {\nreturn val_in_latter;\n\n}\n}\n});\n/**\n * Do a merge of maps all the way down.\n */\nzprint.config.merge_deep = (function zprint$config$merge_deep(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___49777 = arguments.length;\nvar i__4731__auto___49778 = (0);\nwhile(true){\nif((i__4731__auto___49778 < len__4730__auto___49777)){\nargs__4736__auto__.push((arguments[i__4731__auto___49778]));\n\nvar G__49779 = (i__4731__auto___49778 + (1));\ni__4731__auto___49778 = G__49779;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nzprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic = (function (maps){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.merge_with,zprint.config.merge_with_fn,maps);\n});\n\nzprint.config.merge_deep.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nzprint.config.merge_deep.cljs$lang$applyTo = (function (seq49625){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq49625));\n});\n\n/**\n * Take two arguments of things to merge and figure it out.\n */\nzprint.config.merge_with_fn_doc = (function zprint$config$merge_with_fn_doc(doc_string,val_in_result,val_in_latter){\nif(((cljs.core.map_QMARK_(val_in_result)) && (cljs.core.map_QMARK_(val_in_latter)))){\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.config.merge_with_fn_doc,doc_string),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([val_in_result,val_in_latter], 0));\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"from\",\"from\",1815293044),doc_string,new cljs.core.Keyword(null,\"value\",\"value\",305978217),val_in_latter], null);\n}\n});\n/**\n * Do a merge of maps all the way down, keeping track of where every\n *   value came from.\n */\nzprint.config.merge_deep_doc = (function zprint$config$merge_deep_doc(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___49780 = arguments.length;\nvar i__4731__auto___49781 = (0);\nwhile(true){\nif((i__4731__auto___49781 < len__4730__auto___49780)){\nargs__4736__auto__.push((arguments[i__4731__auto___49781]));\n\nvar G__49782 = (i__4731__auto___49781 + (1));\ni__4731__auto___49781 = G__49782;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn zprint.config.merge_deep_doc.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nzprint.config.merge_deep_doc.cljs$core$IFn$_invoke$arity$variadic = (function (doc_string,maps){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.merge_with,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.config.merge_with_fn_doc,doc_string),maps);\n});\n\nzprint.config.merge_deep_doc.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nzprint.config.merge_deep_doc.cljs$lang$applyTo = (function (seq49629){\nvar G__49630 = cljs.core.first(seq49629);\nvar seq49629__$1 = cljs.core.next(seq49629);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__49630,seq49629__$1);\n});\n\n/**\n * Remove a single key from a map or remove a series of\n *   keys from an internal map.\n */\nzprint.config.remove_key = (function zprint$config$remove_key(m,k){\nif(cljs.core.coll_QMARK_(k)){\nvar map_key = cljs.core.first(k);\nvar keys_to_remove = cljs.core.next(k);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,map_key,(function (){var G__49635 = (m.cljs$core$IFn$_invoke$arity$1 ? m.cljs$core$IFn$_invoke$arity$1(map_key) : m.call(null,map_key));\nvar G__49636 = keys_to_remove;\nreturn (zprint.config.remove_keys.cljs$core$IFn$_invoke$arity$2 ? zprint.config.remove_keys.cljs$core$IFn$_invoke$arity$2(G__49635,G__49636) : zprint.config.remove_keys.call(null,G__49635,G__49636));\n})());\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,k);\n}\n});\n/**\n * Remove keys from a map at multiple levels.\n */\nzprint.config.remove_keys = (function zprint$config$remove_keys(m,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__49637_SHARP_,p2__49638_SHARP_){\nreturn zprint.config.remove_key(p1__49637_SHARP_,p2__49638_SHARP_);\n}),m,ks);\n});\n/**\n * Get the key seq for every terminal element in a map.\n */\nzprint.config.key_seq = (function zprint$config$key_seq(m){\nif(cljs.core.map_QMARK_(m)){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p__49640){\nvar vec__49641 = p__49640;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49641,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49641,(1),null);\nvar ks = (zprint.config.key_seq.cljs$core$IFn$_invoke$arity$1 ? zprint.config.key_seq.cljs$core$IFn$_invoke$arity$1(v) : zprint.config.key_seq.call(null,v));\nif(cljs.core.truth_(ks)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (ks,vec__49641,k,v){\nreturn (function (p1__49639_SHARP_){\nreturn cljs.core.cons(k,((cljs.core.coll_QMARK_(p1__49639_SHARP_))?p1__49639_SHARP_:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__49639_SHARP_], null)));\n});})(ks,vec__49641,k,v))\n,ks);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)], null);\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([m], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Given a key sequence and two maps, remove the elements of the set at\n *   the key sequence in the second map from set in the first map.\n */\nzprint.config.remove_elements = (function zprint$config$remove_elements(map_remove,map_orig,ks){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(map_orig,ks,clojure.set.difference,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(map_remove,ks));\n});\n/**\n * Take two maps, and remove all of the elemnts in the second maps sets\n *   from equivalent places in the first map.\n */\nzprint.config.remove_set_elements = (function zprint$config$remove_set_elements(map_orig,map_remove){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.config.remove_elements,map_remove),map_orig,zprint.config.key_seq(map_remove));\n});\n/**\n * Take an options map, and remove the set elements that are at the :remove\n *   key, and also remove the :remove key.\n */\nzprint.config.perform_remove = (function zprint$config$perform_remove(doc_string,doc_map,options,new_options){\nvar map_remove = new cljs.core.Keyword(null,\"remove\",\"remove\",-131428414).cljs$core$IFn$_invoke$arity$1(new_options);\nvar options_out = zprint.config.remove_set_elements(options,map_remove);\nvar remove_ks_seq = zprint.config.key_seq(map_remove);\nvar new_options_out = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new_options,new cljs.core.Keyword(null,\"remove\",\"remove\",-131428414));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [options_out,new_options_out,(zprint.config.diff_deep_ks.cljs$core$IFn$_invoke$arity$4 ? zprint.config.diff_deep_ks.cljs$core$IFn$_invoke$arity$4(doc_string,doc_map,remove_ks_seq,options_out) : zprint.config.diff_deep_ks.call(null,doc_string,doc_map,remove_ks_seq,options_out))], null);\n});\n/**\n * Given a function and map and a key, replace the value with \n *   (f leaf) or (map-leaves f m).\n */\nzprint.config.map_leaf = (function zprint$config$map_leaf(f,m,k){\nvar v = (m.cljs$core$IFn$_invoke$arity$1 ? m.cljs$core$IFn$_invoke$arity$1(k) : m.call(null,k));\nif((!(cljs.core.map_QMARK_(v)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v)));\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(zprint.config.map_leaves.cljs$core$IFn$_invoke$arity$2 ? zprint.config.map_leaves.cljs$core$IFn$_invoke$arity$2(f,v) : zprint.config.map_leaves.call(null,f,v)));\n}\n});\n/**\n * Return a map of the same shape but where every leaf value\n *   (i.e., not map value) has been replaced by the (f leaf-value).\n */\nzprint.config.map_leaves = (function zprint$config$map_leaves(f,m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.config.map_leaf,f),m,cljs.core.keys(m));\n});\n/**\n * Create a map with a :value and :set-by elements.\n */\nzprint.config.value_set_by = (function zprint$config$value_set_by(set_by,_,value){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"set-by\",\"set-by\",-1411360264),set_by,new cljs.core.Keyword(null,\"value\",\"value\",305978217),value], null);\n});\n/**\n * Update an existing doc-map with labels of everything that shows up\n *   in the ks-seq.\n */\nzprint.config.diff_deep_ks = (function zprint$config$diff_deep_ks(doc_string,doc_map,changed_key_seq,existing){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__49645_SHARP_,p2__49646_SHARP_){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(p1__49645_SHARP_,p2__49646_SHARP_,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.config.value_set_by,doc_string),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(existing,p2__49646_SHARP_));\n}),doc_map,changed_key_seq);\n});\n/**\n * Diff two maps.\n */\nzprint.config.diff_map = (function zprint$config$diff_map(before,after){\nreturn cljs.core.second(clojure.data.diff(before,after));\n});\n/**\n * Return current explained-seqence and add one to it.\n */\nzprint.config.inc_explained_sequence = (function zprint$config$inc_explained_sequence(){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(zprint.config.explained_sequence,cljs.core.inc);\n});\n/**\n * Do a simple dissoc-in for two levels.  Does not remove the\n *   second map if it is empty.\n */\nzprint.config.dissoc_two = (function zprint$config$dissoc_two(m,p__49647){\nvar vec__49648 = p__49647;\nvar k1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49648,(0),null);\nvar k2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49648,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k1,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k1),k2));\n});\n/**\n * Take an updated-map and generate calculated options\n *   from it.  Takes the updated-map and further updates\n *   it, being smart about things that were set to nil.\n */\nzprint.config.add_calculated_options = (function zprint$config$add_calculated_options(updated_map){\nvar G__49653 = updated_map;\nvar G__49653__$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(updated_map)))?cljs.core.assoc_in(G__49653,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839)], null),cljs.core.zipmap(new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(updated_map)),cljs.core.range.cljs$core$IFn$_invoke$arity$0())):G__49653);\nvar G__49653__$2 = (((((new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(updated_map)) == null)) && ((!((new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(updated_map)) == null))))))?zprint.config.dissoc_two(G__49653__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839)], null)):G__49653__$1);\nvar G__49653__$3 = (cljs.core.truth_(new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058).cljs$core$IFn$_invoke$arity$1(updated_map)))?cljs.core.assoc_in(G__49653__$2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839)], null),cljs.core.zipmap(new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058).cljs$core$IFn$_invoke$arity$1(updated_map)),cljs.core.range.cljs$core$IFn$_invoke$arity$0())):G__49653__$2);\nvar G__49653__$4 = (((((new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058).cljs$core$IFn$_invoke$arity$1(updated_map)) == null)) && ((!((new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058).cljs$core$IFn$_invoke$arity$1(updated_map)) == null))))))?zprint.config.dissoc_two(G__49653__$3,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839)], null)):G__49653__$3);\nvar G__49653__$5 = ((cljs.core.not(new cljs.core.Keyword(null,\"color?\",\"color?\",-1891974356).cljs$core$IFn$_invoke$arity$1(updated_map)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__49653__$4,new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),zprint.config.no_color_map):G__49653__$4);\nif(cljs.core.not(new cljs.core.Keyword(null,\"color?\",\"color?\",-1891974356).cljs$core$IFn$_invoke$arity$1(updated_map))){\nreturn cljs.core.assoc_in(G__49653__$5,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684)], null),zprint.config.no_color_map);\n} else {\nreturn G__49653__$5;\n}\n});\n/**\n * Replace options to be used on every call.  You must have validated\n *   these options already!\n */\nzprint.config.reset_options_BANG_ = (function zprint$config$reset_options_BANG_(var_args){\nvar G__49658 = arguments.length;\nswitch (G__49658) {\ncase 2:\nreturn zprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn zprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nzprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (updated_map,doc_map){\ncljs.core.reset_BANG_(zprint.config.configured_options,zprint.config.add_calculated_options(updated_map));\n\nif(cljs.core.truth_(doc_map)){\nreturn cljs.core.reset_BANG_(zprint.config.explained_options,doc_map);\n} else {\nreturn null;\n}\n});\n\nzprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (updated_map){\nreturn zprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$2(updated_map,null);\n});\n\nzprint.config.reset_options_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Remove any previously set options.\n */\nzprint.config.reset_default_options_BANG_ = (function zprint$config$reset_default_options_BANG_(){\ncljs.core.reset_BANG_(zprint.config.configured_options,zprint.config.default_zprint_options);\n\nreturn cljs.core.reset_BANG_(zprint.config.explained_options,zprint.config.default_zprint_options);\n});\n/**\n * Return any prevsiouly set options.\n */\nzprint.config.get_options = (function zprint$config$get_options(){\nreturn cljs.core.deref(zprint.config.configured_options);\n});\n/**\n * Return the base default options.\n */\nzprint.config.get_default_options = (function zprint$config$get_default_options(){\nreturn zprint.config.default_zprint_options;\n});\n/**\n * Set options to be used on every call.\n */\nzprint.config.set_explained_options_BANG_ = (function zprint$config$set_explained_options_BANG_(doc_map){\nreturn cljs.core.reset_BANG_(zprint.config.explained_options,doc_map);\n});\n/**\n * Return any previously set doc-map.\n */\nzprint.config.get_explained_options = (function zprint$config$get_explained_options(){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(zprint.config.remove_keys(cljs.core.deref(zprint.config.explained_options),zprint.config.explain_hide_keys),new cljs.core.Keyword(null,\"version\",\"version\",425292698),zprint.config.about());\n});\n/**\n * Return any previously set doc-map complete.\n */\nzprint.config.get_explained_all_options = (function zprint$config$get_explained_all_options(){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(zprint.config.explained_options),new cljs.core.Keyword(null,\"version\",\"version\",425292698),zprint.config.about());\n});\n/**\n * Return the base explained options, matches get-default-options\n */\nzprint.config.get_default_explained_all_options = (function zprint$config$get_default_explained_all_options(){\nreturn zprint.config.default_zprint_options;\n});\n/**\n * Validate the new options, and update both the saved options\n *   and the doc-map as well.  Will throw an exceptino for errors.\n */\nzprint.config.internal_set_options_BANG_ = (function zprint$config$internal_set_options_BANG_(doc_string,doc_map,existing_options,new_options){\nvar vec__49659 = (zprint.config.config_and_validate.cljs$core$IFn$_invoke$arity$4 ? zprint.config.config_and_validate.cljs$core$IFn$_invoke$arity$4(doc_string,doc_map,existing_options,new_options) : zprint.config.config_and_validate.call(null,doc_string,doc_map,existing_options,new_options));\nvar updated_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49659,(0),null);\nvar new_doc_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49659,(1),null);\nvar error_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49659,(2),null);\nif(cljs.core.truth_(error_vec)){\nthrow (new Error(cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.str,\"set-options! for \",doc_string,\" found these errors: \",error_vec)));\n} else {\nzprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$2(updated_map,new_doc_map);\n\nreturn null;\n}\n});\n/**\n * Do external configuration regardless of whether or not it has\n *   already been done, replacing any internal configuration.  Returns\n *   nil if successful, a vector of errors if not.  Argument, if it\n *   exists, says whether or not to try to load additional libraries.\n *   Defaults to true, unusually enough.\n */\nzprint.config.config_configure_all_BANG_ = (function zprint$config$config_configure_all_BANG_(var_args){\nvar G__49663 = arguments.length;\nswitch (G__49663) {\ncase 1:\nreturn zprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn zprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nzprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (additional_libraries_QMARK_){\nif(cljs.core.truth_(additional_libraries_QMARK_)){\n} else {\n}\n\nvar vec__49664 = (zprint.config.config_and_validate_all.cljs$core$IFn$_invoke$arity$2 ? zprint.config.config_and_validate_all.cljs$core$IFn$_invoke$arity$2(null,null) : zprint.config.config_and_validate_all.call(null,null,null));\nvar zprint_options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49664,(0),null);\nvar doc_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49664,(1),null);\nvar errors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49664,(2),null);\nif(cljs.core.truth_(errors)){\nreturn errors;\n} else {\nzprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$2(zprint_options,doc_map);\n\nvar G__49667_49807 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"configured?\",\"configured?\",642178633),true], null);\nvar G__49668_49808 = \"internal\";\n(zprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$2 ? zprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$2(G__49667_49807,G__49668_49808) : zprint.config.config_set_options_BANG_.call(null,G__49667_49807,G__49668_49808));\n\nif(cljs.core.truth_(cljs.core.find_ns(new cljs.core.Symbol(null,\"clojure.repl\",\"clojure.repl\",570897595,null)))){\nzprint.config.internal_set_options_BANG_(\"REPL execution default\",zprint.config.get_explained_all_options(),zprint.config.get_options(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892),true], null));\n} else {\n}\n\nreturn null;\n}\n});\n\nzprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn zprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"additional-libraries?\",\"additional-libraries?\",-538987431).cljs$core$IFn$_invoke$arity$1(zprint.config.get_options()));\n});\n\nzprint.config.config_configure_all_BANG_.cljs$lang$maxFixedArity = 1;\n\n/**\n * Add some options to the current options, checking to make\n *   sure that they are correct.\n */\nzprint.config.config_set_options_BANG_ = (function zprint$config$config_set_options_BANG_(var_args){\nvar G__49670 = arguments.length;\nswitch (G__49670) {\ncase 2:\nreturn zprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn zprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nzprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (new_options,doc_str){\nif(((cljs.core.not(new cljs.core.Keyword(null,\"configured?\",\"configured?\",642178633).cljs$core$IFn$_invoke$arity$1(zprint.config.get_options()))) && (cljs.core.not(new cljs.core.Keyword(null,\"configured?\",\"configured?\",642178633).cljs$core$IFn$_invoke$arity$1(new_options))))){\nvar additional_libraries_existing_QMARK__49811 = new cljs.core.Keyword(null,\"additional-libraries?\",\"additional-libraries?\",-538987431).cljs$core$IFn$_invoke$arity$1(zprint.config.get_options());\nvar additional_libraries_new_QMARK__49812 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new_options,new cljs.core.Keyword(null,\"additional-libraries?\",\"additional-libraries?\",-538987431),new cljs.core.Keyword(null,\"not-found\",\"not-found\",-629079980));\nvar additional_libraries_QMARK__49813 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(additional_libraries_new_QMARK__49812,new cljs.core.Keyword(null,\"not-found\",\"not-found\",-629079980)))?additional_libraries_new_QMARK__49812:additional_libraries_existing_QMARK__49811);\nzprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$1(additional_libraries_QMARK__49813);\n} else {\n}\n\nreturn zprint.config.internal_set_options_BANG_(doc_str,zprint.config.get_explained_all_options(),zprint.config.get_options(),new_options);\n});\n\nzprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (new_options){\nreturn zprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$2(new_options,[\"repl or api call \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.config.inc_explained_sequence())].join(''));\n});\n\nzprint.config.config_set_options_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a map, build a set of key-seqs that are in the map.  This\n *   will leave out the :fn-map elements, and possibly do other special\n *   processing.\n */\nzprint.config.build_key_seq_set = (function zprint$config$build_key_seq_set(options){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__49678_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__49678_SHARP_),new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146));\n}),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.vec,zprint.config.key_seq(options))));\n});\nzprint.config.allowed_key_set = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\n/**\n * Generate the allowed key-set and save it.\n */\nzprint.config.set_allowed_key_set_BANG_ = (function zprint$config$set_allowed_key_set_BANG_(){\nreturn cljs.core.reset_BANG_(zprint.config.allowed_key_set,zprint.config.build_key_seq_set(zprint.config.get_options()));\n});\n/**\n * Take an options map, and validate that all of the keys in the\n *   map are acceptable.  This is largely a comparison with the keys\n *   in the default options map, but includes special processing for\n *   the :fn-map, where new keys are allowed and so they are not checked.\n *   Returns nil for success and a sequence of invalid keys if failure.\n */\nzprint.config.validate_incoming_keys = (function zprint$config$validate_incoming_keys(options){\nvar incoming_key_seq_set = zprint.config.build_key_seq_set(options);\nvar wrong_key_seqs = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(incoming_key_seq_set,cljs.core.deref(zprint.config.allowed_key_set));\nreturn cljs.core.seq(wrong_key_seqs);\n});\n/**\n * If the sequence is empty, then return nil, else return the sequence.\n */\nzprint.config.empty_to_nil = (function zprint$config$empty_to_nil(empty_seq){\nif(cljs.core.empty_QMARK_(empty_seq)){\nreturn null;\n} else {\nreturn empty_seq;\n}\n});\n/**\n * Validate an options map, source-str is a descriptive phrase \n *   which will be included in the errors (if any). Returns nil \n *   for success, a string with error(s) if not.\n */\nzprint.config.validate_options = (function zprint$config$validate_options(var_args){\nvar G__49681 = arguments.length;\nswitch (G__49681) {\ncase 2:\nreturn zprint.config.validate_options.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn zprint.config.validate_options.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nzprint.config.validate_options.cljs$core$IFn$_invoke$arity$2 = (function (options,source_str){\nif(cljs.core.truth_(options)){\nreturn zprint.config.empty_to_nil(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\", \",cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__49679_SHARP_){\nreturn (((p1__49679_SHARP_ == null)) || (cljs.core.empty_QMARK_(p1__49679_SHARP_)));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.PersistentVector.EMPTY,zprint.spec.validate_basic.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options,new cljs.core.Keyword(null,\"style-map\",\"style-map\",1488693527)),source_str),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(new cljs.core.Keyword(null,\"style-map\",\"style-map\",1488693527).cljs$core$IFn$_invoke$arity$1(options))?(zprint.config.validate_style_map.cljs$core$IFn$_invoke$arity$1 ? zprint.config.validate_style_map.cljs$core$IFn$_invoke$arity$1(options) : zprint.config.validate_style_map.call(null,options)):null)], 0))))));\n} else {\nreturn null;\n}\n});\n\nzprint.config.validate_options.cljs$core$IFn$_invoke$arity$1 = (function (options){\nreturn zprint.config.validate_options.cljs$core$IFn$_invoke$arity$2(options,null);\n});\n\nzprint.config.validate_options.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a new style definition, validate that the new style contains\n *   an acceptable options map.  Returns nil for success, a string with\n *   error information if not.\n */\nzprint.config.validate_style = (function zprint$config$validate_style(style_name,style_options){\nreturn zprint.config.validate_options.cljs$core$IFn$_invoke$arity$2(style_options,[\"style \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(style_name)].join(''));\n});\n/**\n * Given an options map, validate all of the styles in the style-map.\n *   Return an error string with any errors.\n */\nzprint.config.validate_style_map = (function zprint$config$validate_style_map(options){\nvar error_seq = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__49682_SHARP_){\nreturn zprint.config.validate_style(cljs.core.first(p1__49682_SHARP_),cljs.core.second(p1__49682_SHARP_));\n}),new cljs.core.Keyword(null,\"style-map\",\"style-map\",1488693527).cljs$core$IFn$_invoke$arity$1(options));\nvar error_seq__$1 = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,error_seq);\nvar error_str = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\", \",error_seq__$1));\nif(cljs.core.empty_QMARK_(error_str)){\nreturn null;\n} else {\nreturn error_str;\n}\n});\n/**\n * Take a [doc-string [existing-map doc-map error-str] style-name]\n *   and produce a new [existing-map doc-map error-str] from the style defined\n *   in the existing map.\n */\nzprint.config.apply_one_style = (function zprint$config$apply_one_style(doc_string,p__49683,style_name){\nvar vec__49684 = p__49683;\nvar existing_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49684,(0),null);\nvar doc_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49684,(1),null);\nvar error_str = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49684,(2),null);\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style_name,new cljs.core.Keyword(null,\"not-specified\",\"not-specified\",1542080231))) || ((style_name == null)))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_map,doc_map,null], null);\n} else {\nvar style_map = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style_name,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)))?zprint.config.get_default_options():cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(existing_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"style-map\",\"style-map\",1488693527),style_name], null)));\nif(cljs.core.truth_(style_map)){\nvar updated_map = zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([existing_map,style_map], 0));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [updated_map,(cljs.core.truth_(doc_map)?zprint.config.diff_deep_ks([cljs.core.str.cljs$core$IFn$_invoke$arity$1(doc_string),\" specified :style \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(style_name)].join(''),doc_map,zprint.config.key_seq(style_map),updated_map):null),null], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_map,doc_map,[\"Style '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(style_name),\"' not found!\"].join('')], null);\n}\n}\n});\n/**\n * Given an existing-map and a new-map, if the new-map specifies a\n *   style, apply it if it exists.  Otherwise do nothing. Return\n *   [updated-map new-doc-map error-string]\n */\nzprint.config.apply_style = (function zprint$config$apply_style(doc_string,doc_map,existing_map,new_map){\nvar style_name = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new_map,new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.Keyword(null,\"not-specified\",\"not-specified\",1542080231));\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style_name,new cljs.core.Keyword(null,\"not-specified\",\"not-specified\",1542080231))) || ((style_name == null)))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_map,doc_map,null], null);\n} else {\nif((!(cljs.core.coll_QMARK_(style_name)))){\nreturn zprint.config.apply_one_style(doc_string,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_map,doc_map,null], null),style_name);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.config.apply_one_style,doc_string),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_map,doc_map,null], null),style_name);\n}\n}\n});\n/**\n * If there is a :config key in the opts, read in a map from that file.\n */\nzprint.config.get_config_from_file = (function zprint$config$get_config_from_file(var_args){\nvar G__49690 = arguments.length;\nswitch (G__49690) {\ncase 2:\nreturn zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nzprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$2 = (function (filename,optional_QMARK_){\nreturn null;\n});\n\nzprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$1 = (function (filename){\nreturn zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$2(filename,null);\n});\n\nzprint.config.get_config_from_file.cljs$lang$maxFixedArity = 2;\n\n/**\n * If there is a :config-map key in the opts, read in a map from that string.\n */\nzprint.config.get_config_from_map = (function zprint$config$get_config_from_map(map_string){\nif(cljs.core.truth_(map_string)){\ntry{var opts_map = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(map_string);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [opts_map,null], null);\n}catch (e49692){var e = e49692;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,[\"Unable to read configuration from map\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(map_string),\" because \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(e)].join('')], null);\n}} else {\nreturn null;\n}\n});\n/**\n * If it is a string, and it is true or false (any case), turn it\n *   into true or false, else leave it the way it is.\n */\nzprint.config.strtf__GT_boolean = (function zprint$config$strtf__GT_boolean(sexpr){\nif((!(typeof sexpr === 'string'))){\nreturn sexpr;\n} else {\nvar lc_sexpr = clojure.string.lower_case(clojure.string.trim(sexpr));\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lc_sexpr,\"true\")) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lc_sexpr,\"false\")))))){\nreturn sexpr;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lc_sexpr,\"true\")){\nreturn true;\n} else {\nreturn false;\n}\n}\n}\n});\n/**\n * Return true if a sequence starts with another sequence.\n */\nzprint.config.starts_with_QMARK_ = (function zprint$config$starts_with_QMARK_(coll,seq){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2((function (p1__49693_SHARP_,p2__49694_SHARP_){\nvar and__4120__auto__ = p1__49693_SHARP_;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn p2__49694_SHARP_;\n} else {\nreturn and__4120__auto__;\n}\n}),cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core._EQ_,coll,seq));\n});\n/**\n * Given a map of environment variable entries from cprop, which contain\n *   a sequence key and a keyword value, build a map to merge with the\n *   fn-map.\n */\nzprint.config.build_fn_map_update = (function zprint$config$build_fn_map_update(m){\nvar mapseq = cljs.core.seq(m);\nvar fn_map_entries = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (mapseq){\nreturn (function (p1__49699_SHARP_){\nreturn zprint.config.starts_with_QMARK_(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"zprint\",\"zprint\",1501225152),new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146)], null),cljs.core.first(p1__49699_SHARP_));\n});})(mapseq))\n,mapseq);\nvar fn_map_keys = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (mapseq,fn_map_entries){\nreturn (function (p1__49700_SHARP_){\nreturn cljs.core.name(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__49700_SHARP_),(2)));\n});})(mapseq,fn_map_entries))\n,fn_map_entries);\nvar fn_map_vals = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (mapseq,fn_map_entries,fn_map_keys){\nreturn (function (p1__49701_SHARP_){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.second(p1__49701_SHARP_));\n});})(mapseq,fn_map_entries,fn_map_keys))\n,fn_map_entries);\nreturn cljs.core.zipmap(fn_map_keys,fn_map_vals);\n});\n/**\n * Given the current options map and a map of environment variables\n *   from cprop, update the fn-map as described by the environment variable\n *   map.\n */\nzprint.config.update_fn_map = (function zprint$config$update_fn_map(options,env_map){\nvar fn_map_update = zprint.config.build_fn_map_update(env_map);\nif(cljs.core.empty_QMARK_(fn_map_update)){\nreturn options;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146).cljs$core$IFn$_invoke$arity$1(options),fn_map_update], 0)));\n}\n});\n/**\n * If a particular key-path exists in an existing map, replace it\n *   with a new key-path.  The existing key-path can have a nil value.\n */\nzprint.config.replace_existing = (function zprint$config$replace_existing(existing,p__49703){\nvar vec__49704 = p__49703;\nvar k_path = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49704,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49704,(1),null);\nif(((cljs.core.seq(k_path)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(existing,k_path,new cljs.core.Keyword(null,\"not-present\",\"not-present\",125254321)),new cljs.core.Keyword(null,\"not-present\",\"not-present\",125254321))))){\nreturn cljs.core.assoc_in(existing,k_path,v);\n} else {\nreturn existing;\n}\n});\n/**\n * Takes a map with multiple levels, and merge only the value from\n *   the second map where the path of the keys already exists in the first\n *   map.  Will not add any new keys to the first map.\n */\nzprint.config.merge_existing = (function zprint$config$merge_existing(existing,new$){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.config.replace_existing,existing,new$);\n});\n/**\n * Do a single new map. Returns [updated-map new-doc-map error-vec]\n *   Depends on existing-map to be the full, current options map!\n */\nzprint.config.config_and_validate = (function zprint$config$config_and_validate(doc_string,doc_map,existing_map,new_map){\nif(cljs.core.truth_(new_map)){\nvar errors = zprint.config.validate_options.cljs$core$IFn$_invoke$arity$2(new_map,doc_string);\nvar vec__49707 = zprint.config.perform_remove(doc_string,doc_map,existing_map,new_map);\nvar existing_map__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49707,(0),null);\nvar new_ap = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49707,(1),null);\nvar new_doc_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49707,(2),null);\nvar vec__49710 = zprint.config.apply_style(doc_string,new_doc_map,existing_map__$1,new_map);\nvar updated_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49710,(0),null);\nvar new_doc_map__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49710,(1),null);\nvar style_errors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49710,(2),null);\nvar errors__$1 = (cljs.core.truth_(style_errors)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(errors),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(style_errors)].join(''):errors);\nvar new_updated_map = zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([updated_map,new_map], 0));\nvar new_doc_map__$2 = zprint.config.diff_deep_ks(doc_string,new_doc_map__$1,zprint.config.key_seq(new_map),new_updated_map);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_updated_map,new_doc_map__$2,errors__$1], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_map,doc_map,null], null);\n}\n});\n/**\n * Take the opts and errors from the command line arguments, if any,\n *   and do the rest of the configuration and validation along the way.  \n *   If there are no command line arguments, that's ok too. Since we\n *   took the main.clj out, there aren't going to be any soon.  Left\n *   the config map, config file, and cli processing in place in case\n *   we go replace the uberjar capability soon.  \n *   Returns [new-map doc-map errors]\n */\nzprint.config.config_and_validate_all = (function zprint$config$config_and_validate_all(cli_opts,cli_errors){\nvar default_map = zprint.config.get_default_options();\nvar default_doc_map = zprint.config.get_default_explained_all_options();\nvar home = null;\nvar file_separator = null;\nvar zprintrc_file = [home,file_separator,zprint.config.zprintrc].join('');\nvar vec__49713 = (cljs.core.truth_((function (){var and__4120__auto__ = home;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn file_separator;\n} else {\nreturn and__4120__auto__;\n}\n})())?zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$2(zprintrc_file,new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509)):null);\nvar opts_rcfile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49713,(0),null);\nvar errors_rcfile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49713,(1),null);\nvar rc_filename = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49713,(2),null);\nvar vec__49716 = zprint.config.config_and_validate([\"File: \",zprintrc_file].join(''),default_doc_map,default_map,opts_rcfile);\nvar updated_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49716,(0),null);\nvar new_doc_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49716,(1),null);\nvar rc_errors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49716,(2),null);\nvar read_system_env_fn = null;\nvar env_map = (cljs.core.truth_(read_system_env_fn)?(read_system_env_fn.cljs$core$IFn$_invoke$arity$0 ? read_system_env_fn.cljs$core$IFn$_invoke$arity$0() : read_system_env_fn.call(null)):null);\nvar env_and_default_map = zprint.config.merge_existing(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"zprint\",\"zprint\",1501225152),default_map], null),env_map);\nvar new_env_map = zprint.config.diff_map(default_map,new cljs.core.Keyword(null,\"zprint\",\"zprint\",1501225152).cljs$core$IFn$_invoke$arity$1(env_and_default_map));\nvar new_env_map__$1 = zprint.config.update_fn_map(new_env_map,env_map);\nvar new_env_map__$2 = zprint.config.map_leaves(zprint.config.strtf__GT_boolean,new_env_map__$1);\nvar vec__49719 = zprint.config.config_and_validate(\"Environment variable\",new_doc_map,updated_map,new_env_map__$2);\nvar updated_map__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49719,(0),null);\nvar new_doc_map__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49719,(1),null);\nvar env_errors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49719,(2),null);\nvar read_system_props_fn = null;\nvar prop_map = (cljs.core.truth_(read_system_props_fn)?(read_system_props_fn.cljs$core$IFn$_invoke$arity$0 ? read_system_props_fn.cljs$core$IFn$_invoke$arity$0() : read_system_props_fn.call(null)):null);\nvar prop_and_default_map = zprint.config.merge_existing(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"zprint\",\"zprint\",1501225152),default_map], null),prop_map);\nvar new_prop_map = zprint.config.diff_map(default_map,new cljs.core.Keyword(null,\"zprint\",\"zprint\",1501225152).cljs$core$IFn$_invoke$arity$1(prop_and_default_map));\nvar new_prop_map__$1 = zprint.config.update_fn_map(new_prop_map,prop_map);\nvar new_prop_map__$2 = zprint.config.map_leaves(zprint.config.strtf__GT_boolean,new_prop_map__$1);\nvar vec__49722 = zprint.config.config_and_validate(\"System property\",new_doc_map__$1,updated_map__$1,new_prop_map__$2);\nvar updated_map__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49722,(0),null);\nvar new_doc_map__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49722,(1),null);\nvar prop_errors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49722,(2),null);\nvar config_filename = null;\nvar vec__49725 = (cljs.core.truth_(config_filename)?zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$1(zprintrc_file):null);\nvar opts_configfile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49725,(0),null);\nvar errors_configfile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49725,(1),null);\nvar config_filename__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49725,(2),null);\nvar vec__49728 = zprint.config.config_and_validate([\"Config file: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(config_filename__$1)].join(''),new_doc_map__$2,updated_map__$2,opts_configfile);\nvar updated_map__$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49728,(0),null);\nvar new_doc_map__$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49728,(1),null);\nvar config_errors = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49728,(2),null);\nvar vec__49731 = zprint.config.get_config_from_map(new cljs.core.Keyword(null,\"config-map\",\"config-map\",807193777).cljs$core$IFn$_invoke$arity$1(cli_opts));\nvar opts_configmap = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49731,(0),null);\nvar errors_configmap = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49731,(1),null);\nvar vec__49734 = zprint.config.config_and_validate([\"Config map:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"config-map\",\"config-map\",807193777).cljs$core$IFn$_invoke$arity$1(cli_opts))].join(''),new_doc_map__$3,updated_map__$3,opts_configmap);\nvar updated_map__$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49734,(0),null);\nvar new_doc_map__$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49734,(1),null);\nvar config_errors__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49734,(2),null);\nvar opts_cli = cljs.core.select_keys(cli_opts,zprint.config.zprint_keys);\nvar vec__49737 = zprint.config.config_and_validate(\"CLI options\",new_doc_map__$4,updated_map__$4,opts_cli);\nvar updated_map__$5 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49737,(0),null);\nvar new_doc_map__$5 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49737,(1),null);\nvar cli_errors__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49737,(2),null);\nvar all_errors = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,(new cljs.core.List(null,errors_rcfile,(new cljs.core.List(null,rc_errors,(new cljs.core.List(null,env_errors,(new cljs.core.List(null,prop_errors,(new cljs.core.List(null,errors_configfile,(new cljs.core.List(null,config_errors__$1,(new cljs.core.List(null,cli_errors__$1,null,(1),null)),(2),null)),(3),null)),(4),null)),(5),null)),(6),null)),(7),null)))));\nvar all_errors__$1 = ((cljs.core.empty_QMARK_(all_errors))?null:all_errors);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [updated_map__$5,new_doc_map__$5,all_errors__$1], null);\n});\n/**\n * Take a vector of strings and concatenate them into one string with\n *   newlines between them.\n */\nzprint.config.vec_str_to_str = (function zprint$config$vec_str_to_str(vec_str){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"\\n\",vec_str));\n});\nzprint.config.help_str = zprint.config.vec_str_to_str(cljs.core.PersistentVector.fromArray([zprint.config.about(),\"\",\" The basic call uses defaults, prints to stdout\",\"\",\"   (zprint x)\",\"\",\" All zprint functions also allow the following arguments:\",\"\",\"   (zprint x <width>)\",\"   (zprint x <width> <options>)\",\"   (zprint x <options>)\",\"\",\" Format a function to stdout (accepts arguments as above)\",\"\",\"   (zprint-fn <fn-name>)\",\"\",\" Output to a string instead of stdout:\",\"\",\"   (zprint-str x)\",\"   (zprint-fn-str <fn-name>)\",\"\",\" Colorize output for an ANSI terminal:\",\"\",\"   (czprint x)\",\"   (czprint-fn <fn-name>)\",\"   (czprint-str x)\",\"   (czprint-fn-str <fn-name>)\",\"\",\" The first time you call a zprint printing function, it configures\",\" itself from $HOME/.zprintrc, as well as environment variables and\",\" system properties.\",\"\",\" Explain current configuration, shows source of non-default values:\",\"\",\"   (zprint nil :explain)\",\"\",\" Change current configuration from running code:\",\"\",\"   (set-options! <options>)\",\"\",\" Format a complete file (recognizing ;!zprint directives):\",\"\",\"   (zprint-file infile file-name outfile <options>)\",\"\",\" Format a string containing multiple \\\"top level\\\" forms\",\" (recognizing ;!zprint directives):\",\"\",\"   (zprint-file-str file-str zprint-specifier <options> <doc-str>)\",\"\",\" Output information to include when submitting an issue:\",\"\",\"   (zprint nil :support)\",\"\"], true));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","zprint/config.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$zprint.config","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^M","~$goog","^N","~$clojure.set","^O","~$zprint.sutil","^P","~$clojure.string","^Q","~$clojure.data","^R","~$cljs.reader","^S","~$zprint.spec","^T","~$d","^R"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$difference","^O","~$validate-basic","^T","~$read-string","^S"],"~:require-macros",["^ ","^M","^M","^S","^S"],"~:form",["~#list",["~$ns","^H",["^11",["^V","^Q",["^P"],["^O","~:refer",["^X"]],["^R","~:as","~$d"],["^T","^13",["^Y"]],["^S","^13",["^Z"]]]]]],"~:flags",["^ ","^V",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^N","^M","^Q","^P","^O","^R","^T","^S"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","zprint/config.cljc"],"~:compiled-at",1570444246829,"~:resource-name","zprint/config.cljc","~:warnings",[],"~:source","(ns zprint.config\n  #?(:clj [:refer-clojure :exclude [read-string]])\n  (:require clojure.string\n            [zprint.sutil]\n            [clojure.set :refer [difference]]\n            [clojure.data :as d]\n            [zprint.spec :refer [validate-basic]]\n            #?(:clj [clojure.edn :refer [read-string]]\n               :cljs [cljs.reader :refer [read-string]]))\n  #?@(:clj [(:import (java.io InputStreamReader FileReader BufferedReader))]))\n\n;;\n;; # Configuration\n;;\n;; Handles incoming configuration, validation of option maps,\n;; contains atoms holding the current options map.\n;;\n\n;;\n;; # Program Version\n;;\n\n(defn about \"Return version of this program.\" [] (str \"zprint-0.4.7\"))\n\n;;\n;; # External Configuration\n;;\n;; Will read this when run standalone, or first time a zprint\n;; function is used when used as a library.\n;;\n\n(def zprintrc \".zprintrc\")\n\n;;\n;; # Internal Storage\n;;\n;; Keys that should be used from the cli options map to pass\n;; directly on to zprint (and to get validated as well)\n;;\n\n(def zprint-keys [:width])\n\n(def explain-hide-keys\n  [:configured? :dbg-print? :dbg? :do-in-hang? :drop? :dbg-ge :file? :spaces?\n   :process-bang-zprint? :trim-comments? :zipper? :indent :remove :return-cvec?\n   [:object :wrap-after-multi? :wrap-coll?] [:reader-cond :comma?]\n   [:pair :justify-hang :justify-tuning]\n   [:binding :justify-hang :justify-tuning] [:spec :value]\n   [:map :dbg-local? :hang-adjust :justify-hang :justify-tuning] :tuning\n   :perf-vs-format])\n\n\n;;\n;; ## Function style database\n;;\n;; In all of these cases, if the fn fits one one line, it will\n;; go on one line.\n;;\n;; Choices:\n;;\n;; :arg1\n;;\n;; (map #(if (= % :big)\n;;         (takes 2 \"lines\")\n;;         (just 1 \"line\"))\n;;   (list 'stuff 'bother))\n;;\n;; Print the first argument on the same line as\n;; the function, if possible.  Later arguments go\n;; indented.\n;;\n;; :arg1-body\n;;\n;; Print the first argument on the same line as\n;; the function, if possible.  Later body arguments go\n;; indented.\n;;\n;; (if (= a 1)\n;;   (map inc coll)\n;;   (map dec coll))\n;;\n;; :arg1-mixin\n;;\n;; Print Rum defc, defcc, and defcs macros in a standard\n;; way.  Puts the mixins under the first line, and above the\n;; argument vector.  Also allows a docstring.\n;;\n;; (rum/defcs component\n;;   < rum/static\n;;     rum/reactive\n;;     (rum/local 0 ::count)\n;;     (rum/local \"\" ::text)\n;;   [state label]\n;;   (let [count-atom (::count state) text-atom (::text state)] [:div]))\n;;\n;; :binding\n;;\n;; The function has a binding clause as its first argument.\n;; Print the binding clause two-up.\n;;\n;; (let [a b\n;;       c d]\n;;   (+ a c))\n;;\n;; :arg1-pair\n;;\n;; The function has an important first argument, then the\n;; rest of the arguments are paired up.\n;;\n;; (assoc my-map\n;;   :key1 :val1\n;;   :key2 :val2)\n;;\n;; :pair\n;;\n;; The function has a series of clauses which are paired.\n;;\n;; (cond\n;;   (and (= a 1) (> b 3))\n;;     (vector c d e)\n;;   (= d 4)\n;;     (inc a))\n;;\n;; :hang\n;;\n;; The function has a series of arguments where it would be nice\n;; to put the first on the same line as the function and then\n;; indent the rest to that level.  This would usually always be nice,\n;; but we try extra hard for these.\n;;\n;; (and (= i 1)\n;;      (> (inc j) (stuff k)))\n;;\n;; :extend\n;;\n;; The sexpression has a series of symbols with one or more forms\n;; following each.\n;;\n;;  (reify\n;;    stuff\n;;      (bother [] (println))\n;;    morestuff\n;;      (really [] (print x))\n;;      (sure [] (print y))\n;;      (more-even [] (print z)))\n;;\n;; :arg1-extend\n;;\n;; For the several functions which have an single argument\n;; prior to the :extend syntax.  The must have one argument,\n;; and if the second argument is a vector, it is also handled\n;; separately from the :extend syntax.\n;;\n;;  (extend-protocol ZprintProtocol\n;;    ZprintType\n;;      (more-stuff [x] (str x))\n;;      (more-bother [y] (list y))\n;;      (more-foo [z] (nil? z))))\n;;\n;;  (deftype ZprintType\n;;    [a b c]\n;;    ZprintProtocol\n;;      (stuff [this x y] a)\n;;      (bother [this] b)\n;;      (bother [this x] (list x c))\n;;      (bother [this x y] (list x y a b)))\n;;\n;;  (extend ZprintType\n;;    ZprintProtocol\n;;      {:bar (fn [x y] (list x y)),\n;;       :baz (fn ([x] (str x)) ([x y] (list x y)))})\n;;\n;; :arg1->\n;;\n;; Print the first argument on the same line as\n;; the function, if possible.  Later arguments go\n;; indented and :arg1 and :arg-1-pair top level fns\n;; are become :none and :pair, respectively.\n;;\n;; Currently -> is :none-body, however, and there\n;; are no :arg1-> functions.\n;;\n;; (-> opts\n;;   (assoc\n;;     :stuff (list \"and\" \"bother\"))\n;;   (dissoc :things))\n;;\n;; :noarg1-body\n;;\n;; Print the fn in whatever way is possible without\n;; special handling.  However, top level fns become\n;; different based on the lack of their first argument.\n;; Thus, :arg1 becomes :none, :arg1-pair becomes :pair,\n;; etc.\n;;\n;; (-> opts\n;;     (assoc\n;;       :stuff (list \"and\" \"bother\"))\n;;     (dissoc :things))\n;;\n;; :force-nl-body\n;;\n;; Ensure that even if it fits on one line, it always does\n;; a hang or a flow but doesn't end up on one line..\n;;\n;; (->> opts\n;;      foo\n;;      bar\n;;      baz)\n;;\n;; :fn\n;;\n;; Print the first argument on the same line as the (fn ...) if possible,\n;; and if it does, and the second argument is a vector, print it on\n;; the same line as the first argument if it fits on one line.\n;;\n;; (fn [a b c]\n;;   (let [d c]\n;;     (inc d)))\n;;\n;; (fn myfunc [a b c]\n;;   (let [d c]\n;;     (inc d)))\n;;\n;; :arg2\n;;\n;; Print the first argument on the same line as the function name, and\n;; if it fits then print the second argument on the same line as the function\n;; name if it fits.\n;;\n;; (as-> initial-value tag\n;;   (process stuff tag bother)\n;;   (more-process tag foo bar))\n;;\n;; :arg2-pair\n;;\n;; Just like :arg2, but prints the third through last arguments as pairs.\n;;\n;; (condp = stuff\n;;   :bother \"bother\"\n;;   :foo \"foo\"\n;;   :bar \"bar\"\n;;   \"baz\")\n;;\n;; :arg2-fn\n;;\n;; Just like :arg2, but prints the third through last arguments as fn's.\n;;\n;; (proxy [Classname] []\n;;   (stuff [] bother)\n;;   (foo [bar] baz))\n;;\n;; :flow\n;;\n;; Don't hang under any circumstances.  :flow assume arguments,\n;; :flow-body assumes executable things.\n;;\n;; (foo\n;;   (bar a b c)\n;;   (baz d e f))\n;;\n;; :flow-body\n;;\n;; Don't hang under any circumstances.  :flow assume arguments,\n;; :flow-body assumes executable things.\n;;\n;; (foo\n;;   (bar a b c)\n;;   (baz d e f))\n;;\n;; :none\n;;\n;; This is for things like special forms that need to be in this\n;; map to show up as \"functions\", but don't actually trigger showfn\n;; to represent them as such.\n;;\n\n(def zfnstyle\n  {\"->\" :noarg1-body,\n   \"->>\" :force-nl-body,\n   \":import\" :force-nl-body,\n   \":require\" :force-nl-body,\n   \"=\" :hang,\n   \"alt\" :pair-fn,\n   \"and\" :hang,\n   \"apply\" :arg1,\n   \"as->\" :arg2,\n   \"assoc\" :arg1-pair,\n   \"assoc-in\" :arg1,\n   \"binding\" :binding,\n   \"case\" :arg1-pair-body,\n   \"cat\" :force-nl,\n   \"catch\" :arg2,\n   \"cond\" :pair-fn,\n   \"cond->\" :arg1-pair-body,\n   \"condp\" :arg2-pair,\n   \"def\" :arg1-body,\n   \"defc\" :arg1-mixin,\n   \"defcc\" :arg1-mixin,\n   \"defcs\" :arg1-mixin,\n   \"defmacro\" :arg1-body,\n   \"defexpect\" :arg1-body,\n   \"defmethod\" :arg2,\n   \"defmulti\" :arg1-body,\n   \"defn\" :arg1-body,\n   \"defn-\" :arg1-body,\n   \"defproject\" :arg2-pair,\n   \"defprotocol\" :arg1-force-nl,\n   \"defrecord\" :arg2-extend,\n   \"deftest\" :arg1-body,\n   \"deftype\" :arg2-extend,\n   \"defui\" :arg1-extend,\n   \"do\" :none-body,\n   \"doseq\" :binding,\n   \"dotimes\" :binding,\n   \"doto\" :arg1,\n   \"extend\" :arg1-extend,\n   \"extend-protocol\" :arg1-extend,\n   \"extend-type\" :arg1-extend,\n   \"fdef\" :arg1-force-nl,\n   \"filter\" :arg1,\n   \"filterv\" :arg1,\n   \"fn\" :fn,\n   \"fn*\" :fn,\n   \"for\" :binding,\n   \"if\" :arg1-body,\n   \"if-let\" :binding,\n   \"if-not\" :arg1-body,\n   \"if-some\" :binding,\n   \"interpose\" :arg1,\n   \"let\" :binding,\n   \"letfn\" :binding,\n   \"loop\" :binding,\n   \"map\" :arg1,\n   \"mapcat\" :arg1,\n   \"mapv\" :arg1,\n   \"not=\" :hang,\n   \"ns\" :arg1-body,\n   \"or\" :hang,\n   \"proxy\" :arg2-fn,\n   \"reduce\" :arg1,\n   \"reify\" :extend,\n   \"remove\" :arg1,\n   \"s/and\" :gt2-force-nl,\n   \"s/or\" :gt2-force-nl,\n   \"some->\" :force-nl-body,\n   \"some->>\" :force-nl-body,\n   \"swap!\" :arg2,\n   \"try\" :none-body,\n   \"when\" :arg1-body,\n   \"when-first\" :binding,\n   \"when-let\" :binding,\n   \"when-not\" :arg1-body,\n   \"when-some\" :binding,\n   \"with-bindings\" :arg1,\n   \"with-bindings*\" :arg1,\n   \"with-local-vars\" :binding,\n   \"with-meta\" :arg1-body,\n   \"with-open\" :binding,\n   \"with-redefs\" :binding,\n   \"with-redefs-fn\" :arg1-body})\n\n;;\n;; ## The global defaults\n;;\n\n(def default-zprint-options\n  {:agent {:object? false},\n   :array {:hex? false, :indent 1, :object? false, :wrap? true},\n   :atom {:object? false},\n   :auto-width? false,\n   :binding {:flow? false,\n             :force-nl? false,\n             :hang-diff 1,\n             :hang-expand 2.0,\n             :hang? true,\n             :indent 2,\n             :justify-hang {:hang-expand 5},\n             :justify-tuning {:hang-flow 4, :hang-flow-limit 30},\n             :justify? false,\n             :nl-separator? false},\n   :color? true,\n   :color-map {:brace :red,\n               :bracket :purple,\n               :comment :green,\n               :deref :red,\n               :fn :blue,\n               :hash-brace :red,\n               :hash-paren :green,\n               :keyword :magenta,\n               :nil :yellow,\n               :none :black,\n               :number :purple,\n               :paren :green,\n               :syntax-quote-paren :red,\n               :quote :red,\n               :string :red,\n               :uneval :magenta,\n               :user-fn :black},\n   :comment {:count? false, :wrap? true, :inline? true},\n   :configured? false,\n   :dbg-ge nil,\n   :dbg-print? nil,\n   :dbg? nil,\n   :delay {:object? false},\n   :do-in-hang? true,\n   :drop? nil,\n   :extend {:flow? true,\n            :force-nl? true,\n            :hang-diff 1,\n            :hang-expand 1000.0,\n            :hang? true,\n            :indent 2,\n            :modifiers #{\"static\"},\n            :nl-separator? false},\n   :file? false,\n   :fn-force-nl #{:noarg1-body :noarg1 :force-nl-body :force-nl :flow\n                  :arg1-force-nl :flow-body},\n   :fn-gt2-force-nl #{:gt2-force-nl :binding :pair-fn},\n   :fn-gt3-force-nl #{:gt3-force-nl :arg1-pair :arg1-pair-body},\n   :fn-map zfnstyle,\n   :fn-name nil,\n   :fn-obj {:object? false},\n   :format :on,\n   :future {:object? false},\n   ; This is used for {:parse {:left-space :keep}}\n   :indent 0,\n   :list {:constant-pair-min 4,\n          :constant-pair? true,\n          :hang-avoid 0.5,\n          :hang-diff 1,\n          :hang-expand 2.0,\n          :hang-size 100,\n          :hang? true,\n          :indent 2,\n          :indent-arg nil,\n          :pair-hang? true},\n   :map {:indent 2,\n         :sort? true,\n         :sort-in-code? nil,\n         :comma? true,\n         :hang? true,\n         :hang-expand 1000.0,\n         :hang-diff 1,\n         ; See zprint_test.clj, def r, (czprint r 28) to see why this\n         ; was created and set to 0.  That certainly looks better, but\n         ; wider stuff seems better with -1, so for now, we will go with that.\n         :hang-adjust -1,\n         :key-order nil,\n         :key-ignore nil,\n         :key-ignore-silent nil,\n         :key-color nil,\n         :key-depth-color nil,\n         :key-value-color nil,\n         :lift-ns? true,\n         :lift-ns-in-code? false,\n         :force-nl? nil,\n         :nl-separator? false,\n         :flow? false,\n         :justify? false,\n         :justify-hang {:hang-expand 5},\n         :justify-tuning {:hang-flow 4, :hang-flow-limit 30}},\n   :max-depth 1000,\n   :parallel? false,\n   :additional-libraries? true,\n   :max-hang-count 4,\n   :max-hang-depth 3,\n   :max-hang-span 4,\n   :max-length 1000,\n   :object {:indent 1, :wrap-after-multi? true, :wrap-coll? true},\n   :old? true,\n   :output {:focus {:zloc? false, :surround nil}, :lines nil, :elide nil},\n   :pair {:flow? false,\n          :force-nl? nil,\n          :hang-diff 1,\n          :hang-expand 2.0,\n          :hang? true,\n          :indent 2,\n          :justify-hang {:hang-expand 5},\n          :justify-tuning {:hang-flow 4, :hang-flow-limit 30},\n          :justify? false,\n          :nl-separator? false},\n   :pair-fn {:hang-diff 1, :hang-expand 2.0, :hang-size 10, :hang? true},\n   :parse {:interpose nil, :left-space :drop},\n   :parse-string-all? false,\n   :parse-string? false,\n   :perf-vs-format nil,\n   :process-bang-zprint? nil,\n   :promise {:object? false},\n   :reader-cond {:comma? nil,\n                 :force-nl? true,\n                 :hang-diff 1,\n                 :hang-expand 1000.0,\n                 :hang? true,\n                 :indent 2,\n                 :key-order nil,\n                 :sort-in-code? nil,\n                 :sort? nil},\n   :record {:hang? true, :record-type? true, :to-string? false},\n   :remove {:fn-force-nl nil,\n            :fn-gt2-force-nl nil,\n            :fn-gt3-force-nl nil,\n            :extend {:modifiers nil}},\n   :return-cvec? false,\n   :set {:indent 1,\n         :sort? true,\n         :sort-in-code? false,\n         :wrap-after-multi? true,\n         :wrap-coll? true,\n         :wrap? true},\n   :spaces? nil,\n   :spec {:docstring? true, :value nil},\n   :style nil,\n   :style-map\n     {:all-hang {:map {:hang? true},\n                 :list {:hang? true},\n                 :extend {:hang? true},\n                 :pair {:hang? true},\n                 :pair-fn {:hang? true},\n                 :reader-cond {:hang? true},\n                 :record {:hang? true}},\n      :binding-nl {:binding {:indent 0, :nl-separator? true}},\n      :community {:binding {:indent 0},\n                  :fn-map {\"apply\" :none,\n                           \"assoc\" :none,\n                           \"cond->\" :none-body,\n                           \"filter\" :none,\n                           \"filterv\" :none,\n                           \"map\" :none,\n                           \"mapv\" :none,\n                           \"reduce\" :none,\n                           \"remove\" :none,\n                           \"with-meta\" :none-body},\n                  :list {:indent-arg 1},\n                  :map {:indent 0},\n                  :pair {:indent 0}},\n      :extend-nl {:extend {:flow? true, :indent 0, :nl-separator? true}},\n      :justified {:binding {:justify? true},\n                  :map {:justify? true},\n                  :pair {:justify? true}},\n      :keyword-respect-nl\n        {:vector {:option-fn-first #(let [k? (keyword? %2)]\n                                     (when (not= k? (:respect-nl? (:vector %1)))\n                                       {:vector {:respect-nl? k?}}))}},\n      :map-nl {:map {:indent 0, :nl-separator? true}},\n      :no-hang {:map {:hang? false},\n                :list {:hang? false},\n                :extend {:hang? false},\n                :pair {:hang? false},\n                :pair-fn {:hang? false},\n                :reader-cond {:hang? false},\n                :record {:hang? false}},\n      :pair-nl {:pair {:indent 0, :nl-separator? true}},\n      :spec {:list {:constant-pair-min 2},\n             :vector {:wrap? false},\n             ;:pair {:indent 0} removed in 0.4.1\n             }},\n   :tab {:expand? true, :size 8},\n   :trim-comments? nil,\n   :tuning {; do hang if (< (/ hang-count flow-count) :hang-flow)\n            :hang-flow 1.1,\n            ; if the :fn-style is hang, then this become the :hang-flow above\n            :hang-type-flow 1.5,\n            ; when (> hang-count :hang-flow-limit),\n            ;  hang if (<= (dec hang-count) flow-count)\n            :hang-flow-limit 10,\n            ; this is added to the count of hanging lines before the comparison\n            ; when doing the one with :hang-flow or :hang-type-flow\n            ; Note that :map has its own :hang-adjust which overides this\n            ; general\n            ; one.\n            :general-hang-adjust -1,\n            :hang-if-equal-flow? true},\n   :uneval {:color-map {:brace :yellow,\n                        :bracket :yellow,\n                        :comment :green,\n                        :deref :yellow,\n                        :fn :cyan,\n                        :hash-brace :yellow,\n                        :hash-paren :yellow,\n                        :keyword :yellow,\n                        :nil :yellow,\n                        :none :yellow,\n                        :number :yellow,\n                        :paren :yellow,\n                        :syntax-quote-paren :yellow,\n                        :quote :yellow,\n                        :string :yellow,\n                        :uneval :magenta,\n                        :user-fn :cyan}},\n   :user-fn-map {},\n   :vector {:indent 1,\n            :binding? false,\n            :option-fn-first nil,\n            :respect-nl? false,\n            :wrap-after-multi? true,\n            :wrap-coll? true,\n            :wrap? true},\n   :width 80,\n   :zipper? false})\n\n;; Returns nil for all of the colors\n(def no-color-map\n  {:brace :red,\n   :bracket :none,\n   :comment :none,\n   :deref :none,\n   :fn :none,\n   :hash-brace :none,\n   :hash-paren :none,\n   :keyword :none,\n   :nil :none,\n   :none :none,\n   :number :none,\n   :paren :none,\n   :syntax-quote-paren :none,\n   :quote :none,\n   :string :none,\n   :uneval :none,\n   :user-fn :none})\n\n;;\n;; # Mutable Options storage\n;;\n\n(def configured-options (atom default-zprint-options))\n\n(def explained-options (atom default-zprint-options))\n\n(def explained-sequence (atom 1))\n\n;;\n;; # Utility functions for manipulating option maps\n;;\n\n(defn merge-with-fn\n  \"Take two arguments of things to merge and figure it out.\n  Works for sets too.\"\n  [val-in-result val-in-latter]\n  (cond (and (map? val-in-result) (map? val-in-latter))\n          (merge-with merge-with-fn val-in-result val-in-latter)\n        (and (set? val-in-result) (set? val-in-latter))\n          (apply conj val-in-result (seq val-in-latter))\n        :else val-in-latter))\n\n(defn merge-deep\n  \"Do a merge of maps all the way down.\"\n  [& maps]\n  (apply merge-with merge-with-fn maps))\n\n(defn merge-with-fn-doc\n  \"Take two arguments of things to merge and figure it out.\"\n  [doc-string val-in-result val-in-latter]\n  (if (and (map? val-in-result) (map? val-in-latter))\n    (merge-with (partial merge-with-fn-doc doc-string)\n                val-in-result\n                val-in-latter)\n    {:from doc-string, :value val-in-latter}))\n\n(defn merge-deep-doc\n  \"Do a merge of maps all the way down, keeping track of where every\n  value came from.\"\n  [doc-string & maps]\n  (apply merge-with (partial merge-with-fn-doc doc-string) maps))\n\n(declare remove-keys)\n\n(defn remove-key\n  \"Remove a single key from a map or remove a series of\n  keys from an internal map.\"\n  [m k]\n  (if (coll? k)\n    (let [map-key (first k)\n          keys-to-remove (next k)]\n      (assoc m map-key (remove-keys (m map-key) keys-to-remove)))\n    (dissoc m k)))\n\n(defn remove-keys\n  \"Remove keys from a map at multiple levels.\"\n  [m ks]\n  (reduce #(remove-key %1 %2) m ks))\n\n;;\n;; ## Remove set elements\n;;\n\n(defn key-seq\n  \"Get the key seq for every terminal element in a map.\"\n  [m]\n  (when (map? m)\n    (mapcat (fn [[k v]]\n              (let [ks (key-seq v)]\n                (if ks\n                  (map #(cons k (if (coll? %) % [%])) ks)\n                  ;(map (partial list k) ks)\n                  [[k]])))\n      m)))\n\n(defn remove-elements\n  \"Given a key sequence and two maps, remove the elements of the set at\n  the key sequence in the second map from set in the first map.\"\n  [map-remove map-orig ks]\n  (update-in map-orig ks clojure.set/difference (get-in map-remove ks)))\n\n(defn remove-set-elements\n  \"Take two maps, and remove all of the elemnts in the second maps sets\n  from equivalent places in the first map.\"\n  [map-orig map-remove]\n  (reduce (partial remove-elements map-remove) map-orig (key-seq map-remove)))\n\n(declare diff-deep-ks)\n\n(defn perform-remove\n  \"Take an options map, and remove the set elements that are at the :remove\n  key, and also remove the :remove key.\"\n  [doc-string doc-map options new-options]\n  (let [map-remove (:remove new-options)\n        options-out (remove-set-elements options map-remove)\n        remove-ks-seq (key-seq map-remove)\n        new-options-out (dissoc new-options :remove)]\n    [options-out new-options-out\n     (diff-deep-ks doc-string doc-map remove-ks-seq options-out)]))\n\n;;\n;; The best way is to just label all of the nodes.\n;;\n\n(declare map-leaves)\n\n(defn map-leaf\n  \"Given a function and map and a key, replace the value with \n  (f leaf) or (map-leaves f m).\"\n  [f m k]\n  (let [v (m k)]\n    (if-not (map? v) (assoc m k (f v)) (assoc m k (map-leaves f v)))))\n\n(defn map-leaves\n  \"Return a map of the same shape but where every leaf value\n  (i.e., not map value) has been replaced by the (f leaf-value).\"\n  [f m]\n  (reduce (partial map-leaf f) m (keys m)))\n\n(defn value-set-by\n  \"Create a map with a :value and :set-by elements.\"\n  [set-by _ value]\n  {:set-by set-by, :value value})\n\n(defn diff-deep-ks\n  \"Update an existing doc-map with labels of everything that shows up\n  in the ks-seq.\"\n  [doc-string doc-map changed-key-seq existing]\n  (reduce\n    #(update-in %1 %2 (partial value-set-by doc-string) (get-in existing %2))\n    doc-map\n    changed-key-seq))\n\n(defn diff-map \"Diff two maps.\" [before after] (second (d/diff before after)))\n\n;;\n;; # Functions manipulating mutable options\n;;\n;; ## Overall Options\n;;\n\n(defn inc-explained-sequence\n  \"Return current explained-seqence and add one to it.\"\n  []\n  (swap! explained-sequence inc))\n\n(defn dissoc-two\n  \"Do a simple dissoc-in for two levels.  Does not remove the\n  second map if it is empty.\"\n  [m [k1 k2]]\n  (assoc m k1 (dissoc (get m k1) k2)))\n\n(defn add-calculated-options\n  \"Take an updated-map and generate calculated options\n  from it.  Takes the updated-map and further updates\n  it, being smart about things that were set to nil.\"\n  [updated-map]\n  (cond-> updated-map\n    (:key-order (:map updated-map)) (assoc-in [:map :key-value]\n                                      (zipmap (:key-order (:map updated-map))\n                                              (range)))\n    ; is :key-order now nil and :key-value is not?\n    (and (nil? (:key-order (:map updated-map)))\n         (not (nil? (:key-value (:map updated-map)))))\n      (dissoc-two [:map :key-value])\n    (:key-order (:reader-cond updated-map))\n      (assoc-in [:reader-cond :key-value]\n        (zipmap (:key-order (:reader-cond updated-map)) (range)))\n    ; is :key-order now nil and :key-value is not?\n    (and (nil? (:key-order (:reader-cond updated-map)))\n         (not (nil? (:key-value (:reader-cond updated-map)))))\n      (dissoc-two [:reader-cond :key-value])\n    (not (:color? updated-map)) (assoc :color-map no-color-map)\n    (not (:color? updated-map)) (assoc-in [:uneval :color-map] no-color-map)))\n\n(defn reset-options!\n  \"Replace options to be used on every call.  You must have validated\n  these options already!\"\n  ([updated-map doc-map]\n   (reset! configured-options (add-calculated-options updated-map))\n   (when doc-map (reset! explained-options doc-map)))\n  ([updated-map] (reset-options! updated-map nil)))\n\n(defn reset-default-options!\n  \"Remove any previously set options.\"\n  []\n  (reset! configured-options default-zprint-options)\n  (reset! explained-options default-zprint-options))\n\n(defn get-options \"Return any prevsiouly set options.\" [] @configured-options)\n\n(defn get-default-options\n  \"Return the base default options.\"\n  []\n  default-zprint-options)\n\n;;\n;; ## Explained options, also known as the doc-map\n;;\n\n(defn set-explained-options!\n  \"Set options to be used on every call.\"\n  [doc-map]\n  (reset! explained-options doc-map))\n\n(defn get-explained-options\n  \"Return any previously set doc-map.\"\n  []\n  (assoc (remove-keys @explained-options explain-hide-keys) :version (about)))\n\n(defn get-explained-all-options\n  \"Return any previously set doc-map complete.\"\n  []\n  (assoc @explained-options :version (about)))\n\n(defn get-default-explained-all-options\n  \"Return the base explained options, matches get-default-options\"\n  []\n  default-zprint-options)\n\n(declare config-and-validate)\n(declare config-and-validate-all)\n(declare config-set-options!)\n\n;;\n;; # Configure Everything\n;;\n\n(defn internal-set-options!\n  \"Validate the new options, and update both the saved options\n  and the doc-map as well.  Will throw an exceptino for errors.\"\n  [doc-string doc-map existing-options new-options]\n  (let [[updated-map new-doc-map error-vec]\n          (config-and-validate doc-string doc-map existing-options new-options)]\n    (if error-vec\n      (throw (#?(:clj Exception.\n                 :cljs js/Error.)\n              (apply str\n                \"set-options! for \" doc-string\n                \" found these errors: \" error-vec)))\n      (do (reset-options! updated-map new-doc-map) nil))))\n\n(defn config-configure-all!\n  \"Do external configuration regardless of whether or not it has\n  already been done, replacing any internal configuration.  Returns\n  nil if successful, a vector of errors if not.  Argument, if it\n  exists, says whether or not to try to load additional libraries.\n  Defaults to true, unusually enough.\"\n  ([additional-libraries?]\n   (when additional-libraries?\n     #?(:clj (try #_(println \"requiring cprop.source\")\n                  (require 'cprop.source)\n                  (catch Exception e nil)))\n     #?(:clj (try #_(println \"requiring table.width\")\n                  (require 'table.width)\n                  (catch Exception e nil))))\n   ; Any config changes prior to this will be lost, as\n   ; config-and-validate-all works from the default options!\n   (let [[zprint-options doc-map errors] (config-and-validate-all nil nil)]\n     (if errors\n       errors\n       (do (reset-options! zprint-options doc-map)\n           (config-set-options! {:configured? true} \"internal\")\n           ; If we are running in a repl, then turn on :parallel?\n           ; the first time we run\n           (when (find-ns 'clojure.repl)\n             (internal-set-options! \"REPL execution default\"\n                                    (get-explained-all-options)\n                                    (get-options)\n                                    {:parallel? true}))\n           nil))))\n  ([] (config-configure-all! (:additional-libraries? (get-options)))))\n\n(defn config-set-options!\n  \"Add some options to the current options, checking to make\n  sure that they are correct.\"\n  ([new-options doc-str]\n   ; avoid infinite recursion, while still getting the doc-map updated\n   (when (and (not (:configured? (get-options)))\n              (not (:configured? new-options)))\n     (let [additional-libraries-existing? (:additional-libraries? (get-options))\n           additional-libraries-new?\n             (get new-options :additional-libraries? :not-found)\n           additional-libraries? (if (not= additional-libraries-new? :not-found)\n                                   additional-libraries-new?\n                                   additional-libraries-existing?)]\n       (config-configure-all! additional-libraries?)))\n   (internal-set-options! doc-str\n                          (get-explained-all-options)\n                          (get-options)\n                          new-options))\n  ([new-options]\n   (config-set-options! new-options\n                        (str \"repl or api call \" (inc-explained-sequence)))))\n\n;;\n;; # Options Validation Functions\n;;\n\n(defn build-key-seq-set\n  \"Given a map, build a set of key-seqs that are in the map.  This\n  will leave out the :fn-map elements, and possibly do other special\n  processing.\"\n  [options]\n  (->> (key-seq options)\n       (map vec)\n       (remove #(= (first %) :fn-map))\n       (into #{})))\n\n(def allowed-key-set (atom nil))\n\n(defn set-allowed-key-set!\n  \"Generate the allowed key-set and save it.\"\n  []\n  (reset! allowed-key-set (build-key-seq-set (get-options))))\n\n(defn validate-incoming-keys\n  \"Take an options map, and validate that all of the keys in the\n  map are acceptable.  This is largely a comparison with the keys\n  in the default options map, but includes special processing for\n  the :fn-map, where new keys are allowed and so they are not checked.\n  Returns nil for success and a sequence of invalid keys if failure.\"\n  [options]\n  (let [incoming-key-seq-set (build-key-seq-set options)\n        wrong-key-seqs (difference incoming-key-seq-set @allowed-key-set)]\n    (seq wrong-key-seqs)))\n\n(defn empty-to-nil\n  \"If the sequence is empty, then return nil, else return the sequence.\"\n  [empty-seq]\n  (when-not (empty? empty-seq) empty-seq))\n\n(declare validate-style-map)\n\n(defn validate-options\n  \"Validate an options map, source-str is a descriptive phrase \n  which will be included in the errors (if any). Returns nil \n  for success, a string with error(s) if not.\"\n  ([options source-str]\n   #_(println \"validate-options:\" options)\n   (when options\n     (empty-to-nil\n       (apply str\n         (interpose \", \"\n           (remove #(or (nil? %) (empty? %))\n             (conj []\n                   (validate-basic (dissoc options :style-map) source-str)\n                   (when (:style-map options)\n                     (validate-style-map options)))))))))\n  ([options] (validate-options options nil)))\n\n;;\n;; # Style\n;;\n\n(defn validate-style\n  \"Given a new style definition, validate that the new style contains\n  an acceptable options map.  Returns nil for success, a string with\n  error information if not.\"\n  [style-name style-options]\n  ;(println \"validate-style: style-name:\" style-name\n  ;         \"style-options:\" style-options)\n  (validate-options style-options (str \"style \" style-name)))\n\n(defn validate-style-map\n  \"Given an options map, validate all of the styles in the style-map.\n  Return an error string with any errors.\"\n  [options]\n  (let [error-seq (mapv #(validate-style (first %) (second %))\n                    (:style-map options))\n        ;_ (println \"error-seq-?:\" error-seq)\n        error-seq (remove nil? error-seq)\n        error-str (apply str (interpose \", \" error-seq))]\n    (if (empty? error-str) nil error-str)))\n\n(defn apply-one-style\n  \"Take a [doc-string [existing-map doc-map error-str] style-name]\n  and produce a new [existing-map doc-map error-str] from the style defined\n  in the existing map.\"\n  [doc-string [existing-map doc-map error-str] style-name]\n  (if (or (= style-name :not-specified) (nil? style-name))\n    [existing-map doc-map nil]\n    (let [style-map (if (= style-name :default)\n                      (get-default-options)\n                      (get-in existing-map [:style-map style-name]))]\n      (if style-map\n        (let [updated-map (merge-deep existing-map style-map)]\n          [updated-map\n           (when doc-map\n             (diff-deep-ks (str doc-string \" specified :style \" style-name)\n                           doc-map\n                           (key-seq style-map)\n                           updated-map)) nil])\n        [existing-map doc-map (str \"Style '\" style-name \"' not found!\")]))))\n\n(defn apply-style\n  \"Given an existing-map and a new-map, if the new-map specifies a\n  style, apply it if it exists.  Otherwise do nothing. Return\n  [updated-map new-doc-map error-string]\"\n  [doc-string doc-map existing-map new-map]\n  (let [style-name (get new-map :style :not-specified)]\n    (if (or (= style-name :not-specified) (nil? style-name))\n      [existing-map doc-map nil]\n      (if (not (coll? style-name))\n        (apply-one-style doc-string [existing-map doc-map nil] style-name)\n        (reduce (partial apply-one-style doc-string)\n          [existing-map doc-map nil]\n          style-name)))))\n\n;;\n;; # File Access\n;;\n\n#?(:clj\n     (defn file-line-seq-file\n       \"Turn the lines in a file from the filesystem    \n   into a seq of lines.\"\n       [filename]\n       (line-seq (BufferedReader. (FileReader. ^String filename)))))\n\n;;\n;; # Configuration Utilities\n;;\n\n(defn get-config-from-file\n  \"If there is a :config key in the opts, read in a map from that file.\"\n  ([filename optional?]\n   #?(:clj (when filename\n             (try (let [lines (file-line-seq-file filename)\n                        opts-file (clojure.edn/read-string (apply str lines))]\n                    [opts-file nil filename])\n                  (catch #?(:clj Exception\n                            :cljs :default) e\n                    (if optional?\n                      nil\n                      [nil\n                       (str \"Unable to read configuration from file \" filename\n                            \" because \" e) filename]))))\n      :cljs nil))\n  ([filename] (get-config-from-file filename nil)))\n\n\n(defn get-config-from-map\n  \"If there is a :config-map key in the opts, read in a map from that string.\"\n  [map-string]\n  (when map-string\n    (try (let [opts-map (read-string map-string)] [opts-map nil])\n         (catch #?(:clj Exception\n                   :cljs :default) e\n           [nil\n            (str \"Unable to read configuration from map\" map-string\n                 \" because \" e)]))))\n\n(defn strtf->boolean\n  \"If it is a string, and it is true or false (any case), turn it\n  into true or false, else leave it the way it is.\"\n  [sexpr]\n  (if-not (string? sexpr)\n    sexpr\n    (let [lc-sexpr (clojure.string/lower-case (clojure.string/trim sexpr))]\n      (if-not (or (= lc-sexpr \"true\") (= lc-sexpr \"false\"))\n        sexpr\n        (if (= lc-sexpr \"true\") true false)))))\n\n(defn starts-with?\n  \"Return true if a sequence starts with another sequence.\"\n  [coll seq]\n  (reduce #(and %1 %2) (map = coll seq)))\n\n(defn build-fn-map-update\n  \"Given a map of environment variable entries from cprop, which contain\n  a sequence key and a keyword value, build a map to merge with the\n  fn-map.\"\n  [m]\n  (let [mapseq (seq m)\n        fn-map-entries (filter #(starts-with? [:zprint :fn-map] (first %))\n                         mapseq)\n        fn-map-keys (map #(name (nth (first %) 2)) fn-map-entries)\n        fn-map-vals (map #(keyword (second %)) fn-map-entries)]\n    (zipmap fn-map-keys fn-map-vals)))\n\n(defn update-fn-map\n  \"Given the current options map and a map of environment variables\n  from cprop, update the fn-map as described by the environment variable\n  map.\"\n  [options env-map]\n  (let [fn-map-update (build-fn-map-update env-map)]\n    (if (empty? fn-map-update)\n      options\n      (assoc options :fn-map (merge (:fn-map options) fn-map-update)))))\n\n;;\n;; Special merge only if existing value already exists.  Works even if\n;; existing value is nil!\n;;\n\n(defn replace-existing\n  \"If a particular key-path exists in an existing map, replace it\n  with a new key-path.  The existing key-path can have a nil value.\"\n  [existing [k-path v]]\n  (if (and (seq k-path)\n           (not= (get-in existing k-path :not-present) :not-present))\n    (assoc-in existing k-path v)\n    existing))\n\n(defn merge-existing\n  \"Takes a map with multiple levels, and merge only the value from\n  the second map where the path of the keys already exists in the first\n  map.  Will not add any new keys to the first map.\"\n  [existing new]\n  (reduce replace-existing existing new))\n\n;;\n;; # Configure one map\n;;\n\n(defn config-and-validate\n  \"Do a single new map. Returns [updated-map new-doc-map error-vec]\n  Depends on existing-map to be the full, current options map!\"\n  [doc-string doc-map existing-map new-map]\n  #_(println \"config-and-validate:\" new-map)\n  (if new-map\n    (let [errors (validate-options new-map doc-string)\n          ; remove set elements, and then remove the :remove key too\n          [existing-map new-ap new-doc-map]\n            (perform-remove doc-string doc-map existing-map new-map)\n          ; do style early, so other things in new-map can override it\n          [updated-map new-doc-map style-errors]\n            (apply-style doc-string new-doc-map existing-map new-map)\n          errors (if style-errors (str errors \" \" style-errors) errors)\n          new-updated-map (merge-deep updated-map new-map)\n          new-doc-map (diff-deep-ks doc-string\n                                    new-doc-map\n                                    (key-seq new-map)\n                                    new-updated-map)]\n      [new-updated-map new-doc-map errors])\n    ; if we didn't get a map, just return something with no changes\n    [existing-map doc-map nil]))\n\n;;\n;; # Configure all maps\n;;\n\n(defn config-and-validate-all\n  \"Take the opts and errors from the command line arguments, if any,\n  and do the rest of the configuration and validation along the way.  \n  If there are no command line arguments, that's ok too. Since we\n  took the main.clj out, there aren't going to be any soon.  Left\n  the config map, config file, and cli processing in place in case\n  we go replace the uberjar capability soon.  \n  Returns [new-map doc-map errors]\"\n  [cli-opts cli-errors]\n  (let [default-map (get-default-options)\n        default-doc-map (get-default-explained-all-options)\n        ;\n        ; $HOME/.zprintrc\n        ;\n        home #?(:clj (System/getenv \"HOME\")\n                :cljs nil)\n        file-separator #?(:clj (System/getProperty \"file.separator\")\n                          :cljs nil)\n        zprintrc-file (str home file-separator zprintrc)\n        [opts-rcfile errors-rcfile rc-filename]\n          (when (and home file-separator)\n            (get-config-from-file zprintrc-file :optional))\n        [updated-map new-doc-map rc-errors] (config-and-validate\n                                              (str \"File: \" zprintrc-file)\n                                              default-doc-map\n                                              default-map\n                                              opts-rcfile)\n        ;\n        ; environment variables -- requires zprint on front\n        ;\n        read-system-env-fn #?(:clj (resolve 'cprop.source/read-system-env)\n                              :cljs nil)\n        env-map (when read-system-env-fn (read-system-env-fn))\n        env-and-default-map (merge-existing {:zprint default-map} env-map)\n        new-env-map (diff-map default-map (:zprint env-and-default-map))\n        new-env-map (update-fn-map new-env-map env-map)\n        new-env-map (map-leaves strtf->boolean new-env-map)\n        [updated-map new-doc-map env-errors] (config-and-validate\n                                               (str \"Environment variable\")\n                                               new-doc-map\n                                               updated-map\n                                               new-env-map)\n        ;\n        ; System properties -- requires zprint on front\n        ;\n        read-system-props-fn #?(:clj (resolve 'cprop.source/read-system-props)\n                                :cljs nil)\n        prop-map (when read-system-props-fn (read-system-props-fn))\n        prop-and-default-map (merge-existing {:zprint default-map} prop-map)\n        new-prop-map (diff-map default-map (:zprint prop-and-default-map))\n        new-prop-map (update-fn-map new-prop-map prop-map)\n        new-prop-map (map-leaves strtf->boolean new-prop-map)\n        [updated-map new-doc-map prop-errors] (config-and-validate\n                                                (str \"System property\")\n                                                new-doc-map\n                                                updated-map\n                                                new-prop-map)\n        ;\n        ; --config FILE\n        ;\n        config-filename #?(:clj (:config cli-opts)\n                           :cljs nil)\n        [opts-configfile errors-configfile config-filename]\n          (when config-filename (get-config-from-file zprintrc-file))\n        [updated-map new-doc-map config-errors]\n          (config-and-validate (str \"Config file: \" config-filename)\n                               new-doc-map\n                               updated-map\n                               opts-configfile)\n        ;\n        ; --config-map STRING\n        ;\n        [opts-configmap errors-configmap] (get-config-from-map (:config-map\n                                                                 cli-opts))\n        [updated-map new-doc-map config-errors]\n          (config-and-validate (str \"Config map:\" (:config-map cli-opts))\n                               new-doc-map\n                               updated-map\n                               opts-configmap)\n        ;\n        ; command line options\n        ;\n        opts-cli (select-keys cli-opts zprint-keys)\n        [updated-map new-doc-map cli-errors] (config-and-validate\n                                               (str \"CLI options\")\n                                               new-doc-map\n                                               updated-map\n                                               opts-cli)\n        ;\n        ; Process errors together\n        ;\n        all-errors (apply str\n                     (interpose \"\\n\"\n                       (filter identity\n                         (list errors-rcfile\n                               rc-errors\n                               env-errors\n                               prop-errors\n                               errors-configfile\n                               config-errors\n                               cli-errors))))\n        all-errors (if (empty? all-errors) nil all-errors)]\n    [updated-map new-doc-map all-errors]))\n\n;;\n;; # Help\n;;\n\n(defn vec-str-to-str\n  \"Take a vector of strings and concatenate them into one string with\n  newlines between them.\"\n  [vec-str]\n  (apply str (interpose \"\\n\" vec-str)))\n\n;!zprint {:vector {:wrap? false}}\n\n(def help-str\n  (vec-str-to-str\n    [(about)\n     \"\"\n     \" The basic call uses defaults, prints to stdout\"\n     \"\"\n     \"   (zprint x)\"\n     \"\"\n     \" All zprint functions also allow the following arguments:\"\n     \"\"\n     \"   (zprint x <width>)\"\n     \"   (zprint x <width> <options>)\"\n     \"   (zprint x <options>)\"\n     \"\"\n     \" Format a function to stdout (accepts arguments as above)\"\n     \"\"\n     \"   (zprint-fn <fn-name>)\"\n     \"\"\n     \" Output to a string instead of stdout:\"\n     \"\"\n     \"   (zprint-str x)\"\n     \"   (zprint-fn-str <fn-name>)\"\n     \"\"\n     \" Colorize output for an ANSI terminal:\"\n     \"\"\n     \"   (czprint x)\"\n     \"   (czprint-fn <fn-name>)\"\n     \"   (czprint-str x)\"\n     \"   (czprint-fn-str <fn-name>)\"\n     \"\"\n     \" The first time you call a zprint printing function, it configures\"\n     \" itself from $HOME/.zprintrc, as well as environment variables and\"\n     \" system properties.\"\n     \"\"\n     \" Explain current configuration, shows source of non-default values:\"\n     \"\"\n     \"   (zprint nil :explain)\"\n     \"\"\n     \" Change current configuration from running code:\"\n     \"\"\n     \"   (set-options! <options>)\"\n     \"\"\n     \" Format a complete file (recognizing ;!zprint directives):\"\n     \"\"\n     \"   (zprint-file infile file-name outfile <options>)\"\n     \"\"\n     \" Format a string containing multiple \\\"top level\\\" forms\"\n     \" (recognizing ;!zprint directives):\"\n     \"\"\n     \"   (zprint-file-str file-str zprint-specifier <options> <doc-str>)\"\n     \"\"\n     \" Output information to include when submitting an issue:\"\n     \"\"\n     \"   (zprint nil :support)\"\n     \"\"]))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["zprint.config/about","zprint.config/zprintrc","zprint.config/zprint-keys","zprint.config/explain-hide-keys","zprint.config/zfnstyle","p1__49624#","p2__49623#","zprint.config/default-zprint-options","k?","cljs.core/Keyword","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","zprint.config/no-color-map","zprint.config/configured-options","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","zprint.config/explained-options","zprint.config/explained-sequence","zprint.config/merge-with-fn","val-in-result","val-in-latter","cljs.core/map?","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core/seq","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","zprint.config/merge-deep","seq49625","self__4718__auto__","maps","cljs.core/merge-with","zprint.config/merge-with-fn-doc","doc-string","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","zprint.config/merge-deep-doc","seq49629","G__49630","cljs.core/first","cljs.core/next","self__4717__auto__","zprint.config/remove-key","m","k","cljs.core/coll?","map-key","keys-to-remove","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__49635","G__49636","zprint.config/remove-keys","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","ks","p1__49637#","p2__49638#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","zprint.config/key-seq","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__49640","vec__49641","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","p1__49639#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","zprint.config/remove-elements","map-remove","map-orig","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","clojure.set/difference","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","zprint.config/remove-set-elements","zprint.config/perform-remove","doc-map","options","new-options","options-out","remove-ks-seq","new-options-out","zprint.config/diff-deep-ks","zprint.config/map-leaf","f","zprint.config/map-leaves","cljs.core/keys","zprint.config/value-set-by","set-by","_","value","changed-key-seq","existing","p1__49645#","p2__49646#","zprint.config/diff-map","before","after","cljs.core/second","clojure.data/diff","zprint.config/inc-explained-sequence","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","p__49647","vec__49648","zprint.config/dissoc-two","k1","k2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","zprint.config/add-calculated-options","updated-map","G__49653","cljs.core/assoc-in","cljs.core/zipmap","cljs.core.range.cljs$core$IFn$_invoke$arity$0","cljs.core/not","G__49658","zprint.config/reset-options!","js/Error","cljs.core/reset!","zprint.config.reset_options_BANG_.cljs$core$IFn$_invoke$arity$2","zprint.config/reset-default-options!","cljs.core/deref","zprint.config/get-options","zprint.config/get-default-options","zprint.config/set-explained-options!","zprint.config/get-explained-options","zprint.config/get-explained-all-options","zprint.config/get-default-explained-all-options","zprint.config/internal-set-options!","existing-options","vec__49659","new-doc-map","error-vec","zprint.config/config-and-validate","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/str","G__49663","zprint.config/config-configure-all!","additional-libraries?","vec__49664","zprint-options","errors","zprint.config/config-and-validate-all","G__49667","G__49668","zprint.config/config-set-options!","cljs.core/find-ns","zprint.config.config_configure_all_BANG_.cljs$core$IFn$_invoke$arity$1","G__49670","doc-str","additional-libraries-existing?","additional-libraries-new?","cljs.core.get.cljs$core$IFn$_invoke$arity$3","zprint.config.config_set_options_BANG_.cljs$core$IFn$_invoke$arity$2","zprint.config/build-key-seq-set","cljs.core/vec","p1__49678#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","zprint.config/allowed-key-set","zprint.config/set-allowed-key-set!","zprint.config/validate-incoming-keys","incoming-key-seq-set","wrong-key-seqs","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","zprint.config/empty-to-nil","empty-seq","cljs.core/empty?","G__49681","zprint.config/validate-options","source-str","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","p1__49679#","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","zprint.spec.validate_basic.cljs$core$IFn$_invoke$arity$2","zprint.config/validate-style-map","zprint.config.validate_options.cljs$core$IFn$_invoke$arity$2","zprint.config/validate-style","style-name","style-options","error-seq","p1__49682#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","error-str","p__49683","vec__49684","zprint.config/apply-one-style","existing-map","style-map","zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic","zprint.config/apply-style","new-map","G__49690","zprint.config/get-config-from-file","filename","optional?","zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$2","zprint.config/get-config-from-map","map-string","e49692","opts-map","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","e","zprint.config/strtf->boolean","sexpr","lc-sexpr","clojure.string/lower-case","clojure.string/trim","zprint.config/starts-with?","coll","seq","p1__49693#","p2__49694#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","and__4120__auto__","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/=","zprint.config/build-fn-map-update","mapseq","fn-map-entries","p1__49699#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","fn-map-keys","p1__49700#","cljs.core/name","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","fn-map-vals","p1__49701#","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","zprint.config/update-fn-map","env-map","fn-map-update","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__49703","vec__49704","zprint.config/replace-existing","k-path","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","zprint.config/merge-existing","new","vec__49707","vec__49710","new-ap","style-errors","new-updated-map","cli-opts","cli-errors","vec__49713","vec__49716","vec__49719","vec__49722","vec__49725","vec__49728","vec__49731","vec__49734","vec__49737","default-map","default-doc-map","home","file-separator","zprintrc-file","opts-rcfile","errors-rcfile","rc-filename","rc-errors","read-system-env-fn","env-and-default-map","new-env-map","env-errors","read-system-props-fn","prop-map","prop-and-default-map","new-prop-map","prop-errors","config-filename","opts-configfile","errors-configfile","zprint.config.get_config_from_file.cljs$core$IFn$_invoke$arity$1","config-errors","opts-configmap","errors-configmap","opts-cli","cljs.core/select-keys","all-errors","cljs.core/identity","cljs.core/List","zprint.config/vec-str-to-str","vec-str","zprint.config/help-str"]]],"~:cache-keys",["~#cmap",[["^19","cljs/spec/gen/alpha.cljs"],[1568638518000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^N","^M","~$goog.Uri"]]],["^19","cljs/tools/reader/impl/utils.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^Q","~$goog.string"]]],["^19","goog/math/math.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","~$goog.array","~$goog.asserts"]]],["^19","goog/array/array.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^1M"]]],["^19","goog/debug/error.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","cljs/tools/reader/edn.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1K","~$goog.string.StringBuffer"]]],["^19","goog/dom/nodetype.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","cljs/tools/reader/impl/inspect.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M"]]],["^19","zprint/config.cljc"],[1568718528000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^Q","^P","^O","^R","^T","^S"]]],["^19","cljs/tools/reader.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^1O","^1P","^1Q","^1N","^1L","^1K","^1S"]]],["^19","goog/object/object.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],"~:SHADOW-TIMESTAMP",[1568638379000,1568638518000],["^19","goog/math/long.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^1M","~$goog.reflect"]]],["^19","goog/string/internal.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","goog/functions/functions.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","clojure/walk.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M"]]],["^19","goog/structs/map.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","cljs/reader.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","~$goog.object","^1R","~$cljs.tools.reader.edn","^1S"]]],["^19","goog/asserts/asserts.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^1L","^1M","^1K","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","cljs/spec/alpha.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^1X","~$clojure.walk","~$cljs.spec.gen.alpha","^Q"]]],["^19","goog/base.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",[]]],["^19","goog/structs/structs.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^1L","^1X"]]],["^19","cljs/tools/reader/impl/errors.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^1O","^Q","~$cljs.tools.reader.impl.inspect"]]],["^19","clojure/string.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^1K","^1S"]]],["^19","zprint/zfns.cljc"],[1568718528000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M"]]],["^19","goog/string/string.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","~$goog.string.internal"]]],["^19","clojure/data.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^O"]]],["^19","goog/reflect/reflect.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","goog/string/stringbuffer.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","cljs/tools/reader/reader_types.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^1P","^1K","^1S"]]],["^19","goog/iter/iter.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^1L","^1M","~$goog.functions","~$goog.math"]]],["^19","zprint/spec.cljc"],[1568718528000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","~$cljs.spec.alpha"]]],["^19","zprint/sutil.cljc"],[1568718528000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^Q","~$zprint.zfns","^S"]]],["^19","cljs/tools/reader/impl/commons.cljs"],[1543150543000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M","^1N","^1O","^1P"]]],["^19","cljs/core.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^1K","^1X","^1L","^1J","^1S"]]],["^19","goog/math/integer.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N"]]],["^19","clojure/set.cljs"],[1568638518000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^M"]]],["^19","goog/uri/utils.js"],[1568638513000,"^1F",["^ ","^1G",null,"^1H",["^F",[]],"^1I",["^N","^1L","^1M","^1K"]]]]],"~:clj-info",["^ ","jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/zprint/zprint/0.4.7/zprint-0.4.7.jar!/zprint/smacros.cljc",1568718528000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1537794058000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1543150543000,"jar:file:/home/jimmy/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1537794256000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1568638518000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1562843760000,"jar:file:/home/jimmy/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/walk.clj",1562843760000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","zprint/config.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O","^P","^P","^Q","^Q","^R","^R","^S","^S","^T","^T","~$d","^R"],"^U",["^F",["^V"]],"~:shadow/js-access-global",["^F",["Error"]],"^W",["^ ","^X","^O","^Y","^T","^Z","^S"],"~:defs",["^ ","~$update-fn-map",["^ ","~:protocol-inline",null,"^5",["^ ","^6","zprint/config.cljc","^7",1105,"^8",7,"^9",1105,"^:",20,"~:arglists",["^11",["~$quote",["^11",[["~$options","~$env-map"]]]]],"~:doc","Given the current options map and a map of environment variables\n  from cprop, update the fn-map as described by the environment variable\n  map."],"^G","~$zprint.config/update-fn-map","^6","zprint/config.cljc","^:",20,"~:method-params",["^11",[["^3:","^3;"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^8",1,"~:variadic?",false,"^7",1105,"~:ret-tag",["^F",[null,"~$clj","~$any"]],"^9",1105,"~:max-fixed-arity",2,"~:fn-var",true,"^38",["^11",["^39",["^11",[["^3:","^3;"]]]]],"^3<","Given the current options map and a map of environment variables\n  from cprop, update the fn-map as described by the environment variable\n  map."],"~$inc-explained-sequence",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",765,"^8",7,"^9",765,"^:",29,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return current explained-seqence and add one to it."],"^G","~$zprint.config/inc-explained-sequence","^6","zprint/config.cljc","^:",29,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",765,"^3B",["^F",[null,"^3D"]],"^9",765,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return current explained-seqence and add one to it."],"~$build-fn-map-update",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1093,"^8",7,"^9",1093,"^:",26,"^38",["^11",["^39",["^11",[["~$m"]]]]],"^3<","Given a map of environment variable entries from cprop, which contain\n  a sequence key and a keyword value, build a map to merge with the\n  fn-map."],"^G","~$zprint.config/build-fn-map-update","^6","zprint/config.cljc","^:",26,"^3>",["^11",[["~$m"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1093,"^3B","^3C","^9",1093,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["~$m"]]]]],"^3<","Given a map of environment variable entries from cprop, which contain\n  a sequence key and a keyword value, build a map to merge with the\n  fn-map."],"~$value-set-by",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",743,"^8",7,"^9",743,"^:",19,"^38",["^11",["^39",["^11",[["~$set-by","~$_","~$value"]]]]],"^3<","Create a map with a :value and :set-by elements."],"^G","~$zprint.config/value-set-by","^6","zprint/config.cljc","^:",19,"^3>",["^11",[["^3L","~$_","^3M"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",743,"^3B","~$cljs.core/IMap","^9",743,"^3E",3,"^3F",true,"^38",["^11",["^39",["^11",[["^3L","~$_","^3M"]]]]],"^3<","Create a map with a :value and :set-by elements."],"~$internal-set-options!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",852,"^8",7,"^9",852,"^:",28,"^38",["^11",["^39",["^11",[["~$doc-string","~$doc-map","~$existing-options","~$new-options"]]]]],"^3<","Validate the new options, and update both the saved options\n  and the doc-map as well.  Will throw an exceptino for errors."],"^G","~$zprint.config/internal-set-options!","^6","zprint/config.cljc","^:",28,"^3>",["^11",[["^3Q","^3R","^3S","^3T"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",852,"^3B","~$clj-nil","^9",852,"^3E",4,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q","^3R","^3S","^3T"]]]]],"^3<","Validate the new options, and update both the saved options\n  and the doc-map as well.  Will throw an exceptino for errors."],"~$merge-with-fn-doc",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",651,"^8",7,"^9",651,"^:",24,"^38",["^11",["^39",["^11",[["^3Q","~$val-in-result","~$val-in-latter"]]]]],"^3<","Take two arguments of things to merge and figure it out."],"^G","~$zprint.config/merge-with-fn-doc","^6","zprint/config.cljc","^:",24,"^3>",["^11",[["^3Q","^3X","^3Y"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",651,"^3B",["^F",["^3D","^3O","^3V"]],"^9",651,"^3E",3,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q","^3X","^3Y"]]]]],"^3<","Take two arguments of things to merge and figure it out."],"~$zprint-keys",["^ ","^G","~$zprint.config/zprint-keys","^6","zprint/config.cljc","^7",41,"^8",1,"^9",41,"^:",17,"^5",["^ ","^6","zprint/config.cljc","^7",41,"^8",6,"^9",41,"^:",17],"~:tag","~$cljs.core/IVector"],"~$config-and-validate",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1140,"^8",7,"^9",1140,"^:",26,"^38",["^11",["^39",["^11",[["^3Q","^3R","~$existing-map","~$new-map"]]]]],"^3<","Do a single new map. Returns [updated-map new-doc-map error-vec]\n  Depends on existing-map to be the full, current options map!"],"^G","~$zprint.config/config-and-validate","^6","zprint/config.cljc","^:",26,"^3>",["^11",[["^3Q","^3R","^44","^45"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1140,"^3B","^42","^9",1140,"^3E",4,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q","^3R","^44","^45"]]]]],"^3<","Do a single new map. Returns [updated-map new-doc-map error-vec]\n  Depends on existing-map to be the full, current options map!"],"~$strtf->boolean",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1077,"^8",7,"^9",1077,"^:",21,"^38",["^11",["^39",["^11",[["~$sexpr"]]]]],"^3<","If it is a string, and it is true or false (any case), turn it\n  into true or false, else leave it the way it is."],"^G","~$zprint.config/strtf->boolean","^6","zprint/config.cljc","^:",21,"^3>",["^11",[["^48"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1077,"^3B",["^F",[null,"~$boolean"]],"^9",1077,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^48"]]]]],"^3<","If it is a string, and it is true or false (any case), turn it\n  into true or false, else leave it the way it is."],"~$get-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",813,"^8",7,"^9",813,"^:",18,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return any prevsiouly set options."],"^G","~$zprint.config/get-options","^6","zprint/config.cljc","^:",18,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",813,"^3B","^3D","^9",813,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return any prevsiouly set options."],"~$get-explained-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",829,"^8",7,"^9",829,"^:",28,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return any previously set doc-map."],"^G","~$zprint.config/get-explained-options","^6","zprint/config.cljc","^:",28,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",829,"^3B",["^F",["^3C","^3D"]],"^9",829,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return any previously set doc-map."],"~$about",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",23,"^8",7,"^9",23,"^:",12,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return version of this program."],"^G","~$zprint.config/about","^6","zprint/config.cljc","^:",12,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",23,"^3B","~$string","^9",23,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return version of this program."],"~$starts-with?",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1088,"^8",7,"^9",1088,"^:",19,"^38",["^11",["^39",["^11",[["~$coll","~$seq"]]]]],"^3<","Return true if a sequence starts with another sequence."],"^G","~$zprint.config/starts-with?","^6","zprint/config.cljc","^:",19,"^3>",["^11",[["^4C","^4D"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1088,"^3B","^3D","^9",1088,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^4C","^4D"]]]]],"^3<","Return true if a sequence starts with another sequence."],"~$remove-set-elements",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",705,"^8",7,"^9",705,"^:",26,"^38",["^11",["^39",["^11",[["~$map-orig","~$map-remove"]]]]],"^3<","Take two maps, and remove all of the elemnts in the second maps sets\n  from equivalent places in the first map."],"^G","~$zprint.config/remove-set-elements","^6","zprint/config.cljc","^:",26,"^3>",["^11",[["^4G","^4H"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",705,"^3B",["^F",[null,"^3D"]],"^9",705,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^4G","^4H"]]]]],"^3<","Take two maps, and remove all of the elemnts in the second maps sets\n  from equivalent places in the first map."],"~$validate-style",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",979,"^8",7,"^9",979,"^:",21,"^38",["^11",["^39",["^11",[["~$style-name","~$style-options"]]]]],"^3<","Given a new style definition, validate that the new style contains\n  an acceptable options map.  Returns nil for success, a string with\n  error information if not."],"^G","~$zprint.config/validate-style","^6","zprint/config.cljc","^:",21,"^3>",["^11",[["^4K","^4L"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",979,"^3B",["^F",[null,"^3V"]],"^9",979,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^4K","^4L"]]]]],"^3<","Given a new style definition, validate that the new style contains\n  an acceptable options map.  Returns nil for success, a string with\n  error information if not."],"~$get-default-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",815,"^8",7,"^9",815,"^:",26,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return the base default options."],"^G","~$zprint.config/get-default-options","^6","zprint/config.cljc","^:",26,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",815,"^3B","^3O","^9",815,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return the base default options."],"~$remove-key",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",668,"^8",7,"^9",668,"^:",17,"^38",["^11",["^39",["^11",[["~$m","~$k"]]]]],"^3<","Remove a single key from a map or remove a series of\n  keys from an internal map."],"^G","~$zprint.config/remove-key","^6","zprint/config.cljc","^:",17,"^3>",["^11",[["~$m","~$k"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",668,"^3B",["^F",["^3C","^3D","^3V"]],"^9",668,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["~$m","~$k"]]]]],"^3<","Remove a single key from a map or remove a series of\n  keys from an internal map."],"~$key-seq",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",687,"^8",7,"^9",687,"^:",14,"^38",["^11",["^39",["^11",[["~$m"]]]]],"^3<","Get the key seq for every terminal element in a map."],"^G","~$zprint.config/key-seq","^6","zprint/config.cljc","^:",14,"^3>",["^11",[["~$m"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",687,"^3B",["^F",["^3D","^3V"]],"^9",687,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["~$m"]]]]],"^3<","Get the key seq for every terminal element in a map."],"~$merge-deep",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",646,"^8",7,"^9",646,"^:",17,"^38",["^11",["^39",["^11",[["~$&","~$maps"]]]]],"^3<","Do a merge of maps all the way down.","~:top-fn",["^ ","^3A",true,"~:fixed-arity",0,"^3E",0,"^3>",[["^11",["^4U"]]],"^38",["^11",[["~$&","^4U"]]],"^3@",["^11",[null]]]],"^G","~$zprint.config/merge-deep","^6","zprint/config.cljc","^:",17,"^4V",["^ ","^3A",true,"^4W",0,"^3E",0,"^3>",[["^11",["^4U"]]],"^38",["^11",[["~$&","^4U"]]],"^3@",["^11",[null]]],"^3>",[["^11",["^4U"]]],"^3?",null,"^4W",0,"^3@",["^11",[null]],"^8",1,"^3A",true,"~:methods",[["^ ","^4W",0,"^3A",true,"^41","^3D"]],"^7",646,"^3B","^3D","^9",646,"^3E",0,"^3F",true,"^38",["^11",[["~$&","^4U"]]],"^3<","Do a merge of maps all the way down."],"~$config-and-validate-all",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1167,"^8",7,"^9",1167,"^:",30,"^38",["^11",["^39",["^11",[["~$cli-opts","~$cli-errors"]]]]],"^3<","Take the opts and errors from the command line arguments, if any,\n  and do the rest of the configuration and validation along the way.  \n  If there are no command line arguments, that's ok too. Since we\n  took the main.clj out, there aren't going to be any soon.  Left\n  the config map, config file, and cli processing in place in case\n  we go replace the uberjar capability soon.  \n  Returns [new-map doc-map errors]"],"^G","~$zprint.config/config-and-validate-all","^6","zprint/config.cljc","^:",30,"^3>",["^11",[["^4[","^50"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1167,"^3B","^42","^9",1167,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^4[","^50"]]]]],"^3<","Take the opts and errors from the command line arguments, if any,\n  and do the rest of the configuration and validation along the way.  \n  If there are no command line arguments, that's ok too. Since we\n  took the main.clj out, there aren't going to be any soon.  Left\n  the config map, config file, and cli processing in place in case\n  we go replace the uberjar capability soon.  \n  Returns [new-map doc-map errors]"],"~$dissoc-two",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",770,"^8",7,"^9",770,"^:",17,"^38",["^11",["^39",["^11",[["~$m",["~$k1","~$k2"]]]]]],"^3<","Do a simple dissoc-in for two levels.  Does not remove the\n  second map if it is empty."],"^G","~$zprint.config/dissoc-two","^6","zprint/config.cljc","^:",17,"^3>",["^11",[["~$m","~$p__49647"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",770,"^3B",["^F",["^3C","^3D"]],"^9",770,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["~$m",["^53","^54"]]]]]],"^3<","Do a simple dissoc-in for two levels.  Does not remove the\n  second map if it is empty."],"~$apply-one-style",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",999,"^8",7,"^9",999,"^:",22,"^38",["^11",["^39",["^11",[["^3Q",["^44","^3R","~$error-str"],"^4K"]]]]],"^3<","Take a [doc-string [existing-map doc-map error-str] style-name]\n  and produce a new [existing-map doc-map error-str] from the style defined\n  in the existing map."],"^G","~$zprint.config/apply-one-style","^6","zprint/config.cljc","^:",22,"^3>",["^11",[["^3Q","~$p__49683","^4K"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",999,"^3B","^42","^9",999,"^3E",3,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q",["^44","^3R","^58"],"^4K"]]]]],"^3<","Take a [doc-string [existing-map doc-map error-str] style-name]\n  and produce a new [existing-map doc-map error-str] from the style defined\n  in the existing map."],"~$add-calculated-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",776,"^8",7,"^9",776,"^:",29,"^38",["^11",["^39",["^11",[["~$updated-map"]]]]],"^3<","Take an updated-map and generate calculated options\n  from it.  Takes the updated-map and further updates\n  it, being smart about things that were set to nil."],"^G","~$zprint.config/add-calculated-options","^6","zprint/config.cljc","^:",29,"^3>",["^11",[["^5<"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",776,"^3B",["^F",[null,"^3C","^3D"]],"^9",776,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^5<"]]]]],"^3<","Take an updated-map and generate calculated options\n  from it.  Takes the updated-map and further updates\n  it, being smart about things that were set to nil."],"~$validate-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",958,"^8",7,"^9",958,"^:",23,"^38",["^11",["^39",["^11",[["^3:","~$source-str"],["^3:"]]]]],"^3<","Validate an options map, source-str is a descriptive phrase \n  which will be included in the errors (if any). Returns nil \n  for success, a string with error(s) if not.","^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^3:","^5?"],["^3:"]]],"^38",["^11",[["^3:","^5?"],["^3:"]]],"^3@",["^11",[null,null]]]],"^G","~$zprint.config/validate-options","^6","zprint/config.cljc","^:",23,"^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^3:","^5?"],["^3:"]]],"^38",["^11",[["^3:","^5?"],["^3:"]]],"^3@",["^11",[null,null]]],"^3>",["^11",[["^3:","^5?"],["^3:"]]],"^3?",null,"^4W",2,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^4Y",[["^ ","^4W",2,"^3A",false,"^41",["^F",[null,"^3V"]]],["^ ","^4W",1,"^3A",false,"^41",["^F",[null,"^3V"]]]],"^7",958,"^9",958,"^3E",2,"^3F",true,"^38",["^11",[["^3:","^5?"],["^3:"]]],"^3<","Validate an options map, source-str is a descriptive phrase \n  which will be included in the errors (if any). Returns nil \n  for success, a string with error(s) if not."],"~$zprintrc",["^ ","^G","~$zprint.config/zprintrc","^6","zprint/config.cljc","^7",32,"^8",1,"^9",32,"^:",14,"^5",["^ ","^6","zprint/config.cljc","^7",32,"^8",6,"^9",32,"^:",14],"^41","^4A"],"~$merge-with-fn",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",636,"^8",7,"^9",636,"^:",20,"^38",["^11",["^39",["^11",[["^3X","^3Y"]]]]],"^3<","Take two arguments of things to merge and figure it out.\n  Works for sets too."],"^G","~$zprint.config/merge-with-fn","^6","zprint/config.cljc","^:",20,"^3>",["^11",[["^3X","^3Y"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",636,"^3B",["^F",[null,"^3D","^3V"]],"^9",636,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^3X","^3Y"]]]]],"^3<","Take two arguments of things to merge and figure it out.\n  Works for sets too."],"~$explained-options",["^ ","^G","~$zprint.config/explained-options","^6","zprint/config.cljc","^7",628,"^8",1,"^9",628,"^:",23,"^5",["^ ","^6","zprint/config.cljc","^7",628,"^8",6,"^9",628,"^:",23],"^41","~$cljs.core/Atom"],"~$perform-remove",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",713,"^8",7,"^9",713,"^:",21,"^38",["^11",["^39",["^11",[["^3Q","^3R","^3:","^3T"]]]]],"^3<","Take an options map, and remove the set elements that are at the :remove\n  key, and also remove the :remove key."],"^G","~$zprint.config/perform-remove","^6","zprint/config.cljc","^:",21,"^3>",["^11",[["^3Q","^3R","^3:","^3T"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",713,"^3B","^42","^9",713,"^3E",4,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q","^3R","^3:","^3T"]]]]],"^3<","Take an options map, and remove the set elements that are at the :remove\n  key, and also remove the :remove key."],"~$empty-to-nil",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",951,"^8",7,"^9",951,"^:",19,"^38",["^11",["^39",["^11",[["~$empty-seq"]]]]],"^3<","If the sequence is empty, then return nil, else return the sequence."],"^G","~$zprint.config/empty-to-nil","^6","zprint/config.cljc","^:",19,"^3>",["^11",[["^5K"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",951,"^3B",["^F",[null,"^3V"]],"^9",951,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^5K"]]]]],"^3<","If the sequence is empty, then return nil, else return the sequence."],"~$validate-incoming-keys",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",940,"^8",7,"^9",940,"^:",29,"^38",["^11",["^39",["^11",[["^3:"]]]]],"^3<","Take an options map, and validate that all of the keys in the\n  map are acceptable.  This is largely a comparison with the keys\n  in the default options map, but includes special processing for\n  the :fn-map, where new keys are allowed and so they are not checked.\n  Returns nil for success and a sequence of invalid keys if failure."],"^G","~$zprint.config/validate-incoming-keys","^6","zprint/config.cljc","^:",29,"^3>",["^11",[["^3:"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",940,"^3B","^4D","^9",940,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^3:"]]]]],"^3<","Take an options map, and validate that all of the keys in the\n  map are acceptable.  This is largely a comparison with the keys\n  in the default options map, but includes special processing for\n  the :fn-map, where new keys are allowed and so they are not checked.\n  Returns nil for success and a sequence of invalid keys if failure."],"~$get-explained-all-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",834,"^8",7,"^9",834,"^:",32,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return any previously set doc-map complete."],"^G","~$zprint.config/get-explained-all-options","^6","zprint/config.cljc","^:",32,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",834,"^3B",["^F",["^3C","^3D"]],"^9",834,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return any previously set doc-map complete."],"~$help-str",["^ ","^G","~$zprint.config/help-str","^6","zprint/config.cljc","^7",1283,"^8",1,"^9",1283,"^:",14,"^5",["^ ","^6","zprint/config.cljc","^7",1283,"^8",6,"^9",1283,"^:",14],"^41","^3D"],"~$set-allowed-key-set!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",935,"^8",7,"^9",935,"^:",27,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Generate the allowed key-set and save it."],"^G","~$zprint.config/set-allowed-key-set!","^6","zprint/config.cljc","^:",27,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",935,"^3B",["^F",[null,"^3D"]],"^9",935,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Generate the allowed key-set and save it."],"~$get-config-from-file",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1048,"^8",7,"^9",1048,"^:",27,"^38",["^11",["^39",["^11",[["~$filename","~$optional?"],["^5V"]]]]],"^3<","If there is a :config key in the opts, read in a map from that file.","^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^5V","^5W"],["^5V"]]],"^38",["^11",[["^5V","^5W"],["^5V"]]],"^3@",["^11",[null,null]]]],"^G","~$zprint.config/get-config-from-file","^6","zprint/config.cljc","^:",27,"^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^5V","^5W"],["^5V"]]],"^38",["^11",[["^5V","^5W"],["^5V"]]],"^3@",["^11",[null,null]]],"^3>",["^11",[["^5V","^5W"],["^5V"]]],"^3?",null,"^4W",2,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^4Y",[["^ ","^4W",2,"^3A",false,"^41","^3V"],["^ ","^4W",1,"^3A",false,"^41","^3V"]],"^7",1048,"^9",1048,"^3E",2,"^3F",true,"^38",["^11",[["^5V","^5W"],["^5V"]]],"^3<","If there is a :config key in the opts, read in a map from that file."],"~$remove-elements",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",699,"^8",7,"^9",699,"^:",22,"^38",["^11",["^39",["^11",[["^4H","^4G","~$ks"]]]]],"^3<","Given a key sequence and two maps, remove the elements of the set at\n  the key sequence in the second map from set in the first map."],"^G","~$zprint.config/remove-elements","^6","zprint/config.cljc","^:",22,"^3>",["^11",[["^4H","^4G","^5Z"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",699,"^3B",["^F",["^3C","^3D"]],"^9",699,"^3E",3,"^3F",true,"^38",["^11",["^39",["^11",[["^4H","^4G","^5Z"]]]]],"^3<","Given a key sequence and two maps, remove the elements of the set at\n  the key sequence in the second map from set in the first map."],"~$explained-sequence",["^ ","^G","~$zprint.config/explained-sequence","^6","zprint/config.cljc","^7",630,"^8",1,"^9",630,"^:",24,"^5",["^ ","^6","zprint/config.cljc","^7",630,"^8",6,"^9",630,"^:",24],"^41","^5G"],"~$explain-hide-keys",["^ ","^G","~$zprint.config/explain-hide-keys","^6","zprint/config.cljc","^7",43,"^8",1,"^9",43,"^:",23,"^5",["^ ","^6","zprint/config.cljc","^7",43,"^8",6,"^9",43,"^:",23],"^41","^42"],"~$vec-str-to-str",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1275,"^8",7,"^9",1275,"^:",21,"^38",["^11",["^39",["^11",[["~$vec-str"]]]]],"^3<","Take a vector of strings and concatenate them into one string with\n  newlines between them."],"^G","~$zprint.config/vec-str-to-str","^6","zprint/config.cljc","^:",21,"^3>",["^11",[["^65"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1275,"^3B","^3D","^9",1275,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^65"]]]]],"^3<","Take a vector of strings and concatenate them into one string with\n  newlines between them."],"~$config-configure-all!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",866,"^8",7,"^9",866,"^:",28,"^38",["^11",["^39",["^11",[["~$additional-libraries?"],[]]]]],"^3<","Do external configuration regardless of whether or not it has\n  already been done, replacing any internal configuration.  Returns\n  nil if successful, a vector of errors if not.  Argument, if it\n  exists, says whether or not to try to load additional libraries.\n  Defaults to true, unusually enough.","^4V",["^ ","^3A",false,"^4W",1,"^3E",1,"^3>",["^11",[["^68"],[]]],"^38",["^11",[["^68"],[]]],"^3@",["^11",[null,null]]]],"^G","~$zprint.config/config-configure-all!","^6","zprint/config.cljc","^:",28,"^4V",["^ ","^3A",false,"^4W",1,"^3E",1,"^3>",["^11",[["^68"],[]]],"^38",["^11",[["^68"],[]]],"^3@",["^11",[null,null]]],"^3>",["^11",[["^68"],[]]],"^3?",null,"^4W",1,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^4Y",[["^ ","^4W",1,"^3A",false,"^41",["^F",["^3D","^3V"]]],["^ ","^4W",0,"^3A",false,"^41",["^F",["^3D","^3V"]]]],"^7",866,"^9",866,"^3E",1,"^3F",true,"^38",["^11",[["^68"],[]]],"^3<","Do external configuration regardless of whether or not it has\n  already been done, replacing any internal configuration.  Returns\n  nil if successful, a vector of errors if not.  Argument, if it\n  exists, says whether or not to try to load additional libraries.\n  Defaults to true, unusually enough."],"~$configured-options",["^ ","^G","~$zprint.config/configured-options","^6","zprint/config.cljc","^7",626,"^8",1,"^9",626,"^:",24,"^5",["^ ","^6","zprint/config.cljc","^7",626,"^8",6,"^9",626,"^:",24],"^41","^5G"],"~$map-leaves",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",737,"^8",7,"^9",737,"^:",17,"^38",["^11",["^39",["^11",[["~$f","~$m"]]]]],"^3<","Return a map of the same shape but where every leaf value\n  (i.e., not map value) has been replaced by the (f leaf-value)."],"^G","~$zprint.config/map-leaves","^6","zprint/config.cljc","^:",17,"^3>",["^11",[["~$f","~$m"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",737,"^3B",["^F",[null,"^3D"]],"^9",737,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["~$f","~$m"]]]]],"^3<","Return a map of the same shape but where every leaf value\n  (i.e., not map value) has been replaced by the (f leaf-value)."],"~$no-color-map",["^ ","^G","~$zprint.config/no-color-map","^6","zprint/config.cljc","^7",603,"^8",1,"^9",603,"^:",18,"^5",["^ ","^6","zprint/config.cljc","^7",603,"^8",6,"^9",603,"^:",18],"^41","^3O"],"~$set-explained-options!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",824,"^8",7,"^9",824,"^:",29,"^38",["^11",["^39",["^11",[["^3R"]]]]],"^3<","Set options to be used on every call."],"^G","~$zprint.config/set-explained-options!","^6","zprint/config.cljc","^:",29,"^3>",["^11",[["^3R"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",824,"^3B",["^F",[null,"^3D"]],"^9",824,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^3R"]]]]],"^3<","Set options to be used on every call."],"~$remove-keys",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",678,"^8",7,"^9",678,"^:",18,"^38",["^11",["^39",["^11",[["~$m","^5Z"]]]]],"^3<","Remove keys from a map at multiple levels."],"^G","~$zprint.config/remove-keys","^6","zprint/config.cljc","^:",18,"^3>",["^11",[["~$m","^5Z"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",678,"^3B",["^F",[null,"^3D"]],"^9",678,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["~$m","^5Z"]]]]],"^3<","Remove keys from a map at multiple levels."],"~$diff-deep-ks",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",748,"^8",7,"^9",748,"^:",19,"^38",["^11",["^39",["^11",[["^3Q","^3R","~$changed-key-seq","~$existing"]]]]],"^3<","Update an existing doc-map with labels of everything that shows up\n  in the ks-seq."],"^G","~$zprint.config/diff-deep-ks","^6","zprint/config.cljc","^:",19,"^3>",["^11",[["^3Q","^3R","^6E","^6F"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",748,"^3B",["^F",[null,"^3D"]],"^9",748,"^3E",4,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q","^3R","^6E","^6F"]]]]],"^3<","Update an existing doc-map with labels of everything that shows up\n  in the ks-seq."],"~$merge-existing",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1129,"^8",7,"^9",1129,"^:",21,"^38",["^11",["^39",["^11",[["^6F","~$new"]]]]],"^3<","Takes a map with multiple levels, and merge only the value from\n  the second map where the path of the keys already exists in the first\n  map.  Will not add any new keys to the first map."],"^G","~$zprint.config/merge-existing","^6","zprint/config.cljc","^:",21,"^3>",["^11",[["^6F","^6I"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1129,"^3B",["^F",[null,"^3D"]],"^9",1129,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^6F","^6I"]]]]],"^3<","Takes a map with multiple levels, and merge only the value from\n  the second map where the path of the keys already exists in the first\n  map.  Will not add any new keys to the first map."],"~$validate-style-map",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",988,"^8",7,"^9",988,"^:",25,"^38",["^11",["^39",["^11",[["^3:"]]]]],"^3<","Given an options map, validate all of the styles in the style-map.\n  Return an error string with any errors."],"^G","~$zprint.config/validate-style-map","^6","zprint/config.cljc","^:",25,"^3>",["^11",[["^3:"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",988,"^3B",["^F",["^3D","^3V"]],"^9",988,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^3:"]]]]],"^3<","Given an options map, validate all of the styles in the style-map.\n  Return an error string with any errors."],"~$apply-style",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1019,"^8",7,"^9",1019,"^:",18,"^38",["^11",["^39",["^11",[["^3Q","^3R","^44","^45"]]]]],"^3<","Given an existing-map and a new-map, if the new-map specifies a\n  style, apply it if it exists.  Otherwise do nothing. Return\n  [updated-map new-doc-map error-string]"],"^G","~$zprint.config/apply-style","^6","zprint/config.cljc","^:",18,"^3>",["^11",[["^3Q","^3R","^44","^45"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1019,"^3B",["^F",[null,"^42","^3D"]],"^9",1019,"^3E",4,"^3F",true,"^38",["^11",["^39",["^11",[["^3Q","^3R","^44","^45"]]]]],"^3<","Given an existing-map and a new-map, if the new-map specifies a\n  style, apply it if it exists.  Otherwise do nothing. Return\n  [updated-map new-doc-map error-string]"],"~$default-zprint-options",["^ ","^G","~$zprint.config/default-zprint-options","^6","zprint/config.cljc","^7",367,"^8",1,"^9",367,"^:",28,"^5",["^ ","^6","zprint/config.cljc","^7",367,"^8",6,"^9",367,"^:",28],"^41","^3O"],"~$diff-map",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",757,"^8",7,"^9",757,"^:",15,"^38",["^11",["^39",["^11",[["~$before","~$after"]]]]],"^3<","Diff two maps."],"^G","~$zprint.config/diff-map","^6","zprint/config.cljc","^:",15,"^3>",["^11",[["^6R","^6S"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",757,"^3B",["^F",["^3D","^3V"]],"^9",757,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^6R","^6S"]]]]],"^3<","Diff two maps."],"~$reset-options!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",799,"^8",7,"^9",799,"^:",21,"^38",["^11",["^39",["^11",[["^5<","^3R"],["^5<"]]]]],"^3<","Replace options to be used on every call.  You must have validated\n  these options already!","^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^5<","^3R"],["^5<"]]],"^38",["^11",[["^5<","^3R"],["^5<"]]],"^3@",["^11",[null,null]]]],"^G","~$zprint.config/reset-options!","^6","zprint/config.cljc","^:",21,"^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^5<","^3R"],["^5<"]]],"^38",["^11",[["^5<","^3R"],["^5<"]]],"^3@",["^11",[null,null]]],"^3>",["^11",[["^5<","^3R"],["^5<"]]],"^3?",null,"^4W",2,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^4Y",[["^ ","^4W",2,"^3A",false,"^41",["^F",[null,"^3D","^3V"]]],["^ ","^4W",1,"^3A",false,"^41",["^F",[null,"^3D","^3V"]]]],"^7",799,"^9",799,"^3E",2,"^3F",true,"^38",["^11",[["^5<","^3R"],["^5<"]]],"^3<","Replace options to be used on every call.  You must have validated\n  these options already!"],"~$map-leaf",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",730,"^8",7,"^9",730,"^:",15,"^38",["^11",["^39",["^11",[["~$f","~$m","~$k"]]]]],"^3<","Given a function and map and a key, replace the value with \n  (f leaf) or (map-leaves f m)."],"^G","~$zprint.config/map-leaf","^6","zprint/config.cljc","^:",15,"^3>",["^11",[["~$f","~$m","~$k"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",730,"^3B",["^F",["^3C","^3D"]],"^9",730,"^3E",3,"^3F",true,"^38",["^11",["^39",["^11",[["~$f","~$m","~$k"]]]]],"^3<","Given a function and map and a key, replace the value with \n  (f leaf) or (map-leaves f m)."],"~$get-default-explained-all-options",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",839,"^8",7,"^9",839,"^:",40,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return the base explained options, matches get-default-options"],"^G","~$zprint.config/get-default-explained-all-options","^6","zprint/config.cljc","^:",40,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",839,"^3B","^3O","^9",839,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Return the base explained options, matches get-default-options"],"~$reset-default-options!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",807,"^8",7,"^9",807,"^:",29,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Remove any previously set options."],"^G","~$zprint.config/reset-default-options!","^6","zprint/config.cljc","^:",29,"^3>",["^11",[[]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",807,"^3B",["^F",[null,"^3D"]],"^9",807,"^3E",0,"^3F",true,"^38",["^11",["^39",["^11",[[]]]]],"^3<","Remove any previously set options."],"~$replace-existing",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1120,"^8",7,"^9",1120,"^:",23,"^38",["^11",["^39",["^11",[["^6F",["~$k-path","~$v"]]]]]],"^3<","If a particular key-path exists in an existing map, replace it\n  with a new key-path.  The existing key-path can have a nil value."],"^G","~$zprint.config/replace-existing","^6","zprint/config.cljc","^:",23,"^3>",["^11",[["^6F","~$p__49703"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1120,"^3B",["^F",[null,"^3C","^3D"]],"^9",1120,"^3E",2,"^3F",true,"^38",["^11",["^39",["^11",[["^6F",["^72","~$v"]]]]]],"^3<","If a particular key-path exists in an existing map, replace it\n  with a new key-path.  The existing key-path can have a nil value."],"~$zfnstyle",["^ ","^G","~$zprint.config/zfnstyle","^6","zprint/config.cljc","^7",278,"^8",1,"^9",278,"^:",14,"^5",["^ ","^6","zprint/config.cljc","^7",278,"^8",6,"^9",278,"^:",14],"^41","^3O"],"~$merge-deep-doc",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",660,"^8",7,"^9",660,"^:",21,"^38",["^11",["^39",["^11",[["^3Q","~$&","^4U"]]]]],"^3<","Do a merge of maps all the way down, keeping track of where every\n  value came from.","^4V",["^ ","^3A",true,"^4W",1,"^3E",1,"^3>",[["^11",["^3Q","^4U"]]],"^38",["^11",[["^3Q","~$&","^4U"]]],"^3@",["^11",[null]]]],"^G","~$zprint.config/merge-deep-doc","^6","zprint/config.cljc","^:",21,"^4V",["^ ","^3A",true,"^4W",1,"^3E",1,"^3>",[["^11",["^3Q","^4U"]]],"^38",["^11",[["^3Q","~$&","^4U"]]],"^3@",["^11",[null]]],"^3>",[["^11",["^3Q","^4U"]]],"^3?",null,"^4W",1,"^3@",["^11",[null]],"^8",1,"^3A",true,"^4Y",[["^ ","^4W",1,"^3A",true,"^41","^3D"]],"^7",660,"^3B","^3D","^9",660,"^3E",1,"^3F",true,"^38",["^11",[["^3Q","~$&","^4U"]]],"^3<","Do a merge of maps all the way down, keeping track of where every\n  value came from."],"~$config-set-options!",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",897,"^8",7,"^9",897,"^:",26,"^38",["^11",["^39",["^11",[["^3T","~$doc-str"],["^3T"]]]]],"^3<","Add some options to the current options, checking to make\n  sure that they are correct.","^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^3T","^7:"],["^3T"]]],"^38",["^11",[["^3T","^7:"],["^3T"]]],"^3@",["^11",[null,null]]]],"^G","~$zprint.config/config-set-options!","^6","zprint/config.cljc","^:",26,"^4V",["^ ","^3A",false,"^4W",2,"^3E",2,"^3>",["^11",[["^3T","^7:"],["^3T"]]],"^38",["^11",[["^3T","^7:"],["^3T"]]],"^3@",["^11",[null,null]]],"^3>",["^11",[["^3T","^7:"],["^3T"]]],"^3?",null,"^4W",2,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^4Y",[["^ ","^4W",2,"^3A",false,"^41","^3V"],["^ ","^4W",1,"^3A",false,"^41","^3V"]],"^7",897,"^9",897,"^3E",2,"^3F",true,"^38",["^11",[["^3T","^7:"],["^3T"]]],"^3<","Add some options to the current options, checking to make\n  sure that they are correct."],"~$allowed-key-set",["^ ","^G","~$zprint.config/allowed-key-set","^6","zprint/config.cljc","^7",933,"^8",1,"^9",933,"^:",21,"^5",["^ ","^6","zprint/config.cljc","^7",933,"^8",6,"^9",933,"^:",21],"^41","^5G"],"~$build-key-seq-set",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",923,"^8",7,"^9",923,"^:",24,"^38",["^11",["^39",["^11",[["^3:"]]]]],"^3<","Given a map, build a set of key-seqs that are in the map.  This\n  will leave out the :fn-map elements, and possibly do other special\n  processing."],"^G","~$zprint.config/build-key-seq-set","^6","zprint/config.cljc","^:",24,"^3>",["^11",[["^3:"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",923,"^3B",["^F",[null,"^3C","^3D"]],"^9",923,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^3:"]]]]],"^3<","Given a map, build a set of key-seqs that are in the map.  This\n  will leave out the :fn-map elements, and possibly do other special\n  processing."],"~$get-config-from-map",["^ ","^37",null,"^5",["^ ","^6","zprint/config.cljc","^7",1066,"^8",7,"^9",1066,"^:",26,"^38",["^11",["^39",["^11",[["~$map-string"]]]]],"^3<","If there is a :config-map key in the opts, read in a map from that string."],"^G","~$zprint.config/get-config-from-map","^6","zprint/config.cljc","^:",26,"^3>",["^11",[["^7A"]]],"^3?",null,"^3@",["^11",[null,null]],"^8",1,"^3A",false,"^7",1066,"^3B",["^F",[null,"^3V"]],"^9",1066,"^3E",1,"^3F",true,"^38",["^11",["^39",["^11",[["^7A"]]]]],"^3<","If there is a :config-map key in the opts, read in a map from that string."]],"^[",["^ ","^M","^M","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^F",["~:zprint","~:old?","~:zloc?","~:flow?","~:sort-in-code?","~:nl-separator?","~:hang-size","~:gt3-force-nl","~:indent-arg","~:format","~:arg2-extend","~:arg2-pair","~:remove","~:key-depth-color","~:wrap-coll?","~:constant-pair?","~:indent","~:max-length","~:tuning","~:comma?","~:record-type?","~:fn","~:justify?","~:fn-force-nl","~:max-hang-depth","~:arg1-body","~:future","~:justify-tuning","~:pair-nl","~:arg2","~:user-fn-map","~:hash-paren","~:community","~:pair-fn","~:extend","~:else","~:force-nl","~:number","~:extend-nl","~:arg1-extend","~:promise","~:arg1-pair","~:hang-expand","~:not-specified","~:yellow","~:brace","~:default","~:spaces?","~:pair","~:flow","~:noarg1","~:noarg1-body","~:pair-hang?","~:key-value-color","~:constant-pair-min","~:key-value","~:configured?","~:no-hang","~:dbg-ge","~:value","~:keyword-respect-nl","~:green","~:user-fn","~:expand?","~:cyan","~:force-nl?","~:drop","~:width","~:gt2-force-nl","~:respect-nl?","~:lines","~:uneval","~:fn-name","~:key-ignore-silent","~:key-order","~:color-map","~:arg1-pair-body","~:color?","~:key-ignore","^0","~:agent","~:binding-nl","~:do-in-hang?","~:string","~:vector","~:hex?","~:array","~:size","~:object?","~:parse-string-all?","~:force-nl-body","~:surround","~:arg2-fn","~:hang-avoid","~:style","~:hang-diff","~:paren","~:dbg-print?","~:file?","~:fn-obj","~:count?","~:lift-ns-in-code?","~:config-map","~:fn-gt2-force-nl","~:spec","~:not-present","~:left-space","~:binding","~:inline?","~:modifiers","~:hang-type-flow","~:arg1-force-nl","~:wrap?","~:map-nl","~:hang-adjust","~:dbg-local?","~:hang","~:dbg?","~:justify-hang","~:list","~:quote","~:keyword","~:not-found","~:from","~:wrap-after-multi?","~:flow-body","~:hang-flow","~:binding?","~:red","~:blue","~:key-color","~:optional","~:syntax-quote-paren","~:trim-comments?","~:general-hang-adjust","~:nil","~:interpose","~:max-hang-span","~:deref","~:all-hang","~:bracket","~:record","~:comment","~:parse","~:parse-string?","~:lift-ns?","~:elide","~:auto-width?","~:perf-vs-format","~:to-string?","~:justified","~:style-map","~:fn-gt3-force-nl","~:focus","~:option-fn-first","~:process-bang-zprint?","~:set-by","~:hang-if-equal-flow?","~:arg1-mixin","~:on","~:magenta","~:additional-libraries?","~:max-depth","~:drop?","~:set","~:purple","~:fn-map","~:hang?","~:version","~:none-body","~:hang-flow-limit","~:atom","~$clojure.repl","~:hash-brace","~:tab","~:max-hang-count","~:parallel?","~:sort?","~:delay","~:map","~:object","~:arg1","~:none","~:reader-cond","~:docstring?","~:return-cvec?","~:zipper?","~:black"]],"~:order",["^8[","^8P","^9L","^:4","^9=","^;6","^8R","^9M","^8G","^:Z","^:D","^;M","^7T","^7P","^;L","^;G","^:;","^7R","^;J","^7W","^8H","^:5","^83","^9V","^9S","^8S","^;F","^:2","^:1","^7V","^:S","^;H","^98","^85","^81","^:3","^9E","^;1","^9Z","^;<","^7Y","^7N","^8?","^90","^89","^7O","^8:","^8K","^9G","^8A","^8<","^7E","^7M","^7U","^7[","^80","^82","^86","^8@","^93","^94","^97","^99","^0","^9;","^9?","^9A","^9D","^9I","^9N","^9R","^:6","^:H","^:L","^:M","^:N","^:O","^:R","^:V","^:W","^;4","^;5","^;7","^;9","^;>","^;A","^;B","^;C","^;E","^;2","^9X","^:=","^9Y","^;=","^:E","^;0","^8I","^8J","^:<","^9C","^9J","^8B","^7J","^;:","^7G","^8Y","^7I","^7Z","^87","^8=","^8E","^8V","^9>","^9K","^:7","^:8","^:C","^:F","^:I","^:K","^;@","^;I","^8X","^8D","^;3","^8U","^:@","^;8","^:?","^;N","^:X","^92","^:Q","^7F","^9F","^:>","^:Y","^91","^9[","^9@","^;K","^7L","^7S","^8L","^8N","^9H","^7X","^:T","^9O","^9W","^:G","^9U","^8Z","^84","^88","^8>","^8Q","^8T","^9<","^:0","^:J","^:U","^7K","^;D","^7H","^8W","^9B","^7Q","^8M","^95","^96","^9:","^9P","^:A","^:P","^8;","^::","^:[","^8O","^;;","^;?","^:9","^8C","^8F","^7D","^9T","^:B","^9Q"]],"^15",["^ ","^V",["^F",[]]],"^16",["^ "],"^17",["^N","^M","^Q","^P","^O","^R","^T","^S"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^;R","~:static-fns"],true,["^;R","~:elide-asserts"],false,["^;R","~:optimize-constants"],null,["^;R","^1<"],null,["^;R","~:external-config"],null,["^;R","~:tooling-config"],null,["^;R","~:emit-constants"],null,["^;R","~:load-tests"],null,["^;R","~:form-size-threshold"],null,["^;R","~:infer-externs"],true,["^;R","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;R","~:fn-invoke-direct"],null,["^;R","~:source-map"],"/dev/null"]]]