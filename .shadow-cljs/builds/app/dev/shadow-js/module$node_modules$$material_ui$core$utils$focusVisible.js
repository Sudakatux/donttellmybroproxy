["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@material-ui/core/utils/focusVisible.js"],"~:js","shadow$provide.module$node_modules$$material_ui$core$utils$focusVisible=function(global,require,module,exports){function handleKeyDown(){hadKeyboardEvent=!0}function handlePointerDown(){hadKeyboardEvent=!1}function handleVisibilityChange(){\"hidden\"===this.visibilityState&&hadFocusVisibleRecently&&(hadKeyboardEvent=!0)}function isFocusVisible(event){event=event.target;try{return event.matches(\":focus-visible\")}catch(error){}var JSCompiler_temp;if(!(JSCompiler_temp=hadKeyboardEvent)){JSCompiler_temp=\nevent.type;var tagName=event.tagName;JSCompiler_temp=\"INPUT\"===tagName&&inputTypesWhitelist[JSCompiler_temp]&&!event.readOnly||\"TEXTAREA\"===tagName&&!event.readOnly||event.isContentEditable?!0:!1}return JSCompiler_temp}function handleBlurVisible(){hadFocusVisibleRecently=!0;window.clearTimeout(hadFocusVisibleRecentlyTimeout);hadFocusVisibleRecentlyTimeout=window.setTimeout(function(){hadFocusVisibleRecently=!1;window.clearTimeout(hadFocusVisibleRecentlyTimeout)},100)}global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");\nObject.defineProperty(exports,\"__esModule\",{value:!0});exports.teardown=function(ownerDocument){ownerDocument.removeEventListener(\"keydown\",handleKeyDown,!0);ownerDocument.removeEventListener(\"mousedown\",handlePointerDown,!0);ownerDocument.removeEventListener(\"pointerdown\",handlePointerDown,!0);ownerDocument.removeEventListener(\"touchstart\",handlePointerDown,!0);ownerDocument.removeEventListener(\"visibilitychange\",handleVisibilityChange,!0)};exports.useIsFocusVisible=function(){var ref=_react.default.useCallback(function(instance){instance=\n_reactDom.default.findDOMNode(instance);null!=instance&&(instance=instance.ownerDocument,instance.addEventListener(\"keydown\",handleKeyDown,!0),instance.addEventListener(\"mousedown\",handlePointerDown,!0),instance.addEventListener(\"pointerdown\",handlePointerDown,!0),instance.addEventListener(\"touchstart\",handlePointerDown,!0),instance.addEventListener(\"visibilitychange\",handleVisibilityChange,!0))},[]);return{isFocusVisible:isFocusVisible,onBlurVisible:handleBlurVisible,ref:ref}};var _react=global(require(\"module$node_modules$react$index\")),\n_reactDom=global(require(\"module$node_modules$react_dom$index\")),hadKeyboardEvent=!0,hadFocusVisibleRecently=!1,hadFocusVisibleRecentlyTimeout=null,inputTypesWhitelist={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,\"datetime-local\":!0}}","~:source","shadow$provide[\"module$node_modules$$material_ui$core$utils$focusVisible\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.teardown = teardown;\nexports.useIsFocusVisible = useIsFocusVisible;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\n// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction handleKeyDown() {\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n * @param {Event} e\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(ownerDocument) {\n  ownerDocument.addEventListener('keydown', handleKeyDown, true);\n  ownerDocument.addEventListener('mousedown', handlePointerDown, true);\n  ownerDocument.addEventListener('pointerdown', handlePointerDown, true);\n  ownerDocument.addEventListener('touchstart', handlePointerDown, true);\n  ownerDocument.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction teardown(ownerDocument) {\n  ownerDocument.removeEventListener('keydown', handleKeyDown, true);\n  ownerDocument.removeEventListener('mousedown', handlePointerDown, true);\n  ownerDocument.removeEventListener('pointerdown', handlePointerDown, true);\n  ownerDocument.removeEventListener('touchstart', handlePointerDown, true);\n  ownerDocument.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n    window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  }, 100);\n}\n\nfunction useIsFocusVisible() {\n  var ref = _react.default.useCallback(function (instance) {\n    var node = _reactDom.default.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$react_dom$index","~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["useIsFocusVisible","url","__esModule","tel","email","teardown","value","text","number","week","time","datetime","onBlurVisible","ref","password","isFocusVisible","date","month","search"]],"~:compiled-at",1570449715021,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$material_ui$core$utils$focusVisible.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@material-ui/core/utils/focusVisible.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$material_ui$core$utils$focusVisible\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.teardown = teardown;\\nexports.useIsFocusVisible = useIsFocusVisible;\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\n\\nvar _reactDom = _interopRequireDefault(require(\\\"react-dom\\\"));\\n\\n// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\\nvar hadKeyboardEvent = true;\\nvar hadFocusVisibleRecently = false;\\nvar hadFocusVisibleRecentlyTimeout = null;\\nvar inputTypesWhitelist = {\\n  text: true,\\n  search: true,\\n  url: true,\\n  tel: true,\\n  email: true,\\n  password: true,\\n  number: true,\\n  date: true,\\n  month: true,\\n  week: true,\\n  time: true,\\n  datetime: true,\\n  'datetime-local': true\\n};\\n/**\\n * Computes whether the given element should automatically trigger the\\n * `focus-visible` class being added, i.e. whether it should always match\\n * `:focus-visible` when focused.\\n * @param {Element} node\\n * @return {boolean}\\n */\\n\\nfunction focusTriggersKeyboardModality(node) {\\n  var type = node.type,\\n      tagName = node.tagName;\\n\\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\\n    return true;\\n  }\\n\\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\\n    return true;\\n  }\\n\\n  if (node.isContentEditable) {\\n    return true;\\n  }\\n\\n  return false;\\n}\\n\\nfunction handleKeyDown() {\\n  hadKeyboardEvent = true;\\n}\\n/**\\n * If at any point a user clicks with a pointing device, ensure that we change\\n * the modality away from keyboard.\\n * This avoids the situation where a user presses a key on an already focused\\n * element, and then clicks on a different element, focusing it with a\\n * pointing device, while we still think we're in keyboard modality.\\n * @param {Event} e\\n */\\n\\n\\nfunction handlePointerDown() {\\n  hadKeyboardEvent = false;\\n}\\n\\nfunction handleVisibilityChange() {\\n  if (this.visibilityState === 'hidden') {\\n    // If the tab becomes active again, the browser will handle calling focus\\n    // on the element (Safari actually calls it twice).\\n    // If this tab change caused a blur on an element with focus-visible,\\n    // re-apply the class when the user switches back to the tab.\\n    if (hadFocusVisibleRecently) {\\n      hadKeyboardEvent = true;\\n    }\\n  }\\n}\\n\\nfunction prepare(ownerDocument) {\\n  ownerDocument.addEventListener('keydown', handleKeyDown, true);\\n  ownerDocument.addEventListener('mousedown', handlePointerDown, true);\\n  ownerDocument.addEventListener('pointerdown', handlePointerDown, true);\\n  ownerDocument.addEventListener('touchstart', handlePointerDown, true);\\n  ownerDocument.addEventListener('visibilitychange', handleVisibilityChange, true);\\n}\\n\\nfunction teardown(ownerDocument) {\\n  ownerDocument.removeEventListener('keydown', handleKeyDown, true);\\n  ownerDocument.removeEventListener('mousedown', handlePointerDown, true);\\n  ownerDocument.removeEventListener('pointerdown', handlePointerDown, true);\\n  ownerDocument.removeEventListener('touchstart', handlePointerDown, true);\\n  ownerDocument.removeEventListener('visibilitychange', handleVisibilityChange, true);\\n}\\n\\nfunction isFocusVisible(event) {\\n  var target = event.target;\\n\\n  try {\\n    return target.matches(':focus-visible');\\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\\n  // we use our own heuristic for those browsers\\n  // rethrow might be better if it's not the expected error but do we really\\n  // want to crash if focus-visible malfunctioned?\\n  // no need for validFocusTarget check. the user does that by attaching it to\\n  // focusable events only\\n\\n\\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\\n}\\n/**\\n * Should be called if a blur event is fired on a focus-visible element\\n */\\n\\n\\nfunction handleBlurVisible() {\\n  // To detect a tab/window switch, we look for a blur event followed\\n  // rapidly by a visibility change.\\n  // If we don't see a visibility change within 100ms, it's probably a\\n  // regular focus change.\\n  hadFocusVisibleRecently = true;\\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\\n    hadFocusVisibleRecently = false;\\n    window.clearTimeout(hadFocusVisibleRecentlyTimeout);\\n  }, 100);\\n}\\n\\nfunction useIsFocusVisible() {\\n  var ref = _react.default.useCallback(function (instance) {\\n    var node = _reactDom.default.findDOMNode(instance);\\n\\n    if (node != null) {\\n      prepare(node.ownerDocument);\\n    }\\n  }, []);\\n\\n  return {\\n    isFocusVisible: isFocusVisible,\\n    onBlurVisible: handleBlurVisible,\\n    ref: ref\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"handleKeyDown\",\"hadKeyboardEvent\",\"handlePointerDown\",\"handleVisibilityChange\",\"visibilityState\",\"hadFocusVisibleRecently\",\"isFocusVisible\",\"event\",\"target\",\"matches\",\"error\",\"type\",\"node\",\"tagName\",\"inputTypesWhitelist\",\"readOnly\",\"isContentEditable\",\"handleBlurVisible\",\"window\",\"clearTimeout\",\"hadFocusVisibleRecentlyTimeout\",\"setTimeout\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"teardown\",\"ownerDocument\",\"removeEventListener\",\"useIsFocusVisible\",\"ref\",\"_react\",\"default\",\"useCallback\",\"instance\",\"_reactDom\",\"findDOMNode\",\"addEventListener\",\"onBlurVisible\",\"text\",\"search\",\"url\",\"tel\",\"email\",\"password\",\"number\",\"date\",\"month\",\"week\",\"time\",\"datetime\"]\n}\n"]